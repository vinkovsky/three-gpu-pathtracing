var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},a={},t={},n=e.parcelRequire5b70;null==n&&((n=function(e){if(e in a)return a[e].exports;if(e in t){var n=t[e];delete t[e];var r={id:e,exports:{}};return a[e]=r,n.call(r.exports,r,r.exports),r.exports}var i=new Error("Cannot find module '"+e+"'");throw i.code="MODULE_NOT_FOUND",i}).register=function(e,a){t[e]=a},e.parcelRequire5b70=n);var r=n("ilwiq"),i=n("RPVlj"),o=n("7lx9d"),s=n("5Rd1x"),l=n("4CEV9"),d=n("cVdfP"),c=n("891vQ"),m=n("kp7Te"),h=n("jiuw3");let u,g,p,C,f,S,w,y,b,v,R,T,x,I,F,M;const E={material1:{color:"#ffc766",emissive:"#000000",emissiveIntensity:1,roughness:.3,metalness:.8,ior:1.495,transmission:0,thinFilm:!1,attenuationColor:"#ffffff",attenuationDistance:.5,opacity:1,clearcoat:0,clearcoatRoughness:0,sheenColor:"#000000",sheenRoughness:0,iridescence:0,iridescenceIOR:1.5,iridescenceThickness:400,specularColor:"#ffffff",specularIntensity:1,matte:!1,flatShading:!1,castShadow:!0},material2:{color:"#db7157",emissive:"#000000",emissiveIntensity:1,roughness:.9,metalness:.1,transmission:0,thinFilm:!1,attenuationColor:"#ffffff",attenuationDistance:.5,ior:1.495,opacity:1,clearcoat:0,clearcoatRoughness:0,sheenColor:"#000000",sheenRoughness:0,iridescence:0,iridescenceIOR:1.5,iridescenceThickness:400,specularColor:"#ffffff",specularIntensity:1,matte:!1,flatShading:!1,castShadow:!0},material3:{color:"#000000",roughness:.1,metalness:.05,matte:!1},multipleImportanceSampling:!0,stableNoise:!1,denoiseEnabled:!0,denoiseSigma:2.5,denoiseThreshold:.1,denoiseKSigma:1,environmentIntensity:1,environmentRotation:0,environmentBlur:0,backgroundBlur:0,bounces:5,samplesPerFrame:1,acesToneMapping:!0,resolutionScale:1/window.devicePixelRatio,transparentTraversals:20,filterGlossyFactor:.5,tiles:1,backgroundAlpha:1,checkerboardTransparency:!0,cameraProjection:"Perspective"};window.location.hash.includes("transmission")?(E.material1.metalness=0,E.material1.roughness=.23,E.material1.transmission=1,E.material1.color="#ffffff",E.bounces=10,E.tiles=2):window.location.hash.includes("iridescent")?(E.material1.color="#474747",E.material1.roughness=.25,E.material1.metalness=1,E.material1.iridescence=1,E.material1.iridescenceIOR=2.2):window.location.hash.includes("acrylic")&&(E.material1.color="#ffffff",E.material1.roughness=0,E.material1.metalness=0,E.material1.transmission=1,E.material1.attenuationDistance=.75,E.material1.attenuationColor="#2a6dc6",E.material2.color="#ffffff",E.material2.roughness=0,E.material2.metalness=.975,E.material3.color="#999999",E.material3.roughness=.2,E.material3.metalness=0,E.bounces=20,E.tiles=3);function B(){const e=window.innerWidth,a=window.innerHeight,t=E.resolutionScale,n=window.devicePixelRatio;C.setSize(e*t*n,a*t*n),C.reset(),u.setSize(e,a),u.setPixelRatio(window.devicePixelRatio*t);const r=e/a;b.aspect=r,b.updateProjectionMatrix();const i=5/r;v.top=i/2,v.bottom=i/-2,v.updateProjectionMatrix()}function k(){C.reset()}function A(){const e=x.generate(T,E.environmentBlur);C.material.envMapInfo.updateFrom(e),I.environment=e,C.reset()}function P(e){"Perspective"===e?(f&&b.position.copy(f.position),f=b):"Orthographic"===e?(f&&v.position.copy(f.position),f=v):(f&&R.position.copy(f.position),f=R),g.object=f,C.camera=f,g.update(),k()}function D(){requestAnimationFrame(D);const e=y[0];e.color.set(E.material1.color).convertSRGBToLinear(),e.emissive.set(E.material1.emissive).convertSRGBToLinear(),e.emissiveIntensity=E.material1.emissiveIntensity,e.metalness=E.material1.metalness,e.roughness=E.material1.roughness,e.transmission=E.material1.transmission,e.attenuationDistance=E.material1.thinFilm?1/0:E.material1.attenuationDistance,e.attenuationColor.set(E.material1.attenuationColor),e.ior=E.material1.ior,e.opacity=E.material1.opacity,e.clearcoat=E.material1.clearcoat,e.clearcoatRoughness=E.material1.clearcoatRoughness,e.sheenColor.set(E.material1.sheenColor).convertSRGBToLinear(),e.sheenRoughness=E.material1.sheenRoughness,e.iridescence=E.material1.iridescence,e.iridescenceIOR=E.material1.iridescenceIOR,e.iridescenceThicknessRange=[0,E.material1.iridescenceThickness],e.specularColor.set(E.material1.specularColor).convertSRGBToLinear(),e.specularIntensity=E.material1.specularIntensity,e.transparent=e.opacity<1,e.flatShading=E.material1.flatShading;const a=y[1];a.color.set(E.material2.color).convertSRGBToLinear(),a.emissive.set(E.material2.emissive).convertSRGBToLinear(),a.emissiveIntensity=E.material2.emissiveIntensity,a.metalness=E.material2.metalness,a.roughness=E.material2.roughness,a.transmission=E.material2.transmission,a.attenuationDistance=E.material2.thinFilm?1/0:E.material2.attenuationDistance,a.attenuationColor.set(E.material2.attenuationColor),a.ior=E.material2.ior,a.opacity=E.material2.opacity,a.clearcoat=E.material2.clearcoat,a.clearcoatRoughness=E.material2.clearcoatRoughness,a.sheenColor.set(E.material2.sheenColor).convertSRGBToLinear(),a.sheenRoughness=E.material2.sheenRoughness,a.iridescence=E.material2.iridescence,a.iridescenceIOR=E.material2.iridescenceIOR,a.iridescenceThicknessRange=[0,E.material2.iridescenceThickness],a.specularColor.set(E.material2.specularColor).convertSRGBToLinear(),a.specularIntensity=E.material2.specularIntensity,a.transparent=a.opacity<1,a.flatShading=E.material2.flatShading;const t=y[2];t.color.set(E.material3.color).convertSRGBToLinear(),t.metalness=E.material3.metalness,t.roughness=E.material3.roughness,t.transparent=t.opacity<1,C.material.materials.updateFrom(p.materials,p.textures),C.material.materials.setMatte(0,E.material1.matte),C.material.materials.setMatte(1,E.material2.matte),C.material.materials.setMatte(2,E.material3.matte),C.material.materials.setCastShadow(0,E.material1.castShadow),C.material.materials.setCastShadow(1,E.material2.castShadow),C.material.filterGlossyFactor=E.filterGlossyFactor,C.material.environmentIntensity=E.environmentIntensity,C.material.backgroundBlur=E.backgroundBlur,C.material.bounces=E.bounces,C.material.backgroundAlpha=E.backgroundAlpha,C.material.physicalCamera.updateFrom(f),f.updateMatrixWorld(),E.backgroundAlpha<1?I.background=null:I.background=I.environment,void 0===M&&(M=u.info.programs.length);for(let e=0,a=E.samplesPerFrame;e<a;e++)C.update();if(!window.DEBUG_SHADERS){const e=u.getContext(),a={},t=u.info.programs[M];a.context=e,a.vertexShader=t.vertexShader,a.fragmentShader=t.fragmentShader,a.vertexShaderSource=e.getShaderSource(t.vertexShader),a.fragmentShaderSource=e.getShaderSource(t.fragmentShader);const n=e.getExtension("WEBGL_debug_shaders");a.debugVertexShaderSource=n.getTranslatedShaderSource(t.vertexShader),a.debugFragmentShaderSource=n.getTranslatedShaderSource(t.fragmentShader),window.DEBUG_SHADERS=a,console.log("Original and translated debug shaders added to window.DEBUG_SHADERS object.")}C.samples<1&&u.render(I,f),w.material.sigma=E.denoiseSigma,w.material.threshold=E.denoiseThreshold,w.material.kSigma=E.denoiseKSigma;const n=E.denoiseEnabled?w:S;u.autoClear=!1,n.material.map=C.target.texture,n.render(u),u.autoClear=!0,F.innerText=`Samples: ${Math.floor(C.samples)}`}window.innerWidth/window.innerHeight<.65&&(E.bounces=Math.max(E.bounces,6),E.resolutionScale*=.5,E.tiles=2,E.multipleImportanceSampling=!1,E.environmentBlur=.35),async function(){u=new r.WebGLRenderer({antialias:!0}),u.toneMapping=r.ACESFilmicToneMapping,u.outputEncoding=r.sRGBEncoding,u.setClearColor(0,0),document.body.appendChild(u.domElement);const e=window.innerWidth/window.innerHeight;b=new l.PhysicalCamera(75,e,.025,500),b.position.set(-4,2,3);const a=5/e;v=new r.OrthographicCamera(-2.5,2.5,a/2,a/-2,0,100),v.position.set(-4,2,3),R=new l.EquirectCamera,R.position.set(-4,2,3),C=new l.PathTracingRenderer(u),C.alpha=!0,C.material=new l.PhysicalPathTracingMaterial,C.material.setDefine("TRANSPARENT_TRAVERSALS",E.transparentTraversals),C.material.setDefine("FEATURE_MIS",Number(E.multipleImportanceSampling)),C.tiles.set(E.tiles,E.tiles),S=new i.FullScreenQuad(new r.MeshBasicMaterial({map:C.target.texture,blending:r.CustomBlending,premultipliedAlpha:u.getContextAttributes().premultipliedAlpha})),w=new i.FullScreenQuad(new l.DenoiseMaterial({map:C.target.texture,blending:r.CustomBlending,premultipliedAlpha:u.getContextAttributes().premultipliedAlpha})),g=new s.OrbitControls(b,u.domElement),g.addEventListener("change",(()=>{C.reset()})),I=new r.Scene,F=document.getElementById("samples"),x=new l.BlurredEnvMapGenerator(u);const t=(new c.RGBELoader).setDataType(r.FloatType).loadAsync("https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/royal_esplanade_1k.hdr").then((e=>{T=e,A()})),n=new d.PathTracingSceneWorker,f=(new o.GLTFLoader).setMeshoptDecoder(m.MeshoptDecoder).loadAsync("https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/material-balls/material_ball_v2.glb").then((e=>{const a=new r.Group;e.scene.scale.setScalar(.01),e.scene.updateMatrixWorld(),a.add(e.scene);const t=new r.Box3;t.setFromObject(e.scene);const i=new r.Mesh(new r.CylinderGeometry(3,3,.05,200),new r.MeshPhysicalMaterial({color:16777215,roughness:0,metalness:.25}));i.geometry=i.geometry.toNonIndexed(),i.geometry.clearGroups(),i.position.y=t.min.y-.03,a.add(i);const o=new r.MeshPhysicalMaterial,s=new r.MeshPhysicalMaterial;return e.scene.traverse((e=>{e.geometry&&e.geometry.computeVertexNormals(),"Sphere_1"===e.name?e.material=s:e.material=o,"subsphere_1"===e.name&&(e.material=s)})),y=[o,s,i.material],n.generate(a)})).then((e=>{p=e,I.add(e.scene);const{bvh:a,textures:t,materials:r}=e,i=a.geometry,o=C.material;o.bvh.updateFrom(a),o.attributesArray.updateFrom(i.attributes.normal,i.attributes.tangent,i.attributes.uv,i.attributes.color),o.materialIndexAttribute.updateFrom(i.attributes.materialIndex),o.textures.setTextures(u,2048,2048,t),o.materials.updateFrom(r,t),n.dispose()}));await Promise.all([f,t]),document.getElementById("loading").remove(),document.body.classList.add("checkerboard"),B(),window.addEventListener("resize",B);const M=new h.GUI;P(E.cameraProjection);const G=M.addFolder("Path Tracing");G.add(E,"acesToneMapping").onChange((e=>{u.toneMapping=e?r.ACESFilmicToneMapping:r.NoToneMapping,S.material.needsUpdate=!0})),G.add(E,"stableNoise").onChange((e=>{C.stableNoise=e})),G.add(E,"multipleImportanceSampling").onChange((e=>{C.material.setDefine("FEATURE_MIS",Number(e)),C.reset()})),G.add(E,"tiles",1,4,1).onChange((e=>{C.tiles.set(e,e)})),G.add(E,"samplesPerFrame",1,10,1),G.add(E,"filterGlossyFactor",0,1).onChange((()=>{C.reset()})),G.add(E,"bounces",1,30,1).onChange((()=>{C.reset()})),G.add(E,"transparentTraversals",0,40,1).onChange((e=>{C.material.setDefine("TRANSPARENT_TRAVERSALS",e),C.reset()})),G.add(E,"resolutionScale",.1,1).onChange((()=>{B()}));const L=M.addFolder("Denoising");L.add(E,"denoiseEnabled"),L.add(E,"denoiseSigma",.01,12),L.add(E,"denoiseThreshold",.01,1),L.add(E,"denoiseKSigma",0,12),L.close();const O=M.addFolder("Environment");O.add(E,"environmentIntensity",0,10).onChange((()=>{C.reset()})),O.add(E,"environmentRotation",0,2*Math.PI).onChange((e=>{C.material.environmentRotation.makeRotationY(e),C.reset()})),O.add(E,"environmentBlur",0,1).onChange((()=>{A()})),O.add(E,"backgroundBlur",0,1).onChange((()=>{C.reset()})),O.add(E,"backgroundAlpha",0,1).onChange((()=>{C.reset()})),O.add(E,"checkerboardTransparency").onChange((e=>{e?document.body.classList.add("checkerboard"):document.body.classList.remove("checkerboard")})),O.close();const _=M.addFolder("Camera");_.add(E,"cameraProjection",["Perspective","Orthographic","Equirectangular"]).onChange((e=>{P(e)})),_.add(b,"focusDistance",1,100).onChange(k),_.add(b,"apertureBlades",0,10,1).onChange((function(e){b.apertureBlades=0===e?0:Math.max(e,3),this.updateDisplay(),k()})),_.add(b,"apertureRotation",0,12.5).onChange(k),_.add(b,"anamorphicRatio",.1,10).onChange(k),_.add(b,"bokehSize",0,50).onChange(k).listen(),_.add(b,"fStop",.3,20).onChange(k).listen(),_.add(b,"fov",25,100).onChange((()=>{b.updateProjectionMatrix(),k()})).listen(),_.close();const N=M.addFolder("Shell Material");N.addColor(E.material1,"color").onChange(k),N.addColor(E.material1,"emissive").onChange(k),N.add(E.material1,"emissiveIntensity",0,50,.01).onChange(k),N.add(E.material1,"roughness",0,1).onChange(k),N.add(E.material1,"metalness",0,1).onChange(k),N.add(E.material1,"opacity",0,1).onChange(k),N.add(E.material1,"transmission",0,1).onChange(k),N.add(E.material1,"thinFilm",0,1).onChange(k),N.add(E.material1,"attenuationDistance",.05,2).onChange(k),N.addColor(E.material1,"attenuationColor").onChange(k),N.add(E.material1,"ior",.9,3).onChange(k),N.add(E.material1,"clearcoat",0,1).onChange(k),N.add(E.material1,"clearcoatRoughness",0,1).onChange(k),N.addColor(E.material1,"sheenColor").onChange(k),N.add(E.material1,"sheenRoughness",0,1).onChange(k),N.add(E.material1,"iridescence",0,1).onChange(k),N.add(E.material1,"iridescenceIOR",.1,3).onChange(k),N.add(E.material1,"iridescenceThickness",0,1200).onChange(k),N.addColor(E.material1,"specularColor").onChange(k),N.add(E.material1,"specularIntensity",0,1).onChange(k),N.add(E.material1,"matte").onChange(k),N.add(E.material1,"flatShading").onChange(k),N.add(E.material1,"castShadow").onChange(k),N.close();const j=M.addFolder("Ball Material");j.addColor(E.material2,"color").onChange(k),j.addColor(E.material2,"emissive").onChange(k),j.add(E.material2,"emissiveIntensity",0,50,.01).onChange(k),j.add(E.material2,"roughness",0,1).onChange(k),j.add(E.material2,"metalness",0,1).onChange(k),j.add(E.material2,"opacity",0,1).onChange(k),j.add(E.material2,"transmission",0,1).onChange(k),N.add(E.material2,"thinFilm",0,1).onChange(k),j.add(E.material2,"attenuationDistance",.05,2).onChange(k),j.addColor(E.material2,"attenuationColor").onChange(k),j.add(E.material2,"ior",.9,3).onChange(k),j.add(E.material2,"clearcoat",0,1).onChange(k),j.add(E.material2,"clearcoatRoughness",0,1).onChange(k),j.addColor(E.material2,"sheenColor").onChange(k),j.add(E.material2,"sheenRoughness",0,1).onChange(k),j.add(E.material2,"iridescence",0,1).onChange(k),j.add(E.material2,"iridescenceIOR",.1,3).onChange(k),j.add(E.material2,"iridescenceThickness",0,1200).onChange(k),j.addColor(E.material2,"specularColor").onChange(k),j.add(E.material2,"specularIntensity",0,1).onChange(k),j.add(E.material2,"matte").onChange(k),j.add(E.material2,"flatShading").onChange(k),j.add(E.material2,"castShadow").onChange(k),j.close();const U=M.addFolder("Floor Material");U.addColor(E.material3,"color").onChange(k),U.add(E.material3,"roughness",0,1).onChange(k),U.add(E.material3,"metalness",0,1).onChange(k),U.add(E.material3,"matte").onChange(k),U.close(),D()}();
//# sourceMappingURL=materialBall.2d30a0c5.js.map
