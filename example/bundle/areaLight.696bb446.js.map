{"mappings":"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","sources":["src/index.js","src/core/PathTracingRenderer.js","src/materials/fullscreen/BlendMaterial.js","src/utils/SobolNumberMapGenerator.js","src/shader/rand/sobol.glsl.js","src/core/QuiltPathTracingRenderer.js","src/core/DynamicPathTracingSceneGenerator.js","src/core/MaterialReducer.js","src/objects/PhysicalCamera.js","src/objects/EquirectCamera.js","src/objects/PhysicalSpotLight.js","src/objects/ShapedAreaLight.js","src/textures/GradientEquirectTexture.js","src/textures/ProceduralEquirectTexture.js","src/utils/BlurredEnvMapGenerator.js","src/shader/common/utils.glsl.js","src/utils/IESLoader.js","src/materials/fullscreen/DenoiseMaterial.js","src/materials/debug/GraphMaterial.js","src/materials/pathtracing/PhysicalPathTracingMaterial.js","src/uniforms/PhysicalCameraUniform.js","src/uniforms/EquirectHdrInfoUniform.js","src/uniforms/LightsInfoUniformStruct.js","src/uniforms/IESProfilesTexture.js","src/uniforms/AttributesTextureArray.js","src/uniforms/FloatAttributeTextureArray.js","src/uniforms/MaterialsTexture.js","src/uniforms/utils.js","src/uniforms/RenderTarget2DArray.js","src/shader/structs/cameraStruct.glsl.js","src/shader/structs/equirectStruct.glsl.js","src/shader/structs/lightsStruct.glsl.js","src/shader/structs/fogMaterialBvh.glsl.js","src/shader/bsdf/bsdfSampling.glsl.js","src/shader/bsdf/ggx.glsl.js","src/shader/bsdf/sheen.glsl.js","src/shader/bsdf/iridescence.glsl.js","src/shader/bsdf/fog.glsl.js","src/shader/sampling/equirectSampling.glsl.js","src/shader/sampling/lightSampling.glsl.js","src/shader/common/intersectShapes.glsl.js","src/shader/common/math.glsl.js","src/shader/common/fresnel.glsl.js","src/shader/common/arraySamplerTexelFetch.glsl.js","src/materials/pathtracing/glsl/cameraUtils.glsl.js","src/materials/pathtracing/glsl/attenuateHit.glsl.js","src/materials/pathtracing/glsl/traceScene.glsl.js","src/materials/pathtracing/glsl/getSurfaceRecord.glsl.js","src/materials/surface/FogVolumeMaterial.js"],"sourcesContent":["// core\nexport * from './core/PathTracingRenderer.js';\nexport * from './core/QuiltPathTracingRenderer.js';\nexport * from './core/PathTracingSceneGenerator.js';\nexport * from './core/DynamicPathTracingSceneGenerator.js';\nexport * from './core/MaterialReducer.js';\n\n// objects\nexport * from './objects/PhysicalCamera.js';\nexport * from './objects/EquirectCamera.js';\nexport * from './objects/PhysicalSpotLight.js';\nexport * from './objects/ShapedAreaLight.js';\n\n// textures\nexport * from './textures/ProceduralEquirectTexture.js';\nexport * from './textures/GradientEquirectTexture.js';\n\n// uniforms\nexport * from './uniforms/MaterialsTexture.js';\nexport * from './uniforms/RenderTarget2DArray.js';\nexport * from './uniforms/EquirectHdrInfoUniform.js';\nexport * from './uniforms/PhysicalCameraUniform.js';\nexport * from './uniforms/LightsInfoUniformStruct.js';\nexport * from './uniforms/IESProfilesTexture.js';\n\n// utils\nexport * from './utils/GeometryPreparationUtils.js';\nexport * from './utils/BlurredEnvMapGenerator.js';\nexport * from './utils/IESLoader.js';\n\n// materials\nexport * from './materials/fullscreen/DenoiseMaterial.js';\nexport * from './materials/debug/GraphMaterial.js';\nexport * from './materials/MaterialBase.js';\nexport * from './materials/pathtracing/PhysicalPathTracingMaterial.js';\nexport * from './materials/surface/FogVolumeMaterial.js';\n","import { RGBAFormat, FloatType, Color, Vector2, WebGLRenderTarget, NoBlending, NormalBlending, Vector4 } from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { BlendMaterial } from '../materials/fullscreen/BlendMaterial.js';\nimport { SobolNumberMapGenerator } from '../utils/SobolNumberMapGenerator.js';\n\nconst _scissor = new Vector4();\nconst _viewport = new Vector4();\n\nfunction* renderTask() {\n\n\tconst {\n\t\t_renderer,\n\t\t_fsQuad,\n\t\t_blendQuad,\n\t\t_primaryTarget,\n\t\t_blendTargets,\n\t\t_sobolTarget,\n\t\t_subframe,\n\t\talpha,\n\t\tcamera,\n\t\tmaterial,\n\t} = this;\n\tconst _ogScissor = new Vector4();\n\tconst _ogViewport = new Vector4();\n\n\tconst blendMaterial = _blendQuad.material;\n\tlet [ blendTarget1, blendTarget2 ] = _blendTargets;\n\n\twhile ( true ) {\n\n\t\tif ( alpha ) {\n\n\t\t\tblendMaterial.opacity = this._opacityFactor / ( this._samples + 1 );\n\t\t\tmaterial.blending = NoBlending;\n\t\t\tmaterial.opacity = 1;\n\n\t\t} else {\n\n\t\t\tmaterial.opacity = this._opacityFactor / ( this._samples + 1 );\n\t\t\tmaterial.blending = NormalBlending;\n\n\t\t}\n\n\t\tconst [ subX, subY, subW, subH ] = _subframe;\n\n\t\tconst w = _primaryTarget.width;\n\t\tconst h = _primaryTarget.height;\n\t\tmaterial.resolution.set( w * subW, h * subH );\n\t\tmaterial.sobolTexture = _sobolTarget.texture;\n\t\tmaterial.seed ++;\n\n\t\tconst tilesX = this.tiles.x || 1;\n\t\tconst tilesY = this.tiles.y || 1;\n\t\tconst totalTiles = tilesX * tilesY;\n\t\tconst dprInv = ( 1 / _renderer.getPixelRatio() );\n\n\t\tfor ( let y = 0; y < tilesY; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < tilesX; x ++ ) {\n\n\t\t\t\tmaterial.cameraWorldMatrix.copy( camera.matrixWorld );\n\t\t\t\tmaterial.invProjectionMatrix.copy( camera.projectionMatrixInverse );\n\n\t\t\t\t// Perspective camera (default)\n\t\t\t\tlet cameraType = 0;\n\n\t\t\t\t// An orthographic projection matrix will always have the bottom right element == 1\n\t\t\t\t// And a perspective projection matrix will always have the bottom right element == 0\n\t\t\t\tif ( camera.projectionMatrix.elements[ 15 ] > 0 ) {\n\n\t\t\t\t\t// Orthographic\n\t\t\t\t\tcameraType = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( camera.isEquirectCamera ) {\n\n\t\t\t\t\t// Equirectangular\n\t\t\t\t\tcameraType = 2;\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.setDefine( 'CAMERA_TYPE', cameraType );\n\n\t\t\t\t// store og state\n\t\t\t\tconst ogRenderTarget = _renderer.getRenderTarget();\n\t\t\t\tconst ogAutoClear = _renderer.autoClear;\n\t\t\t\tconst ogScissorTest = _renderer.getScissorTest();\n\t\t\t\t_renderer.getScissor( _ogScissor );\n\t\t\t\t_renderer.getViewport( _ogViewport );\n\n\t\t\t\tlet tx = x;\n\t\t\t\tlet ty = y;\n\t\t\t\tif ( ! this.stableTiles ) {\n\n\t\t\t\t\tconst tileIndex = ( this._currentTile ) % ( tilesX * tilesY );\n\t\t\t\t\ttx = tileIndex % tilesX;\n\t\t\t\t\tty = ~ ~ ( tileIndex / tilesX );\n\n\t\t\t\t\tthis._currentTile = tileIndex + 1;\n\n\t\t\t\t}\n\n\t\t\t\t// three.js renderer takes values relative to the current pixel ratio\n\t\t\t\t_renderer.setRenderTarget( _primaryTarget );\n\t\t\t\t_renderer.setScissorTest( true );\n\n\t\t\t\t// set the scissor window for a subtile\n\t\t\t\t_scissor.x = tx * w / tilesX;\n\t\t\t\t_scissor.y = ( tilesY - ty - 1 ) * h / tilesY;\n\t\t\t\t_scissor.z = w / tilesX;\n\t\t\t\t_scissor.w = h / tilesY;\n\n\t\t\t\t// adjust for the subframe\n\t\t\t\t_scissor.x = subX * w + subW * _scissor.x;\n\t\t\t\t_scissor.y = subY * h + subH * _scissor.y;\n\t\t\t\t_scissor.z = subW * _scissor.z;\n\t\t\t\t_scissor.w = subH * _scissor.w;\n\n\t\t\t\t// round for floating point cases\n\t\t\t\t_scissor.x = _scissor.x;\n\t\t\t\t_scissor.y = _scissor.y;\n\t\t\t\t_scissor.z = _scissor.z;\n\t\t\t\t_scissor.w = _scissor.w;\n\n\t\t\t\t// multiply inverse of DPR in because threes multiplies it in\n\t\t\t\t_scissor.multiplyScalar( dprInv ).ceil();\n\n\t\t\t\t_viewport.x = subX * w;\n\t\t\t\t_viewport.y = subY * h;\n\t\t\t\t_viewport.z = subW * w;\n\t\t\t\t_viewport.w = subH * h;\n\t\t\t\t_viewport.multiplyScalar( dprInv ).ceil();\n\n\t\t\t\t_renderer.setScissor( _scissor );\n\t\t\t\t_renderer.setViewport( _viewport );\n\n\t\t\t\t_renderer.autoClear = false;\n\t\t\t\t_fsQuad.render( _renderer );\n\n\t\t\t\t// reset original renderer state\n\t\t\t\t_renderer.setViewport( _ogViewport );\n\t\t\t\t_renderer.setScissor( _ogScissor );\n\t\t\t\t_renderer.setScissorTest( ogScissorTest );\n\t\t\t\t_renderer.setRenderTarget( ogRenderTarget );\n\t\t\t\t_renderer.autoClear = ogAutoClear;\n\n\t\t\t\t// swap and blend alpha targets\n\t\t\t\tif ( alpha ) {\n\n\t\t\t\t\tblendMaterial.target1 = blendTarget1.texture;\n\t\t\t\t\tblendMaterial.target2 = _primaryTarget.texture;\n\n\t\t\t\t\t_renderer.setRenderTarget( blendTarget2 );\n\t\t\t\t\t_blendQuad.render( _renderer );\n\t\t\t\t\t_renderer.setRenderTarget( ogRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tthis._samples += ( 1 / totalTiles );\n\n\t\t\t\t// round the samples value if we've finished the tiles\n\t\t\t\tif ( x === tilesX - 1 && y === tilesY - 1 ) {\n\n\t\t\t\t\tthis._samples = Math.round( this._samples );\n\n\t\t\t\t}\n\n\t\t\t\tyield;\n\n\t\t\t}\n\n\t\t}\n\n\t\t[ blendTarget1, blendTarget2 ] = [ blendTarget2, blendTarget1 ];\n\n\t}\n\n}\n\nconst ogClearColor = new Color();\nexport class PathTracingRenderer {\n\n\tget material() {\n\n\t\treturn this._fsQuad.material;\n\n\t}\n\n\tset material( v ) {\n\n\t\tthis._fsQuad.material = v;\n\n\t}\n\n\tget target() {\n\n\t\treturn this._alpha ? this._blendTargets[ 1 ] : this._primaryTarget;\n\n\t}\n\n\tset alpha( v ) {\n\n\t\tif ( this._alpha === v ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( ! v ) {\n\n\t\t\tthis._blendTargets[ 0 ].dispose();\n\t\t\tthis._blendTargets[ 1 ].dispose();\n\n\t\t}\n\n\t\tthis._alpha = v;\n\t\tthis.reset();\n\n\t}\n\n\tget alpha() {\n\n\t\treturn this._alpha;\n\n\t}\n\n\tget samples() {\n\n\t\treturn this._samples;\n\n\t}\n\n\tconstructor( renderer ) {\n\n\t\tthis.camera = null;\n\t\tthis.tiles = new Vector2( 1, 1 );\n\n\t\tthis.stableNoise = false;\n\t\tthis.stableTiles = true;\n\n\t\tthis._samples = 0;\n\t\tthis._subframe = new Vector4( 0, 0, 1, 1 );\n\t\tthis._opacityFactor = 1.0;\n\t\tthis._renderer = renderer;\n\t\tthis._alpha = false;\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\t\tthis._blendQuad = new FullScreenQuad( new BlendMaterial() );\n\t\tthis._task = null;\n\t\tthis._currentTile = 0;\n\n\t\tthis._sobolTarget = new SobolNumberMapGenerator().generate( renderer );\n\t\tthis._primaryTarget = new WebGLRenderTarget( 1, 1, {\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: FloatType,\n\t\t} );\n\t\tthis._blendTargets = [\n\t\t\tnew WebGLRenderTarget( 1, 1, {\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: FloatType,\n\t\t\t} ),\n\t\t\tnew WebGLRenderTarget( 1, 1, {\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: FloatType,\n\t\t\t} ),\n\t\t];\n\n\t}\n\n\tsetSize( w, h ) {\n\n\t\tw = Math.ceil( w );\n\t\th = Math.ceil( h );\n\n\t\tif ( this._primaryTarget.width === w && this._primaryTarget.height === h ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._primaryTarget.setSize( w, h );\n\t\tthis._blendTargets[ 0 ].setSize( w, h );\n\t\tthis._blendTargets[ 1 ].setSize( w, h );\n\t\tthis.reset();\n\n\t}\n\n\tdispose() {\n\n\t\tthis._primaryTarget.dispose();\n\t\tthis._blendTargets[ 0 ].dispose();\n\t\tthis._blendTargets[ 1 ].dispose();\n\t\tthis._sobolTarget.dispose();\n\n\t\tthis._fsQuad.dispose();\n\t\tthis._blendQuad.dispose();\n\t\tthis._task = null;\n\n\t}\n\n\treset() {\n\n\t\tconst { _renderer, _primaryTarget, _blendTargets } = this;\n\t\tconst ogRenderTarget = _renderer.getRenderTarget();\n\t\tconst ogClearAlpha = _renderer.getClearAlpha();\n\t\t_renderer.getClearColor( ogClearColor );\n\n\t\t_renderer.setRenderTarget( _primaryTarget );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setRenderTarget( _blendTargets[ 0 ] );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setRenderTarget( _blendTargets[ 1 ] );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setClearColor( ogClearColor, ogClearAlpha );\n\t\t_renderer.setRenderTarget( ogRenderTarget );\n\n\t\tthis._samples = 0;\n\t\tthis._task = null;\n\n\t\tif ( this.stableNoise ) {\n\n\t\t\tthis.material.seed = 0;\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tif ( ! this._task ) {\n\n\t\t\tthis._task = renderTask.call( this );\n\n\t\t}\n\n\t\tthis._task.next();\n\n\t}\n\n}\n","import { NoBlending } from 'three';\nimport { MaterialBase } from '../MaterialBase.js';\n\nexport class BlendMaterial extends MaterialBase {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\tuniforms: {\n\n\t\t\t\ttarget1: { value: null },\n\t\t\t\ttarget2: { value: null },\n\t\t\t\topacity: { value: 1.0 },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform float opacity;\n\n\t\t\t\tuniform sampler2D target1;\n\t\t\t\tuniform sampler2D target2;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 color1 = texture2D( target1, vUv );\n\t\t\t\t\tvec4 color2 = texture2D( target2, vUv );\n\n\t\t\t\t\tfloat invOpacity = 1.0 - opacity;\n\t\t\t\t\tfloat totalAlpha = color1.a * invOpacity + color2.a * opacity;\n\n\t\t\t\t\tif ( color1.a != 0.0 || color2.a != 0.0 ) {\n\n\t\t\t\t\t\tgl_FragColor.rgb = color1.rgb * ( invOpacity * color1.a / totalAlpha ) + color2.rgb * ( opacity * color2.a / totalAlpha );\n\t\t\t\t\t\tgl_FragColor.a = totalAlpha;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n","import { FloatType, NearestFilter, NoBlending, RGBAFormat, Vector2, WebGLRenderTarget } from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { MaterialBase } from '../materials/MaterialBase.js';\nimport { sobolCommonGLSL, sobolGenerationGLSL } from '../shader/rand/sobol.glsl.js';\n\nclass SobolNumbersMaterial extends MaterialBase {\n\n\tconstructor() {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\tuniforms: {\n\n\t\t\t\tresolution: { value: new Vector2() },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\t${ sobolCommonGLSL }\n\t\t\t\t${ sobolGenerationGLSL }\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tuint index = uint( gl_FragCoord.y ) * uint( resolution.x ) + uint( gl_FragCoord.x );\n\t\t\t\t\tgl_FragColor = generateSobolPoint( index );\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t} );\n\n\t}\n\n}\n\nexport class SobolNumberMapGenerator {\n\n\tgenerate( renderer, dimensions = 256 ) {\n\n\t\tconst target = new WebGLRenderTarget( dimensions, dimensions, {\n\n\t\t\ttype: FloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\n\t\t} );\n\n\t\tconst ogTarget = renderer.getRenderTarget();\n\t\trenderer.setRenderTarget( target );\n\n\t\tconst quad = new FullScreenQuad( new SobolNumbersMaterial() );\n\t\tquad.material.resolution.set( dimensions, dimensions );\n\t\tquad.render( renderer );\n\n\t\trenderer.setRenderTarget( ogTarget );\n\t\tquad.dispose();\n\n\t\treturn target;\n\n\t}\n\n}\n","// References\n// - https://jcgt.org/published/0009/04/01/\n// - Code from https://www.shadertoy.com/view/WtGyDm\n\n// functions to generate multi-dimensions variables of the same functions\n// to support 1, 2, 3, and 4 dimensional sobol sampling.\nfunction generateSobolFunctionVariants( dim = 1 ) {\n\n\tlet type = 'uint';\n\tif ( dim > 1 ) {\n\n\t\ttype = 'uvec' + dim;\n\n\t}\n\n\treturn /* glsl */`\n\t\t${ type } sobolReverseBits( ${ type } x ) {\n\n\t\t\tx = ( ( ( x & 0xaaaaaaaau ) >> 1 ) | ( ( x & 0x55555555u ) << 1 ) );\n\t\t\tx = ( ( ( x & 0xccccccccu ) >> 2 ) | ( ( x & 0x33333333u ) << 2 ) );\n\t\t\tx = ( ( ( x & 0xf0f0f0f0u ) >> 4 ) | ( ( x & 0x0f0f0f0fu ) << 4 ) );\n\t\t\tx = ( ( ( x & 0xff00ff00u ) >> 8 ) | ( ( x & 0x00ff00ffu ) << 8 ) );\n\t\t\treturn ( ( x >> 16 ) | ( x << 16 ) );\n\n\t\t}\n\n\t\t${ type } sobolHashCombine( uint seed, ${ type } v ) {\n\n\t\t\treturn seed ^ ( v + ${ type }( ( seed << 6 ) + ( seed >> 2 ) ) );\n\n\t\t}\n\n\t\t${ type } sobolLaineKarrasPermutation( ${ type } x, ${ type } seed ) {\n\n\t\t\tx += seed;\n\t\t\tx ^= x * 0x6c50b47cu;\n\t\t\tx ^= x * 0xb82f1e52u;\n\t\t\tx ^= x * 0xc7afe638u;\n\t\t\tx ^= x * 0x8d22f6e6u;\n\t\t\treturn x;\n\n\t\t}\n\n\t\t${ type } nestedUniformScrambleBase2( ${ type } x, ${ type } seed ) {\n\n\t\t\tx = sobolLaineKarrasPermutation( x, seed );\n\t\t\tx = sobolReverseBits( x );\n\t\t\treturn x;\n\n\t\t}\n\t`;\n\n}\n\nfunction generateSobolSampleFunctions( dim = 1 ) {\n\n\tlet utype = 'uint';\n\tlet vtype = 'float';\n\tlet num = '';\n\tlet components = '.r';\n\tlet combineValues = '1u';\n\tif ( dim > 1 ) {\n\n\t\tutype = 'uvec' + dim;\n\t\tvtype = 'vec' + dim;\n\t\tnum = dim + '';\n\t\tif ( dim === 2 ) {\n\n\t\t\tcomponents = '.rg';\n\t\t\tcombineValues = 'uvec2( 1u, 2u )';\n\n\t\t} else if ( dim === 3 ) {\n\n\t\t\tcomponents = '.rgb';\n\t\t\tcombineValues = 'uvec3( 1u, 2u, 3u )';\n\n\t\t} else {\n\n\t\t\tcomponents = '';\n\t\t\tcombineValues = 'uvec4( 1u, 2u, 3u, 4u )';\n\n\t\t}\n\n\t}\n\n\treturn /* glsl */`\n\n\t\t${ vtype } sobol${ num }( int effect ) {\n\n\t\t\tuint seed = sobolGetSeed( sobolBounceIndex, uint( effect ) );\n\t\t\tuint index = sobolPathIndex;\n\n\t\t\tuint shuffle_seed = sobolHashCombine( seed, 0u );\n\t\t\tuint shuffled_index = nestedUniformScrambleBase2( sobolReverseBits( index ), shuffle_seed );\n\t\t\t${ vtype } sobol_pt = sobolGetTexturePoint( shuffled_index )${ components };\n\t\t\t${ utype } result = ${ utype }( sobol_pt * 16777216.0 );\n\n\t\t\t${ utype } seed2 = sobolHashCombine( seed, ${ combineValues } );\n\t\t\tresult = nestedUniformScrambleBase2( result, seed2 );\n\n\t\t\treturn SOBOL_FACTOR * ${ vtype }( result >> 8 );\n\n\t\t}\n\t`;\n\n}\n\nexport const sobolCommonGLSL = /* glsl */`\n\n\t// Utils\n\tconst float SOBOL_FACTOR = 1.0 / 16777216.0;\n\tconst uint SOBOL_MAX_POINTS = 256u * 256u;\n\n\t${ generateSobolFunctionVariants( 1 ) }\n\t${ generateSobolFunctionVariants( 2 ) }\n\t${ generateSobolFunctionVariants( 3 ) }\n\t${ generateSobolFunctionVariants( 4 ) }\n\n\tuint sobolHash( uint x ) {\n\n\t\t// finalizer from murmurhash3\n\t\tx ^= x >> 16;\n\t\tx *= 0x85ebca6bu;\n\t\tx ^= x >> 13;\n\t\tx *= 0xc2b2ae35u;\n\t\tx ^= x >> 16;\n\t\treturn x;\n\n\t}\n\n`;\n\nexport const sobolGenerationGLSL = /* glsl */`\n\n\tconst uint SOBOL_DIRECTIONS_1[ 32 ] = uint[ 32 ](\n\t\t0x80000000u, 0xc0000000u, 0xa0000000u, 0xf0000000u,\n\t\t0x88000000u, 0xcc000000u, 0xaa000000u, 0xff000000u,\n\t\t0x80800000u, 0xc0c00000u, 0xa0a00000u, 0xf0f00000u,\n\t\t0x88880000u, 0xcccc0000u, 0xaaaa0000u, 0xffff0000u,\n\t\t0x80008000u, 0xc000c000u, 0xa000a000u, 0xf000f000u,\n\t\t0x88008800u, 0xcc00cc00u, 0xaa00aa00u, 0xff00ff00u,\n\t\t0x80808080u, 0xc0c0c0c0u, 0xa0a0a0a0u, 0xf0f0f0f0u,\n\t\t0x88888888u, 0xccccccccu, 0xaaaaaaaau, 0xffffffffu\n\t);\n\n\tconst uint SOBOL_DIRECTIONS_2[ 32 ] = uint[ 32 ](\n\t\t0x80000000u, 0xc0000000u, 0x60000000u, 0x90000000u,\n\t\t0xe8000000u, 0x5c000000u, 0x8e000000u, 0xc5000000u,\n\t\t0x68800000u, 0x9cc00000u, 0xee600000u, 0x55900000u,\n\t\t0x80680000u, 0xc09c0000u, 0x60ee0000u, 0x90550000u,\n\t\t0xe8808000u, 0x5cc0c000u, 0x8e606000u, 0xc5909000u,\n\t\t0x6868e800u, 0x9c9c5c00u, 0xeeee8e00u, 0x5555c500u,\n\t\t0x8000e880u, 0xc0005cc0u, 0x60008e60u, 0x9000c590u,\n\t\t0xe8006868u, 0x5c009c9cu, 0x8e00eeeeu, 0xc5005555u\n\t);\n\n\tconst uint SOBOL_DIRECTIONS_3[ 32 ] = uint[ 32 ](\n\t\t0x80000000u, 0xc0000000u, 0x20000000u, 0x50000000u,\n\t\t0xf8000000u, 0x74000000u, 0xa2000000u, 0x93000000u,\n\t\t0xd8800000u, 0x25400000u, 0x59e00000u, 0xe6d00000u,\n\t\t0x78080000u, 0xb40c0000u, 0x82020000u, 0xc3050000u,\n\t\t0x208f8000u, 0x51474000u, 0xfbea2000u, 0x75d93000u,\n\t\t0xa0858800u, 0x914e5400u, 0xdbe79e00u, 0x25db6d00u,\n\t\t0x58800080u, 0xe54000c0u, 0x79e00020u, 0xb6d00050u,\n\t\t0x800800f8u, 0xc00c0074u, 0x200200a2u, 0x50050093u\n\t);\n\n\tconst uint SOBOL_DIRECTIONS_4[ 32 ] = uint[ 32 ](\n\t\t0x80000000u, 0x40000000u, 0x20000000u, 0xb0000000u,\n\t\t0xf8000000u, 0xdc000000u, 0x7a000000u, 0x9d000000u,\n\t\t0x5a800000u, 0x2fc00000u, 0xa1600000u, 0xf0b00000u,\n\t\t0xda880000u, 0x6fc40000u, 0x81620000u, 0x40bb0000u,\n\t\t0x22878000u, 0xb3c9c000u, 0xfb65a000u, 0xddb2d000u,\n\t\t0x78022800u, 0x9c0b3c00u, 0x5a0fb600u, 0x2d0ddb00u,\n\t\t0xa2878080u, 0xf3c9c040u, 0xdb65a020u, 0x6db2d0b0u,\n\t\t0x800228f8u, 0x400b3cdcu, 0x200fb67au, 0xb00ddb9du\n\t);\n\n\tuint getMaskedSobol( uint index, uint directions[ 32 ] ) {\n\n\t\tuint X = 0u;\n\t\tfor ( int bit = 0; bit < 32; bit ++ ) {\n\n\t\t\tuint mask = ( index >> bit ) & 1u;\n\t\t\tX ^= mask * directions[ bit ];\n\n\t\t}\n\t\treturn X;\n\n\t}\n\n\tvec4 generateSobolPoint( uint index ) {\n\n\t\tif ( index >= SOBOL_MAX_POINTS ) {\n\n\t\t\treturn vec4( 0.0 );\n\n\t\t}\n\n\t\t// NOTEL this sobol \"direction\" is also available but we can't write out 5 components\n\t\t// uint x = index & 0x00ffffffu;\n\t\tuint x = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_1 ) ) & 0x00ffffffu;\n\t\tuint y = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_2 ) ) & 0x00ffffffu;\n\t\tuint z = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_3 ) ) & 0x00ffffffu;\n\t\tuint w = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_4 ) ) & 0x00ffffffu;\n\n\t\treturn vec4( x, y, z, w ) * SOBOL_FACTOR;\n\n\t}\n\n`;\n\nexport const sobolSamplingGLSL = /* glsl */`\n\n\t// Seeds\n\tuniform sampler2D sobolTexture;\n\tuint sobolPixelIndex;\n\tuint sobolPathIndex;\n\tuint sobolBounceIndex;\n\n\tuint sobolGetSeed( uint bounce, uint effect ) {\n\n\t\treturn sobolHash(\n\t\t\tsobolHashCombine(\n\t\t\t\tsobolHashCombine(\n\t\t\t\t\tsobolHash( bounce ),\n\t\t\t\t\tsobolPixelIndex\n\t\t\t\t),\n\t\t\t\teffect\n\t\t\t)\n\t\t);\n\n\t}\n\n\tvec4 sobolGetTexturePoint( uint index ) {\n\n\t\tif ( index >= SOBOL_MAX_POINTS ) {\n\n\t\t\tindex = index % SOBOL_MAX_POINTS;\n\n\t\t}\n\n\t\tuvec2 dim = uvec2( textureSize( sobolTexture, 0 ).xy );\n\t\tuint y = index / dim.x;\n\t\tuint x = index - y * dim.x;\n\t\tvec2 uv = vec2( x, y ) / vec2( dim );\n\t\treturn texture( sobolTexture, uv );\n\n\t}\n\n\t${ generateSobolSampleFunctions( 1 ) }\n\t${ generateSobolSampleFunctions( 2 ) }\n\t${ generateSobolSampleFunctions( 3 ) }\n\t${ generateSobolSampleFunctions( 4 ) }\n\n`;\n","import { PerspectiveCamera, Vector3, MathUtils, Vector2, Matrix4, Vector4 } from 'three';\nimport { PathTracingRenderer } from './PathTracingRenderer.js';\n\nfunction* _task( cb ) {\n\n\tconst {\n\t\tviewCount,\n\t\t_camera,\n\t\t_quiltUtility,\n\t\t_subframe,\n\t} = this;\n\n\tconst quiltViewInfo = {\n\t\tsubframe: _subframe,\n\t\tprojectionMatrix: _camera.projectionMatrix,\n\t\toffsetDirection: new Vector3(),\n\t};\n\n\twhile ( true ) {\n\n\t\tfor ( let i = 0; i < viewCount; i ++ ) {\n\n\t\t\t// get the camera info for the current view index\n\t\t\t_quiltUtility.near = this.camera.near;\n\t\t\t_quiltUtility.far = this.camera.far;\n\t\t\t_quiltUtility.getCameraViewInfo( i, quiltViewInfo );\n\n\t\t\t// transform offset into world frame from camera frame\n\t\t\tquiltViewInfo.offsetDirection.transformDirection( this.camera.matrixWorld );\n\n\t\t\t// adjust the render camera with the view offset\n\t\t\tthis.camera.matrixWorld.decompose(\n\t\t\t\t_camera.position,\n\t\t\t\t_camera.quaternion,\n\t\t\t\t_camera.scale,\n\t\t\t);\n\t\t\t_camera.position.addScaledVector( quiltViewInfo.offsetDirection, quiltViewInfo.offset );\n\t\t\t_camera.updateMatrixWorld();\n\n\t\t\t// get the inverse projection\n\t\t\t_camera.projectionMatrixInverse\n\t\t\t\t.copy( _camera.projectionMatrix )\n\t\t\t\t.invert();\n\n\t\t\tthis._opacityFactor = Math.floor( this._samples + 1 ) / Math.floor( this._quiltSamples + 1 );\n\n\t\t\tdo {\n\n\t\t\t\tconst ogCamera = this.camera;\n\t\t\t\tthis.camera = _camera;\n\t\t\t\tcb();\n\t\t\t\tthis.camera = ogCamera;\n\t\t\t\tyield;\n\n\t\t\t} while ( this._samples % 1 !== 0 );\n\n\t\t\tthis._quiltSamples += 1 / viewCount;\n\n\t\t}\n\n\t\tthis._quiltSamples = Math.round( this._quiltSamples );\n\n\t}\n\n}\n\n// Helper for extracting the camera projection, offset, and quilt subframe needed\n// for rendering a quilt with the provided parameters.\nclass QuiltViewUtility {\n\n\tconstructor() {\n\n\t\tthis.viewCount = 48;\n\t\tthis.quiltDimensions = new Vector2( 8, 6 );\n\t\tthis.viewCone = 35 * MathUtils.DEG2RAD;\n\t\tthis.viewFoV = 14 * MathUtils.DEG2RAD;\n\t\tthis.displayDistance = 1;\n\t\tthis.displayAspect = 0.75;\n\t\tthis.near = 0.01;\n\t\tthis.far = 10;\n\n\t}\n\n\tgetCameraViewInfo( i, target = {} ) {\n\n\t\tconst {\n\t\t\tquiltDimensions,\n\t\t\tviewCone,\n\t\t\tdisplayDistance,\n\t\t\tviewCount,\n\t\t\tviewFoV,\n\t\t\tdisplayAspect,\n\t\t\tnear,\n\t\t\tfar,\n\t\t} = this;\n\n\t\t// initialize defaults\n\t\ttarget.subframe = target.subframe || new Vector4();\n\t\ttarget.offsetDirection = target.offsetDirection || new Vector3();\n\t\ttarget.projectionMatrix\t= target.projectionMatrix || new Matrix4();\n\n\t\t// set camera offset\n\t\tconst halfWidth = Math.tan( 0.5 * viewCone ) * displayDistance;\n\t\tconst totalWidth = halfWidth * 2.0;\n\t\tconst stride = totalWidth / ( viewCount - 1 );\n\t\tconst offset = viewCount === 1 ? 0 : - halfWidth + stride * i;\n\t\ttarget.offsetDirection.set( 1.0, 0, 0 );\n\t\ttarget.offset = offset;\n\n\t\t// set the projection matrix\n\t\tconst displayHalfHeight = Math.tan( viewFoV * 0.5 ) * displayDistance;\n\t\tconst displayHalfWidth = displayAspect * displayHalfHeight;\n\t\tconst nearScale = near / displayDistance;\n\n\t\ttarget.projectionMatrix.makePerspective(\n\t\t\tnearScale * ( - displayHalfWidth - offset ), nearScale * ( displayHalfWidth - offset ),\n\t\t\tnearScale * displayHalfHeight, nearScale * - displayHalfHeight,\n\t\t\tnear, far,\n\t\t);\n\n\t\t// set the quilt subframe\n\t\tconst x = i % quiltDimensions.x;\n\t\tconst y = Math.floor( i / quiltDimensions.x );\n\n\t\tconst qw = 1 / quiltDimensions.x;\n\t\tconst qh = 1 / quiltDimensions.y;\n\t\ttarget.subframe.set( x * qw, y * qh, qw, qh );\n\n\t\treturn target;\n\n\t}\n\n\tsetFromDisplayView( viewerDistance, displayWidth, displayHeight ) {\n\n\t\tthis.displayAspect = displayWidth / displayHeight;\n\t\tthis.displayDistance = viewerDistance;\n\t\tthis.viewFoV = 2.0 * Math.atan( 0.5 * displayHeight / viewerDistance );\n\n\t}\n\n}\n\nexport class QuiltPathTracingRenderer extends PathTracingRenderer {\n\n\tget samples() {\n\n\t\treturn this._samples / this.viewCount;\n\n\t}\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\t[\n\t\t\t'quiltDimensions',\n\t\t\t'viewCount',\n\t\t\t'viewCone',\n\t\t\t'viewFoV',\n\t\t\t'displayDistance',\n\t\t\t'displayAspect',\n\t\t].forEach( member => {\n\n\t\t\tObject.defineProperty( this, member, {\n\n\t\t\t\tenumerable: true,\n\n\t\t\t\tset: v => {\n\n\t\t\t\t\tthis._quiltUtility[ member ] = v;\n\n\t\t\t\t},\n\n\t\t\t\tget: () => {\n\n\t\t\t\t\treturn this._quiltUtility[ member ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\n\t\tthis._quiltUtility = new QuiltViewUtility();\n\t\tthis._quiltSamples = 0;\n\t\tthis._camera = new PerspectiveCamera();\n\t\tthis._quiltTask = null;\n\n\t}\n\n\tsetFromDisplayView( ...args ) {\n\n\t\tthis._quiltUtility.setFromDisplayView( ...args );\n\n\t}\n\n\tupdate() {\n\n\t\tthis.alpha = false;\n\t\tif ( ! this._quiltTask ) {\n\n\t\t\tthis._quiltTask = _task.call( this, () => {\n\n\t\t\t\tsuper.update();\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis._quiltTask.next();\n\n\t}\n\n\treset() {\n\n\t\tsuper.reset();\n\t\tthis._quiltTask = null;\n\t\tthis._quiltSamples = 0;\n\n\t}\n\n}\n","import { BufferGeometry } from 'three';\nimport { StaticGeometryGenerator, MeshBVH } from 'three-mesh-bvh';\nimport { setCommonAttributes, getGroupMaterialIndicesAttribute } from '../utils/GeometryPreparationUtils.js';\n\nexport class DynamicPathTracingSceneGenerator {\n\n\tget initialized() {\n\n\t\treturn Boolean( this.bvh );\n\n\t}\n\n\tconstructor( scene ) {\n\n\t\tthis.objects = Array.isArray( scene ) ? scene : [ scene ];\n\t\tthis.bvh = null;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.materials = null;\n\t\tthis.textures = null;\n\t\tthis.lights = [];\n\t\tthis.staticGeometryGenerator = new StaticGeometryGenerator( this.objects );\n\n\t}\n\n\treset() {\n\n\t\tthis.bvh = null;\n\t\tthis.geometry.dispose();\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.materials = null;\n\t\tthis.textures = null;\n\t\tthis.lights = [];\n\t\tthis.staticGeometryGenerator = new StaticGeometryGenerator( this.objects );\n\n\t}\n\n\tdispose() {}\n\n\tgenerate() {\n\n\t\tconst { objects, staticGeometryGenerator, geometry } = this;\n\t\tif ( this.bvh === null ) {\n\n\t\t\tconst attributes = [ 'position', 'normal', 'tangent', 'uv', 'color' ];\n\n\t\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tobjects[ i ].traverse( c => {\n\n\t\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\t\tconst normalMapRequired = ! ! c.material.normalMap;\n\t\t\t\t\t\tsetCommonAttributes( c.geometry, { attributes, normalMapRequired } );\n\n\t\t\t\t\t} else if ( c.isRectAreaLight || c.isSpotLight ) {\n\n\t\t\t\t\t\tthis.lights.push( c );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst textureSet = new Set();\n\t\t\tconst materials = staticGeometryGenerator.getMaterials();\n\t\t\tmaterials.forEach( material => {\n\n\t\t\t\tfor ( const key in material ) {\n\n\t\t\t\t\tconst value = material[ key ];\n\t\t\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\t\t\ttextureSet.add( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tstaticGeometryGenerator.attributes = attributes;\n\t\t\tstaticGeometryGenerator.generate( geometry );\n\n\t\t\tconst materialIndexAttribute = getGroupMaterialIndicesAttribute( geometry, materials, materials );\n\t\t\tgeometry.setAttribute( 'materialIndex', materialIndexAttribute );\n\t\t\tgeometry.clearGroups();\n\n\t\t\tthis.bvh = new MeshBVH( geometry );\n\t\t\tthis.materials = materials;\n\t\t\tthis.textures = Array.from( textureSet );\n\n\t\t\treturn {\n\t\t\t\tlights: this.lights,\n\t\t\t\tbvh: this.bvh,\n\t\t\t\tmaterials: this.materials,\n\t\t\t\ttextures: this.textures,\n\t\t\t\tobjects,\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconst { bvh } = this;\n\t\t\tstaticGeometryGenerator.generate( geometry );\n\t\t\tbvh.refit();\n\t\t\treturn {\n\t\t\t\tlights: this.lights,\n\t\t\t\tbvh: this.bvh,\n\t\t\t\tmaterials: this.materials,\n\t\t\t\ttextures: this.textures,\n\t\t\t\tobjects,\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\n}\n","// https://github.com/gkjohnson/webxr-sandbox/blob/main/skinned-mesh-batching/src/MaterialReducer.js\n\nfunction isTypedArray( arr ) {\n\n\treturn arr.buffer instanceof ArrayBuffer && 'BYTES_PER_ELEMENT' in arr;\n\n}\n\nexport class MaterialReducer {\n\n\tconstructor() {\n\n\t\tconst ignoreKeys = new Set();\n\t\tignoreKeys.add( 'uuid' );\n\n\t\tthis.ignoreKeys = ignoreKeys;\n\t\tthis.shareTextures = true;\n\t\tthis.textures = [];\n\t\tthis.materials = [];\n\n\t}\n\n\tareEqual( objectA, objectB ) {\n\n\t\tconst keySet = new Set();\n\t\tconst traverseSet = new Set();\n\t\tconst ignoreKeys = this.ignoreKeys;\n\n\t\tconst traverse = ( a, b ) => {\n\n\t\t\tif ( a === b ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tif ( a && b && a instanceof Object && b instanceof Object ) {\n\n\t\t\t\tif ( traverseSet.has( a ) || traverseSet.has( b ) ) {\n\n\t\t\t\t\tthrow new Error( 'MaterialReducer: Material is recursive.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsElement = a instanceof Element;\n\t\t\t\tconst bIsElement = b instanceof Element;\n\t\t\t\tif ( aIsElement || bIsElement ) {\n\n\t\t\t\t\tif ( aIsElement !== bIsElement || ! ( a instanceof Image ) || ! ( b instanceof Image ) ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn a.src === b.src;\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsImageBitmap = a instanceof ImageBitmap;\n\t\t\t\tconst bIsImageBitmap = b instanceof ImageBitmap;\n\t\t\t\tif ( aIsImageBitmap || bIsImageBitmap ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( a.equals ) {\n\n\t\t\t\t\treturn a.equals( b );\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsTypedArray = isTypedArray( a );\n\t\t\t\tconst bIsTypedArray = isTypedArray( b );\n\t\t\t\tif ( aIsTypedArray || bIsTypedArray ) {\n\n\t\t\t\t\tif ( aIsTypedArray !== bIsTypedArray || a.constructor !== b.constructor || a.length !== b.length ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\ttraverseSet.add( a );\n\t\t\t\ttraverseSet.add( b );\n\n\t\t\t\tkeySet.clear();\n\t\t\t\tfor ( const key in a ) {\n\n\t\t\t\t\tif ( ! a.hasOwnProperty( key ) || a[ key ] instanceof Function || ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkeySet.add( key );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( const key in b ) {\n\n\t\t\t\t\tif ( ! b.hasOwnProperty( key ) || b[ key ] instanceof Function || ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkeySet.add( key );\n\n\t\t\t\t}\n\n\t\t\t\tconst keys = Array.from( keySet.values() );\n\t\t\t\tlet result = true;\n\t\t\t\tfor ( const i in keys ) {\n\n\t\t\t\t\tconst key = keys[ i ];\n\t\t\t\t\tif ( ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult = traverse( a[ key ], b[ key ] );\n\t\t\t\t\tif ( ! result ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttraverseSet.delete( a );\n\t\t\t\ttraverseSet.delete( b );\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t\treturn traverse( objectA, objectB );\n\n\t}\n\n\tprocess( object ) {\n\n\t\tconst { textures, materials } = this;\n\t\tlet replaced = 0;\n\n\t\tconst processMaterial = material => {\n\n\t\t\t// Check if another material matches this one\n\t\t\tlet foundMaterial = null;\n\t\t\tfor ( const i in materials ) {\n\n\t\t\t\tconst otherMaterial = materials[ i ];\n\t\t\t\tif ( this.areEqual( material, otherMaterial ) ) {\n\n\t\t\t\t\tfoundMaterial = otherMaterial;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( foundMaterial ) {\n\n\t\t\t\treplaced ++;\n\t\t\t\treturn foundMaterial;\n\n\t\t\t} else {\n\n\t\t\t\tmaterials.push( material );\n\n\t\t\t\tif ( this.shareTextures ) {\n\n\t\t\t\t\t// See if there's another texture that matches the ones on this material\n\t\t\t\t\tfor ( const key in material ) {\n\n\t\t\t\t\t\tif ( ! material.hasOwnProperty( key ) ) continue;\n\n\t\t\t\t\t\tconst value = material[ key ];\n\t\t\t\t\t\tif ( value && value.isTexture && value.image instanceof Image ) {\n\n\t\t\t\t\t\t\tlet foundTexture = null;\n\t\t\t\t\t\t\tfor ( const i in textures ) {\n\n\t\t\t\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\t\t\t\tif ( this.areEqual( texture, value ) ) {\n\n\t\t\t\t\t\t\t\t\tfoundTexture = texture;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( foundTexture ) {\n\n\t\t\t\t\t\t\t\tmaterial[ key ] = foundTexture;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\ttextures.push( value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn material;\n\n\t\t\t}\n\n\t\t};\n\n\t\tobject.traverse( c => {\n\n\t\t\tif ( c.isMesh && c.material ) {\n\n\t\t\t\tconst material = c.material;\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tmaterial[ i ] = processMaterial( material[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tc.material = processMaterial( material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn { replaced, retained: materials.length };\n\n\t}\n\n}\n","import { PerspectiveCamera } from 'three';\n\nexport class PhysicalCamera extends PerspectiveCamera {\n\n\tset bokehSize( size ) {\n\n\t\tthis.fStop = this.getFocalLength() / size;\n\n\t}\n\n\tget bokehSize() {\n\n\t\treturn this.getFocalLength() / this.fStop;\n\n\t}\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\t\tthis.fStop = 1.4;\n\t\tthis.apertureBlades = 0;\n\t\tthis.apertureRotation = 0;\n\t\tthis.focusDistance = 25;\n\t\tthis.anamorphicRatio = 1;\n\n\t}\n\n}\n","import { Camera } from 'three';\n\nexport class EquirectCamera extends Camera {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isEquirectCamera = true;\n\n\t}\n\n}\n","import { SpotLight } from 'three';\n\nexport class PhysicalSpotLight extends SpotLight {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.iesTexture = null;\n\t\tthis.radius = 0;\n\n\t}\n\n}\n","import { RectAreaLight } from 'three';\n\nexport class ShapedAreaLight extends RectAreaLight {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\t\tthis.isCircular = false;\n\n\t}\n\n}\n","import { Color, Vector3 } from 'three';\nimport { ProceduralEquirectTexture } from './ProceduralEquirectTexture.js';\n\nconst _direction = new Vector3();\nexport class GradientEquirectTexture extends ProceduralEquirectTexture {\n\n\tconstructor( resolution = 512 ) {\n\n\t\tsuper( resolution, resolution );\n\n\t\tthis.topColor = new Color().set( 0xffffff );\n\t\tthis.bottomColor = new Color().set( 0x000000 );\n\t\tthis.exponent = 2;\n\t\tthis.generationCallback = ( polar, uv, coord, color ) => {\n\n\t\t\t_direction.setFromSpherical( polar );\n\n\t\t\tconst t = _direction.y * 0.5 + 0.5;\n\t\t\tcolor.lerpColors( this.bottomColor, this.topColor, t ** this.exponent );\n\n\t\t};\n\n\t}\n\n\tcopy( other ) {\n\n\t\tsuper.copy( other );\n\n\t\tthis.topColor.copy( other.topColor );\n\t\tthis.bottomColor.copy( other.bottomColor );\n\t\treturn this;\n\n\t}\n\n}\n","import {\n\tClampToEdgeWrapping,\n\tColor,\n\tDataTexture,\n\tEquirectangularReflectionMapping,\n\tFloatType,\n\tLinearFilter,\n\tRepeatWrapping,\n\tRGBAFormat,\n\tSpherical,\n\tVector2,\n} from 'three';\n\nconst _uv = new Vector2();\nconst _coord = new Vector2();\nconst _polar = new Spherical();\nconst _color = new Color();\nexport class ProceduralEquirectTexture extends DataTexture {\n\n\tconstructor( width, height ) {\n\n\t\tsuper(\n\t\t\tnew Float32Array( width * height * 4 ),\n\t\t\twidth, height, RGBAFormat, FloatType, EquirectangularReflectionMapping,\n\t\t\tRepeatWrapping, ClampToEdgeWrapping, LinearFilter, LinearFilter,\n\t\t);\n\n\t\tthis.generationCallback = null;\n\n\t}\n\n\tupdate() {\n\n\t\tthis.dispose();\n\t\tthis.needsUpdate = true;\n\n\t\tconst { data, width, height } = this.image;\n\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\t\t_coord.set( width, height );\n\n\t\t\t\t_uv.set( x / width, y / height );\n\t\t\t\t_uv.x -= 0.5;\n\t\t\t\t_uv.y = 1.0 - _uv.y;\n\n\t\t\t\t_polar.theta = _uv.x * 2.0 * Math.PI;\n\t\t\t\t_polar.phi = _uv.y * Math.PI;\n\t\t\t\t_polar.radius = 1.0;\n\n\t\t\t\tthis.generationCallback( _polar, _uv, _coord, _color );\n\n\t\t\t\tconst i = y * width + x;\n\t\t\t\tconst i4 = 4 * i;\n\t\t\t\tdata[ i4 + 0 ] = _color.r;\n\t\t\t\tdata[ i4 + 1 ] = _color.g;\n\t\t\t\tdata[ i4 + 2 ] = _color.b;\n\t\t\t\tdata[ i4 + 3 ] = 1.0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( other ) {\n\n\t\tsuper.copy( other );\n\t\tthis.generationCallback = other.generationCallback;\n\t\treturn this;\n\n\t}\n\n}\n","import { WebGLRenderTarget, RGBAFormat, FloatType, PMREMGenerator, DataTexture, EquirectangularReflectionMapping } from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { MaterialBase } from '../materials/MaterialBase.js';\nimport { utilsGLSL } from '../shader/common/utils.glsl.js';\n\nclass PMREMCopyMaterial extends MaterialBase {\n\n\tconstructor() {\n\n\t\tsuper( {\n\n\t\t\tuniforms: {\n\n\t\t\t\tenvMap: { value: null },\n\t\t\t\tblur: { value: 0 },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\t\t${ utilsGLSL }\n\n\t\t\t\tuniform sampler2D envMap;\n\t\t\t\tuniform float blur;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 rayDirection = equirectUvToDirection( vUv );\n\t\t\t\t\tgl_FragColor = textureCubeUV( envMap, rayDirection, blur );\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t} );\n\n\t}\n\n}\n\nexport class BlurredEnvMapGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.pmremGenerator = new PMREMGenerator( renderer );\n\t\tthis.copyQuad = new FullScreenQuad( new PMREMCopyMaterial() );\n\t\tthis.renderTarget = new WebGLRenderTarget( 1, 1, { type: FloatType, format: RGBAFormat } );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.pmremGenerator.dispose();\n\t\tthis.copyQuad.dispose();\n\t\tthis.renderTarget.dispose();\n\n\t}\n\n\tgenerate( texture, blur ) {\n\n\t\tconst { pmremGenerator, renderTarget, copyQuad, renderer } = this;\n\n\t\t// get the pmrem target\n\t\tconst pmremTarget = pmremGenerator.fromEquirectangular( texture );\n\n\t\t// set up the material\n\t\tconst { width, height } = texture.image;\n\t\trenderTarget.setSize( width, height );\n\t\tcopyQuad.material.envMap = pmremTarget.texture;\n\t\tcopyQuad.material.blur = blur;\n\n\t\t// render\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\n\t\tconst prevClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = true;\n\t\tcopyQuad.render( renderer );\n\n\t\trenderer.setRenderTarget( prevRenderTarget );\n\t\trenderer.autoClear = prevClear;\n\n\t\t// read the data back\n\t\tconst buffer = new Float32Array( width * height * 4 );\n\t\trenderer.readRenderTargetPixels( renderTarget, 0, 0, width, height, buffer );\n\n\t\tconst result = new DataTexture( buffer, width, height, RGBAFormat, FloatType );\n\t\tresult.minFilter = texture.minFilter;\n\t\tresult.magFilter = texture.magFilter;\n\t\tresult.wrapS = texture.wrapS;\n\t\tresult.wrapT = texture.wrapT;\n\t\tresult.mapping = EquirectangularReflectionMapping;\n\t\tresult.needsUpdate = true;\n\n\t\t// dispose of the now unneeded target\n\t\tpmremTarget.dispose();\n\n\t\treturn result;\n\n\t}\n\n}\n","export const utilsGLSL = /* glsl */`\n\n\t// TODO: possibly this should be renamed something related to material or path tracing logic\n\n\t#ifndef RAY_OFFSET\n\t#define RAY_OFFSET 1e-4\n\t#endif\n\n\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t// maximum component-wise value of the current point to accommodate floating point\n\t// error as values increase.\n\tvec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {\n\n\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\tvec3 absPoint = abs( point );\n\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\treturn point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\n\t}\n\n\t// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation\n\tvec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {\n\n\t\tvec3 ot = - log( attColor ) / attDist;\n\t\treturn exp( - ot * dist );\n\n\t}\n\n\tvec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {\n\n\t\t// get the half vector - assuming if the light incident vector is on the other side\n\t\t// of the that it's transmissive.\n\t\tvec3 h;\n\t\tif ( wi.z > 0.0 ) {\n\n\t\t\th = normalize( wi + wo );\n\n\t\t} else {\n\n\t\t\t// Scale by the ior ratio to retrieve the appropriate half vector\n\t\t\t// From Section 2.2 on computing the transmission half vector:\n\t\t\t// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf\n\t\t\th = normalize( wi + wo * eta );\n\n\t\t}\n\n\t\th *= sign( h.z );\n\t\treturn h;\n\n\t}\n\n\tvec3 getHalfVector( vec3 a, vec3 b ) {\n\n\t\treturn normalize( a + b );\n\n\t}\n\n\t// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray\n\t// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If\n\t// we find a ray like that we ignore it to avoid artifacts.\n\t// This function returns if the direction is on the same side of both planes.\n\tbool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {\n\n\t\tbool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;\n\t\tbool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;\n\t\treturn aboveSurfaceNormal == aboveGeometryNormal;\n\n\t}\n\n\t// ray sampling x and z are swapped to align with expected background view\n\tvec2 equirectDirectionToUv( vec3 direction ) {\n\n\t\t// from Spherical.setFromCartesianCoords\n\t\tvec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );\n\t\tuv /= vec2( 2.0 * PI, PI );\n\n\t\t// apply adjustments to get values in range [0, 1] and y right side up\n\t\tuv.x += 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\t\treturn uv;\n\n\t}\n\n\tvec3 equirectUvToDirection( vec2 uv ) {\n\n\t\t// undo above adjustments\n\t\tuv.x -= 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\n\t\t// from Vector3.setFromSphericalCoords\n\t\tfloat theta = uv.x * 2.0 * PI;\n\t\tfloat phi = uv.y * PI;\n\n\t\tfloat sinPhi = sin( phi );\n\n\t\treturn vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );\n\n\t}\n\n\t// power heuristic for multiple importance sampling\n\tfloat misHeuristic( float a, float b ) {\n\n\t\tfloat aa = a * a;\n\t\tfloat bb = b * b;\n\t\treturn aa / ( aa + bb );\n\n\t}\n\n\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t// erichlof/THREE.js-PathTracing-Renderer/\n\tfloat tentFilter( float x ) {\n\n\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t}\n`;\n","import {\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tLinearFilter,\n\tRedFormat,\n\tMathUtils,\n\tLoader,\n} from 'three';\n\nfunction IESLamp( text ) {\n\n\tconst _self = this;\n\n\tconst textArray = text.split( '\\n' );\n\n\tlet lineNumber = 0;\n\tlet line;\n\n\t_self.verAngles = [ ];\n\t_self.horAngles = [ ];\n\n\t_self.candelaValues = [ ];\n\n\t_self.tiltData = { };\n\t_self.tiltData.angles = [ ];\n\t_self.tiltData.mulFactors = [ ];\n\n\tfunction textToArray( text ) {\n\n\t\ttext = text.trim(); // remove leading or trailing spaces\n\t\ttext = text.replace( /,/g, ' ' ); // replace commas with spaces\n\t\ttext = text.replace( /\\s\\s+/g, ' ' ); // replace white space/tabs etc by single whitespace\n\n\t\tconst array = text.split( ' ' );\n\n\t\treturn array;\n\n\t}\n\n\tfunction readArray( count, array ) {\n\n\t\twhile ( true ) {\n\n\t\t\tconst line = textArray[ lineNumber ++ ];\n\t\t\tconst lineData = textToArray( line );\n\n\t\t\tfor ( let i = 0; i < lineData.length; ++ i ) {\n\n\t\t\t\tarray.push( Number( lineData[ i ] ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length === count )\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction readTilt() {\n\n\t\tlet line = textArray[ lineNumber ++ ];\n\t\tlet lineData = textToArray( line );\n\n\t\t_self.tiltData.lampToLumGeometry = Number( lineData[ 0 ] );\n\n\t\tline = textArray[ lineNumber ++ ];\n\t\tlineData = textToArray( line );\n\n\t\t_self.tiltData.numAngles = Number( lineData[ 0 ] );\n\n\t\treadArray( _self.tiltData.numAngles, _self.tiltData.angles );\n\t\treadArray( _self.tiltData.numAngles, _self.tiltData.mulFactors );\n\n\t}\n\n\tfunction readLampValues() {\n\n\t\tconst values = [ ];\n\t\treadArray( 10, values );\n\n\t\t_self.count = Number( values[ 0 ] );\n\t\t_self.lumens = Number( values[ 1 ] );\n\t\t_self.multiplier = Number( values[ 2 ] );\n\t\t_self.numVerAngles = Number( values[ 3 ] );\n\t\t_self.numHorAngles = Number( values[ 4 ] );\n\t\t_self.gonioType = Number( values[ 5 ] );\n\t\t_self.units = Number( values[ 6 ] );\n\t\t_self.width = Number( values[ 7 ] );\n\t\t_self.length = Number( values[ 8 ] );\n\t\t_self.height = Number( values[ 9 ] );\n\n\t}\n\n\tfunction readLampFactors() {\n\n\t\tconst values = [ ];\n\t\treadArray( 3, values );\n\n\t\t_self.ballFactor = Number( values[ 0 ] );\n\t\t_self.blpFactor = Number( values[ 1 ] );\n\t\t_self.inputWatts = Number( values[ 2 ] );\n\n\t}\n\n\twhile ( true ) {\n\n\t\tline = textArray[ lineNumber ++ ];\n\n\t\tif ( line.includes( 'TILT' ) ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tif ( ! line.includes( 'NONE' ) ) {\n\n\t\tif ( line.includes( 'INCLUDE' ) ) {\n\n\t\t\treadTilt();\n\n\t\t} else {\n\n\t\t\t// TODO:: Read tilt data from a file\n\n\t\t}\n\n\t}\n\n\treadLampValues();\n\n\treadLampFactors();\n\n\t// Initialize candela value array\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\t_self.candelaValues.push( [ ] );\n\n\t}\n\n\t// Parse Angles\n\treadArray( _self.numVerAngles, _self.verAngles );\n\treadArray( _self.numHorAngles, _self.horAngles );\n\n\t// Parse Candela values\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\treadArray( _self.numVerAngles, _self.candelaValues[ i ] );\n\n\t}\n\n\t// Calculate actual candela values, and normalize.\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\t_self.candelaValues[ i ][ j ] *= _self.candelaValues[ i ][ j ] * _self.multiplier\n\t\t\t\t* _self.ballFactor * _self.blpFactor;\n\n\t\t}\n\n\t}\n\n\tlet maxVal = - 1;\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\tconst value = _self.candelaValues[ i ][ j ];\n\t\t\tmaxVal = maxVal < value ? value : maxVal;\n\n\t\t}\n\n\t}\n\n\tconst bNormalize = true;\n\tif ( bNormalize && maxVal > 0 ) {\n\n\t\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\t\t_self.candelaValues[ i ][ j ] /= maxVal;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport class IESLoader extends Loader {\n\n\t_getIESValues( iesLamp ) {\n\n\t\tconst width = 360;\n\t\tconst height = 180;\n\t\tconst size = width * height;\n\n\t\tconst data = new Float32Array( size );\n\n\t\tfunction interpolateCandelaValues( phi, theta ) {\n\n\t\t\tlet phiIndex = 0, thetaIndex = 0;\n\t\t\tlet startTheta = 0, endTheta = 0, startPhi = 0, endPhi = 0;\n\n\t\t\tfor ( let i = 0; i < iesLamp.numHorAngles - 1; ++ i ) { // numHorAngles = horAngles.length-1 because of extra padding, so this wont cause an out of bounds error\n\n\t\t\t\tif ( theta < iesLamp.horAngles[ i + 1 ] || i == iesLamp.numHorAngles - 2 ) {\n\n\t\t\t\t\tthetaIndex = i;\n\t\t\t\t\tstartTheta = iesLamp.horAngles[ i ];\n\t\t\t\t\tendTheta = iesLamp.horAngles[ i + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < iesLamp.numVerAngles - 1; ++ i ) {\n\n\t\t\t\tif ( phi < iesLamp.verAngles[ i + 1 ] || i == iesLamp.numVerAngles - 2 ) {\n\n\t\t\t\t\tphiIndex = i;\n\t\t\t\t\tstartPhi = iesLamp.verAngles[ i ];\n\t\t\t\t\tendPhi = iesLamp.verAngles[ i + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst deltaTheta = endTheta - startTheta;\n\t\t\tconst deltaPhi = endPhi - startPhi;\n\n\t\t\tif ( deltaPhi === 0 ) // Outside range\n\t\t\t\treturn 0;\n\n\t\t\tconst t1 = deltaTheta === 0 ? 0 : ( theta - startTheta ) / deltaTheta;\n\t\t\tconst t2 = ( phi - startPhi ) / deltaPhi;\n\n\t\t\tconst nextThetaIndex = deltaTheta === 0 ? thetaIndex : thetaIndex + 1;\n\n\t\t\tconst v1 = MathUtils.lerp( iesLamp.candelaValues[ thetaIndex ][ phiIndex ], iesLamp.candelaValues[ nextThetaIndex ][ phiIndex ], t1 );\n\t\t\tconst v2 = MathUtils.lerp( iesLamp.candelaValues[ thetaIndex ][ phiIndex + 1 ], iesLamp.candelaValues[ nextThetaIndex ][ phiIndex + 1 ], t1 );\n\t\t\tconst v = MathUtils.lerp( v1, v2, t2 );\n\n\t\t\treturn v;\n\n\t\t}\n\n\t\tconst startTheta = iesLamp.horAngles[ 0 ], endTheta = iesLamp.horAngles[ iesLamp.numHorAngles - 1 ];\n\t\tfor ( let i = 0; i < size; ++ i ) {\n\n\t\t\tlet theta = i % width;\n\t\t\tconst phi = Math.floor( i / width );\n\n\t\t\tif ( endTheta - startTheta !== 0 && ( theta < startTheta || theta >= endTheta ) ) { // Handle symmetry for hor angles\n\n\t\t\t\ttheta %= endTheta * 2;\n\t\t\t\tif ( theta > endTheta )\n\t\t\t\t\ttheta = endTheta * 2 - theta;\n\n\t\t\t}\n\n\t\t\tdata[ i ] = interpolateCandelaValues( phi, theta );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'text' );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\n\t\tconst texture = new DataTexture( null, 360, 180, RedFormat, FloatType );\n\t\ttexture.minFilter = LinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\n\t\tloader.load( url, text => {\n\n\t\t\tconst iesLamp = new IESLamp( text );\n\n\t\t\ttexture.image.data = this._getIESValues( iesLamp );\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n\tparse( text ) {\n\n\t\tconst iesLamp = new IESLamp( text );\n\t\tconst texture = new DataTexture( null, 360, 180, RedFormat, FloatType );\n\t\ttexture.minFilter = LinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.image.data = this._getIESValues( iesLamp );\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\n}\n","import { NoBlending } from 'three';\nimport { MaterialBase } from '../MaterialBase.js';\n\nexport class DenoiseMaterial extends MaterialBase {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\ttransparent: false,\n\n\t\t\tdepthWrite: false,\n\n\t\t\tdepthTest: false,\n\n\t\t\tdefines: {\n\n\t\t\t\tUSE_SLIDER: 0,\n\n\t\t\t},\n\n\t\t\tuniforms: {\n\n\t\t\t\tsigma: { value: 5.0 },\n\t\t\t\tthreshold: { value: 0.03 },\n\t\t\t\tkSigma: { value: 1.0 },\n\n\t\t\t\tmap: { value: null },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t//  Copyright (c) 2018-2019 Michele Morrone\n\t\t\t\t//  All rights reserved.\n\t\t\t\t//\n\t\t\t\t//  https://michelemorrone.eu - https://BrutPitt.com\n\t\t\t\t//\n\t\t\t\t//  me@michelemorrone.eu - brutpitt@gmail.com\n\t\t\t\t//  twitter: @BrutPitt - github: BrutPitt\n\t\t\t\t//\n\t\t\t\t//  https://github.com/BrutPitt/glslSmartDeNoise/\n\t\t\t\t//\n\t\t\t\t//  This software is distributed under the terms of the BSD 2-Clause license\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tuniform float sigma;\n\t\t\t\tuniform float threshold;\n\t\t\t\tuniform float kSigma;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439\n\t\t\t\t#define INV_PI 0.31830988618379067153776752674503\n\n\t\t\t\t// Parameters:\n\t\t\t\t//\t sampler2D tex\t - sampler image / texture\n\t\t\t\t//\t vec2 uv\t\t   - actual fragment coord\n\t\t\t\t//\t float sigma  >  0 - sigma Standard Deviation\n\t\t\t\t//\t float kSigma >= 0 - sigma coefficient\n\t\t\t\t//\t\t kSigma * sigma  -->  radius of the circular kernel\n\t\t\t\t//\t float threshold   - edge sharpening threshold\n\t\t\t\tvec4 smartDeNoise( sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold ) {\n\n\t\t\t\t\tfloat radius = round( kSigma * sigma );\n\t\t\t\t\tfloat radQ = radius * radius;\n\n\t\t\t\t\tfloat invSigmaQx2 = 0.5 / ( sigma * sigma );\n\t\t\t\t\tfloat invSigmaQx2PI = INV_PI * invSigmaQx2;\n\n\t\t\t\t\tfloat invThresholdSqx2 = 0.5 / ( threshold * threshold );\n\t\t\t\t\tfloat invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;\n\n\t\t\t\t\tvec4 centrPx = texture2D( tex, uv );\n\t\t\t\t\tcentrPx.rgb *= centrPx.a;\n\n\t\t\t\t\tfloat zBuff = 0.0;\n\t\t\t\t\tvec4 aBuff = vec4( 0.0 );\n\t\t\t\t\tvec2 size = vec2( textureSize( tex, 0 ) );\n\n\t\t\t\t\tvec2 d;\n\t\t\t\t\tfor ( d.x = - radius; d.x <= radius; d.x ++ ) {\n\n\t\t\t\t\t\tfloat pt = sqrt( radQ - d.x * d.x );\n\n\t\t\t\t\t\tfor ( d.y = - pt; d.y <= pt; d.y ++ ) {\n\n\t\t\t\t\t\t\tfloat blurFactor = exp( - dot( d, d ) * invSigmaQx2 ) * invSigmaQx2PI;\n\n\t\t\t\t\t\t\tvec4 walkPx = texture2D( tex, uv + d / size );\n\t\t\t\t\t\t\twalkPx.rgb *= walkPx.a;\n\n\t\t\t\t\t\t\tvec4 dC = walkPx - centrPx;\n\t\t\t\t\t\t\tfloat deltaFactor = exp( - dot( dC.rgba, dC.rgba ) * invThresholdSqx2 ) * invThresholdSqrt2PI * blurFactor;\n\n\t\t\t\t\t\t\tzBuff += deltaFactor;\n\t\t\t\t\t\t\taBuff += deltaFactor * walkPx;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn aBuff / zBuff;\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = smartDeNoise( map, vec2( vUv.x, vUv.y ), sigma, kSigma, threshold );\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <encodings_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\n\t\t\t`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n","import { NoBlending, Color, Vector2, Vector4 } from 'three';\nimport { MaterialBase } from '../MaterialBase.js';\n\nexport class GraphMaterial extends MaterialBase {\n\n\tget graphFunctionSnippet() {\n\n\t\treturn this._graphFunctionSnippet;\n\n\t}\n\n\tset graphFunctionSnippet( v ) {\n\n\t\tthis._graphFunctionSnippet = v;\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\ttransparent: false,\n\n\t\t\tdepthWrite: false,\n\n\t\t\tdepthTest: false,\n\n\t\t\tdefines: {\n\n\t\t\t\tUSE_SLIDER: 0,\n\n\t\t\t},\n\n\t\t\tuniforms: {\n\n\t\t\t\tdim: { value: true },\n\t\t\t\tthickness: { value: 1 },\n\t\t\t\tgraphCount: { value: 4 },\n\t\t\t\tgraphDisplay: { value: new Vector4( 1.0, 1.0, 1.0, 1.0 ) },\n\t\t\t\toverlay: { value: true },\n\t\t\t\txRange: { value: new Vector2( - 2.0, 2.0 ) },\n\t\t\t\tyRange: { value: new Vector2( - 2.0, 2.0 ) },\n\t\t\t\tcolors: { value: [\n\t\t\t\t\tnew Color( 0xe91e63 ).convertSRGBToLinear(),\n\t\t\t\t\tnew Color( 0x4caf50 ).convertSRGBToLinear(),\n\t\t\t\t\tnew Color( 0x03a9f4 ).convertSRGBToLinear(),\n\t\t\t\t\tnew Color( 0xffc107 ).convertSRGBToLinear(),\n\t\t\t\t] },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform bool overlay;\n\t\t\t\tuniform bool dim;\n\t\t\t\tuniform bvec4 graphDisplay;\n\t\t\t\tuniform float graphCount;\n\t\t\t\tuniform float thickness;\n\t\t\t\tuniform vec2 xRange;\n\t\t\t\tuniform vec2 yRange;\n\t\t\t\tuniform vec3 colors[ 4 ];\n\n\t\t\t\t__FUNCTION_CONTENT__\n\n\t\t\t\tfloat map( float _min, float _max, float v ) {\n\n\t\t\t\t\tfloat len = _max - _min;\n\t\t\t\t\treturn _min + len * v;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getBackground( vec2 point, float steepness ) {\n\n\t\t\t\t\tvec2 pw = fwidth( point );\n\t\t\t\t\tvec2 halfWidth = pw * 0.5;\n\n\t\t\t\t\t// x, y axes\n\t\t\t\t\tvec2 distToZero = smoothstep(\n\t\t\t\t\t\t- halfWidth * 0.5,\n\t\t\t\t\t\thalfWidth * 0.5,\n\t\t\t\t\t\tabs( point.xy ) - pw\n\t\t\t\t\t);\n\n\t\t\t\t\t// 1 unit markers\n\t\t\t\t\tvec2 temp;\n\t\t\t\t\tvec2 modAxis = abs( modf( point + vec2( 0.5 ), temp ) ) - 0.5;\n\t\t\t\t\tvec2 distToAxis = smoothstep(\n\t\t\t\t\t\t- halfWidth,\n\t\t\t\t\t\thalfWidth,\n\t\t\t\t\t\tabs( modAxis.xy ) - pw * 0.5\n\t\t\t\t\t);\n\n\t\t\t\t\t// if we're at a chart boundary then remove the artifacts\n\t\t\t\t\tif ( abs( pw.y ) > steepness * 0.5 ) {\n\n\t\t\t\t\t\tdistToZero.y = 1.0;\n\t\t\t\t\t\tdistToAxis.y = 1.0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// mix colors into a background color\n\t\t\t\t\tfloat axisIntensity = 1.0 - min( distToZero.x, distToZero.y );\n\t\t\t\t\tfloat markerIntensity = 1.0 - min( distToAxis.x, distToAxis.y );\n\n\t\t\t\t\tvec3 markerColor = mix( vec3( 0.005 ), vec3( 0.05 ), markerIntensity );\n\t\t\t\t\tvec3 backgroundColor = mix( markerColor, vec3( 0.2 ), axisIntensity );\n\t\t\t\t\treturn backgroundColor;\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t// from uniforms\n\t\t\t\t\tfloat sectionCount = overlay ? 1.0 : graphCount;\n\t\t\t\t\tfloat yWidth = abs( yRange.y - yRange.x );\n\n\t\t\t\t\t// separate into sections\n\t\t\t\t\tfloat _section;\n\t\t\t\t\tfloat sectionY = modf( sectionCount * vUv.y, _section );\n\t\t\t\t\tint section = int( sectionCount - _section - 1.0 );\n\n\t\t\t\t\t// get the current point\n\t\t\t\t\tvec2 point = vec2(\n\t\t\t\t\t\tmap( xRange.x, xRange.y, vUv.x ),\n\t\t\t\t\t\tmap( yRange.x, yRange.y, sectionY )\n\t\t\t\t\t);\n\n\t\t\t\t\t// get the results\n\t\t\t\t\tvec4 result = graphFunction( point.x );\n\t\t\t\t\tvec4 delta = result - vec4( point.y );\n\t\t\t\t\tvec4 halfDdf = fwidth( delta ) * 0.5;\n\t\t\t\t\tif ( fwidth( point.y ) > yWidth * 0.5 ) {\n\n\t\t\t\t\t\thalfDdf = vec4( 0.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// graph display intensity\n\t\t\t\t\tvec4 graph = smoothstep( - halfDdf, halfDdf, abs( delta ) - thickness * halfDdf );\n\n\t\t\t\t\t// initialize the background\n\t\t\t\t\tgl_FragColor.rgb = getBackground( point, yWidth );\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\tif ( dim && ( point.x < 0.0 || point.y < 0.0 ) ) {\n\n\t\t\t\t\t\tgraph = mix(\n\t\t\t\t\t\t\tvec4( 1.0 ),\n\t\t\t\t\t\t\tgraph,\n\t\t\t\t\t\t\t0.05\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// color the charts\n\t\t\t\t\tif ( sectionCount > 1.0 ) {\n\n\t\t\t\t\t\tif ( graphDisplay[ section ] ) {\n\n\t\t\t\t\t\t\tgl_FragColor.rgb = mix(\n\t\t\t\t\t\t\t\tcolors[ section ],\n\t\t\t\t\t\t\t\tgl_FragColor.rgb,\n\t\t\t\t\t\t\t\tgraph[ section ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( int i = 0; i < int( graphCount ); i ++ ) {\n\n\t\t\t\t\t\t\tif ( graphDisplay[ i ] ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb = mix(\n\t\t\t\t\t\t\t\t\tcolors[ i ],\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb,\n\t\t\t\t\t\t\t\t\tgraph[ i ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t#include <encodings_fragment>\n\n\t\t\t\t}\n\n\t\t\t`\n\n\t\t} );\n\n\n\t\tthis._graphFunctionSnippet = /* glsl */`\n\t\t\tvec4 graphFunctionSnippet( float x ) {\n\n\t\t\t\treturn vec4(\n\t\t\t\t\tsin( x * 3.1415926535 ),\n\t\t\t\t\tcos( x ),\n\t\t\t\t\t0.0,\n\t\t\t\t\t0.0\n\t\t\t\t);\n\n\t\t\t}\n\t\t`;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tonBeforeCompile( shader ) {\n\n\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t'__FUNCTION_CONTENT__',\n\t\t\tthis._graphFunctionSnippet,\n\t\t);\n\t\treturn shader;\n\n\t}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this._graphFunctionSnippet;\n\n\t}\n\n}\n","import { Matrix4, Vector2 } from 'three';\nimport { MaterialBase } from '../MaterialBase.js';\nimport {\n\tMeshBVHUniformStruct, UIntVertexAttributeTexture,\n\tshaderStructs, shaderIntersectFunction,\n} from 'three-mesh-bvh';\n\n// uniforms\nimport { PhysicalCameraUniform } from '../../uniforms/PhysicalCameraUniform.js';\nimport { EquirectHdrInfoUniform } from '../../uniforms/EquirectHdrInfoUniform.js';\nimport { LightsInfoUniformStruct } from '../../uniforms/LightsInfoUniformStruct.js';\nimport { IESProfilesTexture } from '../../uniforms/IESProfilesTexture.js';\nimport { AttributesTextureArray } from '../../uniforms/AttributesTextureArray.js';\nimport { MaterialsTexture } from '../../uniforms/MaterialsTexture.js';\nimport { RenderTarget2DArray } from '../../uniforms/RenderTarget2DArray.js';\n\n// glsl\nimport { cameraStructGLSL } from '../../shader/structs/cameraStruct.glsl.js';\nimport { equirectStructGLSL } from '../../shader/structs/equirectStruct.glsl.js';\nimport { lightsStructGLSL } from '../../shader/structs/lightsStruct.glsl.js';\nimport { materialStructGLSL } from '../../shader/structs/materialStruct.glsl.js';\nimport { fogMaterialBvhGLSL } from '../../shader/structs/fogMaterialBvh.glsl.js';\n\n// material sampling\nimport { bsdfSamplingGLSL } from '../../shader/bsdf/bsdfSampling.glsl.js';\nimport { fogGLSL } from '../../shader/bsdf/fog.glsl.js';\n\n// sampling\nimport { equirectSamplingGLSL } from '../../shader/sampling/equirectSampling.glsl.js';\nimport { lightSamplingGLSL } from '../../shader/sampling/lightSampling.glsl.js';\nimport { shapeSamplingGLSL } from '../../shader/sampling/shapeSampling.glsl.js';\n\n// common glsl\nimport { intersectShapesGLSL } from '../../shader/common/intersectShapes.glsl';\nimport { mathGLSL } from '../../shader/common/math.glsl.js';\nimport { utilsGLSL } from '../../shader/common/utils.glsl.js';\nimport { fresnelGLSL } from '../../shader/common/fresnel.glsl.js';\nimport { arraySamplerTexelFetchGLSL } from '../../shader/common/arraySamplerTexelFetch.glsl.js';\n\n// random glsl\nimport { pcgGLSL } from '../../shader/rand/pcg.glsl.js';\nimport { sobolCommonGLSL, sobolSamplingGLSL } from '../../shader/rand/sobol.glsl.js';\n\n// path tracer utils\nimport { cameraUtilsGLSL } from './glsl/cameraUtils.glsl.js';\nimport { attenuateHitGLSL } from './glsl/attenuateHit.glsl.js';\nimport { traceSceneGLSL } from './glsl/traceScene.glsl.js';\nimport { getSurfaceRecordGLSL } from './glsl/getSurfaceRecord.glsl.js';\n\nexport class PhysicalPathTracingMaterial extends MaterialBase {\n\n\tonBeforeRender() {\n\n\t\tthis.setDefine( 'FEATURE_DOF', this.physicalCamera.bokehSize === 0 ? 0 : 1 );\n\t\tthis.setDefine( 'FEATURE_BACKGROUND_MAP', this.backgroundMap ? 1 : 0 );\n\t\tthis.setDefine( 'FEATURE_FOG', this.materials.features.isUsed( 'FOG' ) ? 1 : 0 );\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\ttransparent: true,\n\t\t\tdepthWrite: false,\n\n\t\t\tdefines: {\n\t\t\t\tFEATURE_MIS: 1,\n\t\t\t\tFEATURE_RUSSIAN_ROULETTE: 1,\n\t\t\t\tFEATURE_DOF: 1,\n\t\t\t\tFEATURE_BACKGROUND_MAP: 0,\n\t\t\t\tFEATURE_FOG: 1,\n\t\t\t\t// 0 = Perspective\n\t\t\t\t// 1 = Orthographic\n\t\t\t\t// 2 = Equirectangular\n\t\t\t\tCAMERA_TYPE: 0,\n\n\t\t\t\tATTR_NORMAL: 0,\n\t\t\t\tATTR_TANGENT: 1,\n\t\t\t\tATTR_UV: 2,\n\t\t\t\tATTR_COLOR: 3,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tresolution: { value: new Vector2() },\n\n\t\t\t\tbounces: { value: 10 },\n\t\t\t\ttransmissiveBounces: { value: 10 },\n\t\t\t\tphysicalCamera: { value: new PhysicalCameraUniform() },\n\n\t\t\t\tbvh: { value: new MeshBVHUniformStruct() },\n\t\t\t\tattributesArray: { value: new AttributesTextureArray() },\n\t\t\t\tmaterialIndexAttribute: { value: new UIntVertexAttributeTexture() },\n\t\t\t\tmaterials: { value: new MaterialsTexture() },\n\t\t\t\ttextures: { value: new RenderTarget2DArray().texture },\n\t\t\t\tlights: { value: new LightsInfoUniformStruct() },\n\t\t\t\tiesProfiles: { value: new IESProfilesTexture().texture },\n\t\t\t\tcameraWorldMatrix: { value: new Matrix4() },\n\t\t\t\tinvProjectionMatrix: { value: new Matrix4() },\n\t\t\t\tbackgroundBlur: { value: 0.0 },\n\t\t\t\tenvironmentIntensity: { value: 1.0 },\n\t\t\t\tenvironmentRotation: { value: new Matrix4() },\n\t\t\t\tenvMapInfo: { value: new EquirectHdrInfoUniform() },\n\t\t\t\tbackgroundMap: { value: null },\n\n\t\t\t\tseed: { value: 0 },\n\t\t\t\topacity: { value: 1 },\n\t\t\t\tfilterGlossyFactor: { value: 0.0 },\n\n\t\t\t\tbackgroundAlpha: { value: 1.0 },\n\t\t\t\tsobolTexture: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 mvPosition = vec4( position, 1.0 );\n\t\t\t\t\tmvPosition = modelViewMatrix * mvPosition;\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t\tvUv = uv;\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\t#define RAY_OFFSET 1e-4\n\t\t\t\t#define INFINITY 1e20\n\n\t\t\t\tprecision highp isampler2D;\n\t\t\t\tprecision highp usampler2D;\n\t\t\t\tprecision highp sampler2DArray;\n\t\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\t\t\t\t#include <common>\n\n\t\t\t\t// bvh intersection\n\t\t\t\t${ shaderStructs }\n\t\t\t\t${ shaderIntersectFunction }\n\n\t\t\t\t// random\n\t\t\t\t${ pcgGLSL }\n\t\t\t\t${ sobolCommonGLSL }\n\t\t\t\t${ sobolSamplingGLSL }\n\n\t\t\t\t// common\n\t\t\t\t${ arraySamplerTexelFetchGLSL }\n\t\t\t\t${ fresnelGLSL }\n\t\t\t\t${ utilsGLSL }\n\t\t\t\t${ mathGLSL }\n\t\t\t\t${ intersectShapesGLSL }\n\n\t\t\t\t// uniform structs\n\t\t\t\t${ cameraStructGLSL }\n\t\t\t\t${ lightsStructGLSL }\n\t\t\t\t${ equirectStructGLSL }\n\t\t\t\t${ materialStructGLSL }\n\t\t\t\t${ fogMaterialBvhGLSL }\n\n\t\t\t\t// sampling\n\t\t\t\t${ shapeSamplingGLSL }\n\t\t\t\t${ bsdfSamplingGLSL }\n\t\t\t\t${ equirectSamplingGLSL }\n\t\t\t\t${ lightSamplingGLSL }\n\t\t\t\t${ fogGLSL }\n\n\t\t\t\t// environment\n\t\t\t\tuniform EquirectHdrInfo envMapInfo;\n\t\t\t\tuniform mat4 environmentRotation;\n\t\t\t\tuniform float environmentIntensity;\n\n\t\t\t\t// lighting\n\t\t\t\tuniform sampler2DArray iesProfiles;\n\t\t\t\tuniform LightsInfo lights;\n\n\t\t\t\t// background\n\t\t\t\tuniform float backgroundBlur;\n\t\t\t\tuniform float backgroundAlpha;\n\t\t\t\t#if FEATURE_BACKGROUND_MAP\n\n\t\t\t\tuniform sampler2D backgroundMap;\n\n\t\t\t\t#endif\n\n\t\t\t\t// camera\n\t\t\t\tuniform mat4 cameraWorldMatrix;\n\t\t\t\tuniform mat4 invProjectionMatrix;\n\t\t\t\t#if FEATURE_DOF\n\n\t\t\t\tuniform PhysicalCamera physicalCamera;\n\n\t\t\t\t#endif\n\n\t\t\t\t// geometry\n\t\t\t\tuniform sampler2DArray attributesArray;\n\t\t\t\tuniform usampler2D materialIndexAttribute;\n\t\t\t\tuniform sampler2D materials;\n\t\t\t\tuniform sampler2DArray textures;\n\t\t\t\tuniform BVH bvh;\n\n\t\t\t\t// path tracer\n\t\t\t\tuniform int bounces;\n\t\t\t\tuniform int transmissiveBounces;\n\t\t\t\tuniform float filterGlossyFactor;\n\t\t\t\tuniform int seed;\n\n\t\t\t\t// image\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tuniform float opacity;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t${ cameraUtilsGLSL }\n\t\t\t\t${ traceSceneGLSL }\n\t\t\t\t${ attenuateHitGLSL }\n\n\t\t\t\tfloat applyFilteredGlossy( float roughness, float accumulatedRoughness ) {\n\n\t\t\t\t\treturn clamp(\n\t\t\t\t\t\tmax(\n\t\t\t\t\t\t\troughness,\n\t\t\t\t\t\t\taccumulatedRoughness * filterGlossyFactor * 5.0 ),\n\t\t\t\t\t\t0.0,\n\t\t\t\t\t\t1.0\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tvec3 sampleBackground( vec3 direction, vec2 uv ) {\n\n\t\t\t\t\tvec3 sampleDir = normalize( direction + sampleHemisphere( direction, uv ) * 0.5 * backgroundBlur );\n\n\t\t\t\t\t#if FEATURE_BACKGROUND_MAP\n\n\t\t\t\t\treturn sampleEquirectColor( backgroundMap, sampleDir );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\treturn environmentIntensity * sampleEquirectColor( envMapInfo.map, sampleDir );\n\n\t\t\t\t\t#endif\n\n\t\t\t\t}\n\n\t\t\t\t${ getSurfaceRecordGLSL }\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t// init\n\t\t\t\t\trng_initialize( gl_FragCoord.xy, seed );\n\t\t\t\t\tsobolPixelIndex = ( uint( gl_FragCoord.x ) << 16 ) |  uint( gl_FragCoord.y );\n\t\t\t\t\tsobolPathIndex = uint( seed );\n\n\t\t\t\t\t// get camera ray\n\t\t\t\t\tvec3 rayDirection, rayOrigin;\n\t\t\t\t\tgetCameraRay( rayDirection, rayOrigin );\n\n\t\t\t\t\t// inverse environment rotation\n\t\t\t\t\tmat3 envRotation3x3 = mat3( environmentRotation );\n\t\t\t\t\tmat3 invEnvRotation3x3 = inverse( envRotation3x3 );\n\t\t\t\t\tfloat lightsDenom = environmentIntensity == 0.0 && lights.count != 0u ? float( lights.count ) : float( lights.count + 1u );\n\n\t\t\t\t\t// final color\n\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\t// hit results\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\t\t// path tracing state\n\t\t\t\t\tfloat accumulatedRoughness = 0.0;\n\t\t\t\t\tbool transmissiveRay = true;\n\t\t\t\t\tbool isShadowRay = false;\n\t\t\t\t\tint transmissiveTraversals = transmissiveBounces;\n\t\t\t\t\tvec3 throughputColor = vec3( 1.0 );\n\t\t\t\t\tScatterRecord sampleRec;\n\t\t\t\t\tint i;\n\n\t\t\t\t\tMaterial fogMaterial;\n\t\t\t\t\t#if FEATURE_FOG\n\n\t\t\t\t\tfogMaterial.fogVolume = bvhIntersectFogVolumeHit(\n\t\t\t\t\t\tbvh, rayOrigin, - rayDirection,\n\t\t\t\t\t\tmaterialIndexAttribute, materials,\n\t\t\t\t\t\tfogMaterial\n\t\t\t\t\t);\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfor ( i = 0; i < bounces; i ++ ) {\n\n\t\t\t\t\t\tsobolBounceIndex ++;\n\n\t\t\t\t\t\tbool firstRay = i == 0 && transmissiveTraversals == transmissiveBounces;\n\n\t\t\t\t\t\tLightSampleRecord lightSampleRec;\n\t\t\t\t\t\tint hitType = traceScene(\n\t\t\t\t\t\t\trayOrigin, rayDirection,\n\t\t\t\t\t\t\tbvh, lights, fogMaterial,\n\t\t\t\t\t\t\tfaceIndices, faceNormal, barycoord, side, dist,\n\t\t\t\t\t\t\tlightSampleRec\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( hitType == LIGHT_HIT ) {\n\n\t\t\t\t\t\t\tif ( firstRay || transmissiveRay ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightSampleRec.emission * throughputColor;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t\t\t// NOTE: we skip MIS for punctual lights since they are not supported in forward PT case\n\t\t\t\t\t\t\t\tif ( lightSampleRec.type == SPOT_LIGHT_TYPE || lightSampleRec.type == DIR_LIGHT_TYPE || lightSampleRec.type == POINT_LIGHT_TYPE ) {\n\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightSampleRec.emission * throughputColor;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// weight the contribution\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( sampleRec.pdf, lightSampleRec.pdf / lightsDenom );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightSampleRec.emission * throughputColor * misWeight;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightSampleRec.emission * throughputColor;\n\n\t\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( hitType == NO_HIT ) {\n\n\t\t\t\t\t\t\tif ( firstRay || transmissiveRay ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += sampleBackground( envRotation3x3 * rayDirection, sobol2( 2 ) ) * throughputColor;\n\t\t\t\t\t\t\t\tgl_FragColor.a = backgroundAlpha;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t\t\t// get the PDF of the hit envmap point\n\t\t\t\t\t\t\t\tvec3 envColor;\n\t\t\t\t\t\t\t\tfloat envPdf = sampleEquirect( envMapInfo, envRotation3x3 * rayDirection, envColor );\n\t\t\t\t\t\t\t\tenvPdf /= lightsDenom;\n\n\t\t\t\t\t\t\t\t// and weight the contribution\n\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( sampleRec.pdf, envPdf );\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += environmentIntensity * envColor * throughputColor * misWeight;\n\n\t\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb +=\n\t\t\t\t\t\t\t\t\tenvironmentIntensity *\n\t\t\t\t\t\t\t\t\tsampleEquirectColor( envMapInfo.map, envRotation3x3 * rayDirection ) *\n\t\t\t\t\t\t\t\t\tthroughputColor;\n\n\t\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\n\n\t\t\t\t\t\t#if FEATURE_FOG\n\n\t\t\t\t\t\tif ( hitType == FOG_HIT ) {\n\n\t\t\t\t\t\t\tmaterial = fogMaterial;\n\t\t\t\t\t\t\taccumulatedRoughness += 0.2;\n\n\t\t\t\t\t\t} else if ( material.fogVolume ) {\n\n\t\t\t\t\t\t\tfogMaterial = material;\n\t\t\t\t\t\t\tfogMaterial.fogVolume = side == 1.0;\n\n\t\t\t\t\t\t\trayOrigin = stepRayOrigin( rayOrigin, rayDirection, - faceNormal, dist );\n\n\t\t\t\t\t\t\ti -= sign( transmissiveTraversals );\n\t\t\t\t\t\t\ttransmissiveTraversals -= sign( transmissiveTraversals );\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\tif ( material.matte && firstRay ) {\n\n\t\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if we've determined that this is a shadow ray and we've hit an item with no shadow casting\n\t\t\t\t\t\t// then skip it\n\t\t\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\n\n\t\t\t\t\t\t\trayOrigin = stepRayOrigin( rayOrigin, rayDirection, - faceNormal, dist );\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tSurfaceRecord surf;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tgetSurfaceRecord(\n\t\t\t\t\t\t\t\tmaterial, attributesArray, side, barycoord, faceIndices,\n\t\t\t\t\t\t\t\tfaceNormal, accumulatedRoughness,\n\t\t\t\t\t\t\t\tsurf\n\t\t\t\t\t\t\t) == SKIP_SURFACE\n\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t// only allow a limited number of transparency discards otherwise we could\n\t\t\t\t\t\t\t// crash the context with too long a loop.\n\t\t\t\t\t\t\ti -= sign( transmissiveTraversals );\n\t\t\t\t\t\t\ttransmissiveTraversals -= sign( transmissiveTraversals );\n\n\t\t\t\t\t\t\trayOrigin = stepRayOrigin( rayOrigin, rayDirection, - faceNormal, dist );\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfaceNormal = surf.faceNormal;\n\n\t\t\t\t\t\tmat3 normalBasis = getBasisFromNormal( surf.normal );\n\t\t\t\t\t\tmat3 invBasis = inverse( normalBasis );\n\n\t\t\t\t\t\tmat3 clearcoatNormalBasis = getBasisFromNormal( surf.clearcoatNormal );\n\t\t\t\t\t\tmat3 clearcoatInvBasis = inverse( clearcoatNormalBasis );\n\n\t\t\t\t\t\tvec3 outgoing = - normalize( invBasis * rayDirection );\n\t\t\t\t\t\tvec3 clearcoatOutgoing = - normalize( clearcoatInvBasis * rayDirection );\n\t\t\t\t\t\tsampleRec = bsdfSample( outgoing, clearcoatOutgoing, normalBasis, invBasis, clearcoatNormalBasis, clearcoatInvBasis, surf );\n\n\t\t\t\t\t\tbool wasBelowSurface = ! surf.volumeParticle && dot( rayDirection, faceNormal ) > 0.0;\n\t\t\t\t\t\tisShadowRay = sampleRec.specularPdf < sobol( 4 );\n\n\t\t\t\t\t\tvec3 prevRayDirection = rayDirection;\n\t\t\t\t\t\trayDirection = normalize( normalBasis * sampleRec.direction );\n\n\t\t\t\t\t\tbool isBelowSurface = ! surf.volumeParticle && dot( rayDirection, faceNormal ) < 0.0;\n\t\t\t\t\t\trayOrigin = stepRayOrigin( rayOrigin, prevRayDirection, isBelowSurface ? - faceNormal : faceNormal, dist );\n\n\t\t\t\t\t\t// direct env map sampling\n\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t// uniformly pick a light or environment map\n\t\t\t\t\t\tif( lightsDenom != 0.0 && sobol( 5 ) < float( lights.count ) / lightsDenom ) {\n\n\t\t\t\t\t\t\t// sample a light or environment\n\t\t\t\t\t\t\tLightSampleRecord lightSampleRec = randomLightSample( lights.tex, iesProfiles, lights.count, rayOrigin, sobol3( 6 ) );\n\n\t\t\t\t\t\t\tbool isSampleBelowSurface = ! surf.volumeParticle && dot( faceNormal, lightSampleRec.direction ) < 0.0;\n\t\t\t\t\t\t\tif ( isSampleBelowSurface ) {\n\n\t\t\t\t\t\t\t\tlightSampleRec.pdf = 0.0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check if a ray could even reach the light area\n\t\t\t\t\t\t\tvec3 attenuatedColor;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tlightSampleRec.pdf > 0.0 &&\n\t\t\t\t\t\t\t\tisDirectionValid( lightSampleRec.direction, surf.normal, faceNormal ) &&\n\t\t\t\t\t\t\t\t! attenuateHit( bvh, rayOrigin, lightSampleRec.direction, lightSampleRec.dist, bounces - i, transmissiveTraversals, isShadowRay, fogMaterial, attenuatedColor )\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\t// get the material pdf\n\t\t\t\t\t\t\t\tvec3 sampleColor;\n\t\t\t\t\t\t\t\tfloat lightMaterialPdf = bsdfResult( outgoing, clearcoatOutgoing, normalize( invBasis * lightSampleRec.direction ), normalize( clearcoatInvBasis * lightSampleRec.direction ), surf, sampleColor );\n\t\t\t\t\t\t\t\tbool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );\n\t\t\t\t\t\t\t\tif ( lightMaterialPdf > 0.0 && isValidSampleColor ) {\n\n\t\t\t\t\t\t\t\t\t// weight the direct light contribution\n\t\t\t\t\t\t\t\t\tfloat lightPdf = lightSampleRec.pdf / lightsDenom;\n\t\t\t\t\t\t\t\t\tfloat misWeight = lightSampleRec.type == SPOT_LIGHT_TYPE || lightSampleRec.type == DIR_LIGHT_TYPE || lightSampleRec.type == POINT_LIGHT_TYPE ? 1.0 : misHeuristic( lightPdf, lightMaterialPdf );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += attenuatedColor * lightSampleRec.emission * throughputColor * sampleColor * misWeight / lightPdf;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// find a sample in the environment map to include in the contribution\n\t\t\t\t\t\t\tvec3 envColor, envDirection;\n\t\t\t\t\t\t\tfloat envPdf = sampleEquirectProbability( envMapInfo, sobol2( 7 ), envColor, envDirection );\n\t\t\t\t\t\t\tenvDirection = invEnvRotation3x3 * envDirection;\n\n\t\t\t\t\t\t\t// this env sampling is not set up for transmissive sampling and yields overly bright\n\t\t\t\t\t\t\t// results so we ignore the sample in this case.\n\t\t\t\t\t\t\t// TODO: this should be improved but how? The env samples could traverse a few layers?\n\t\t\t\t\t\t\tbool isSampleBelowSurface = ! surf.volumeParticle && dot( faceNormal, envDirection ) < 0.0;\n\t\t\t\t\t\t\tif ( isSampleBelowSurface ) {\n\n\t\t\t\t\t\t\t\tenvPdf = 0.0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check if a ray could even reach the surface\n\t\t\t\t\t\t\tvec3 attenuatedColor;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tenvPdf > 0.0 &&\n\t\t\t\t\t\t\t\tisDirectionValid( envDirection, surf.normal, faceNormal ) &&\n\t\t\t\t\t\t\t\t! attenuateHit( bvh, rayOrigin, envDirection, INFINITY, bounces - i, transmissiveTraversals, isShadowRay, fogMaterial, attenuatedColor )\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\t// get the material pdf\n\t\t\t\t\t\t\t\tvec3 sampleColor;\n\t\t\t\t\t\t\t\tfloat envMaterialPdf = bsdfResult( outgoing, clearcoatOutgoing, normalize( invBasis * envDirection ), normalize( clearcoatInvBasis * envDirection ), surf, sampleColor );\n\t\t\t\t\t\t\t\tbool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );\n\t\t\t\t\t\t\t\tif ( envMaterialPdf > 0.0 && isValidSampleColor ) {\n\n\t\t\t\t\t\t\t\t\t// weight the direct light contribution\n\t\t\t\t\t\t\t\t\tenvPdf /= lightsDenom;\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( envPdf, envMaterialPdf );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += attenuatedColor * environmentIntensity * envColor * throughputColor * sampleColor * misWeight / envPdf;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// accumulate a roughness value to offset diffuse, specular, diffuse rays that have high contribution\n\t\t\t\t\t\t// to a single pixel resulting in fireflies\n\t\t\t\t\t\tif ( ! surf.volumeParticle && ! isBelowSurface ) {\n\n\t\t\t\t\t\t\t// determine if this is a rough normal or not by checking how far off straight up it is\n\t\t\t\t\t\t\tvec3 halfVector = normalize( outgoing + sampleRec.direction );\n\t\t\t\t\t\t\tvec3 clearcoatHalfVector = normalize( clearcoatOutgoing + sampleRec.clearcoatDirection );\n\t\t\t\t\t\t\taccumulatedRoughness += max( sin( acosApprox( halfVector.z ) ), sin( acosApprox( clearcoatHalfVector.z ) ) );\n\n\t\t\t\t\t\t\ttransmissiveRay = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if we're bouncing around the inside a transmissive material then decrement\n\t\t\t\t\t\t// perform this separate from a bounce\n\t\t\t\t\t\tbool isTransmissiveRay = ! surf.volumeParticle && dot( rayDirection, faceNormal * side ) < 0.0;\n\t\t\t\t\t\tif ( ( isTransmissiveRay || isBelowSurface ) && transmissiveTraversals > 0 ) {\n\n\t\t\t\t\t\t\ttransmissiveTraversals --;\n\t\t\t\t\t\t\ti --;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// accumulate color\n\t\t\t\t\t\tgl_FragColor.rgb += ( surf.emission * throughputColor );\n\n\t\t\t\t\t\t// skip the sample if our PDF or ray is impossible\n\t\t\t\t\t\tif ( sampleRec.pdf <= 0.0 || ! isDirectionValid( rayDirection, surf.normal, faceNormal ) ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#if FEATURE_RUSSIAN_ROULETTE\n\n\t\t\t\t\t\t// russian roulette path termination\n\t\t\t\t\t\t// https://www.arnoldrenderer.com/research/physically_based_shader_design_in_arnold.pdf\n\t\t\t\t\t\tuint minBounces = 3u;\n\t\t\t\t\t\tfloat depthProb = float( sobolBounceIndex < minBounces );\n\n\t\t\t\t\t\tfloat rrProb = luminance( throughputColor * sampleRec.color / sampleRec.pdf );\n\t\t\t\t\t\trrProb /= luminance( throughputColor );\n\t\t\t\t\t\trrProb = sqrt( rrProb );\n\t\t\t\t\t\trrProb = max( rrProb, depthProb );\n\t\t\t\t\t\trrProb = min( rrProb, 1.0 );\n\t\t\t\t\t\tif ( sobol( 8 ) > rrProb ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// perform sample clamping here to avoid bright pixels\n\t\t\t\t\t\tthroughputColor *= min( 1.0 / rrProb, 20.0 );\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\tthroughputColor *= sampleRec.color / sampleRec.pdf;\n\n\t\t\t\t\t\t// attenuate the throughput color by the medium color\n\t\t\t\t\t\tif ( side == - 1.0 ) {\n\n\t\t\t\t\t\t\tthroughputColor *= transmissionAttenuation( dist, surf.attenuationColor, surf.attenuationDistance );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// discard the sample if there are any NaNs\n\t\t\t\t\t\tif ( any( isnan( throughputColor ) ) || any( isinf( throughputColor ) ) ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgl_FragColor.a *= opacity;\n\n\t\t\t\t}\n\n\t\t\t`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n","import { PhysicalCamera } from '../objects/PhysicalCamera.js';\nexport class PhysicalCameraUniform {\n\n\tconstructor() {\n\n\t\tthis.bokehSize = 0;\n\t\tthis.apertureBlades = 0;\n\t\tthis.apertureRotation = 0;\n\t\tthis.focusDistance = 10;\n\t\tthis.anamorphicRatio = 1;\n\n\t}\n\n\tupdateFrom( camera ) {\n\n\t\tif ( camera instanceof PhysicalCamera ) {\n\n\t\t\tthis.bokehSize = camera.bokehSize;\n\t\t\tthis.apertureBlades = camera.apertureBlades;\n\t\t\tthis.apertureRotation = camera.apertureRotation;\n\t\t\tthis.focusDistance = camera.focusDistance;\n\t\t\tthis.anamorphicRatio = camera.anamorphicRatio;\n\n\t\t} else {\n\n\t\t\tthis.bokehSize = 0;\n\t\t\tthis.apertureRotation = 0;\n\t\t\tthis.apertureBlades = 0;\n\t\t\tthis.focusDistance = 10;\n\t\t\tthis.anamorphicRatio = 1;\n\n\t\t}\n\n\t}\n\n}\n","import { DataTexture, FloatType, RedFormat, LinearFilter, DataUtils, HalfFloatType, Source, RepeatWrapping, RGBAFormat } from 'three';\n\nfunction binarySearchFindClosestIndexOf( array, targetValue, offset = 0, count = array.length ) {\n\n\tlet lower = offset;\n\tlet upper = offset + count - 1;\n\n\twhile ( lower < upper ) {\n\n\t\t// calculate the midpoint for this iteration using a bitwise shift right operator to save 1 floating point multiplication\n\t\t// and 1 truncation from the double tilde operator to improve performance\n\t\t// this results in much better performance over using standard \"~ ~ ( (lower + upper) ) / 2\" to calculate the midpoint\n\t\tconst mid = ( lower + upper ) >> 1;\n\n\t\t// check if the middle array value is above or below the target and shift\n\t\t// which half of the array we're looking at\n\t\tif ( array[ mid ] < targetValue ) {\n\n\t\t\tlower = mid + 1;\n\n\t\t} else {\n\n\t\t\tupper = mid;\n\n\t\t}\n\n\t}\n\n\treturn lower - offset;\n\n}\n\nfunction colorToLuminance( r, g, b ) {\n\n\t// https://en.wikipedia.org/wiki/Relative_luminance\n\treturn 0.2126 * r + 0.7152 * g + 0.0722 * b;\n\n}\n\n// ensures the data is all floating point values and flipY is false\nfunction preprocessEnvMap( envMap ) {\n\n\tconst map = envMap.clone();\n\tmap.source = new Source( { ...map.image } );\n\tconst { width, height, data } = map.image;\n\n\t// TODO: is there a simple way to avoid cloning and adjusting the env map data here?\n\t// convert the data from half float uint 16 arrays to float arrays for cdf computation\n\tlet newData = data;\n\tif ( map.type === HalfFloatType ) {\n\n\t\tnewData = new Float32Array( data.length );\n\t\tfor ( const i in data ) {\n\n\t\t\tnewData[ i ] = DataUtils.fromHalfFloat( data[ i ] );\n\n\t\t}\n\n\t\tmap.image.data = newData;\n\t\tmap.type = FloatType;\n\n\t}\n\n\t// remove any y flipping for cdf computation\n\tif ( map.flipY ) {\n\n\t\tconst ogData = newData;\n\t\tnewData = newData.slice();\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst newY = height - y - 1;\n\t\t\t\tconst ogIndex = 4 * ( y * width + x );\n\t\t\t\tconst newIndex = 4 * ( newY * width + x );\n\n\t\t\t\tnewData[ newIndex + 0 ] = ogData[ ogIndex + 0 ];\n\t\t\t\tnewData[ newIndex + 1 ] = ogData[ ogIndex + 1 ];\n\t\t\t\tnewData[ newIndex + 2 ] = ogData[ ogIndex + 2 ];\n\t\t\t\tnewData[ newIndex + 3 ] = ogData[ ogIndex + 3 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tmap.flipY = false;\n\t\tmap.image.data = newData;\n\n\t}\n\n\treturn map;\n\n}\n\nexport class EquirectHdrInfoUniform {\n\n\tconstructor() {\n\n\t\t// Default to a white texture and associated weights so we don't\n\t\t// just render black initially.\n\t\tconst whiteTex = new DataTexture( new Float32Array( [ 1, 1, 1, 1 ] ), 1, 1 );\n\t\twhiteTex.type = FloatType;\n\t\twhiteTex.format = RGBAFormat;\n\t\twhiteTex.minFilter = LinearFilter;\n\t\twhiteTex.magFilter = LinearFilter;\n\t\twhiteTex.wrapS = RepeatWrapping;\n\t\twhiteTex.wrapT = RepeatWrapping;\n\t\twhiteTex.generateMipmaps = false;\n\t\twhiteTex.needsUpdate = true;\n\n\t\t// Stores a map of [0, 1] value -> cumulative importance row & pdf\n\t\t// used to sampling a random value to a relevant row to sample from\n\t\tconst marginalWeights = new DataTexture( new Float32Array( [ 0, 1 ] ), 1, 2 );\n\t\tmarginalWeights.type = FloatType;\n\t\tmarginalWeights.format = RedFormat;\n\t\tmarginalWeights.minFilter = LinearFilter;\n\t\tmarginalWeights.magFilter = LinearFilter;\n\t\tmarginalWeights.generateMipmaps = false;\n\t\tmarginalWeights.needsUpdate = true;\n\n\t\t// Stores a map of [0, 1] value -> cumulative importance column & pdf\n\t\t// used to sampling a random value to a relevant pixel to sample from\n\t\tconst conditionalWeights = new DataTexture( new Float32Array( [ 0, 0, 1, 1 ] ), 2, 2 );\n\t\tconditionalWeights.type = FloatType;\n\t\tconditionalWeights.format = RedFormat;\n\t\tconditionalWeights.minFilter = LinearFilter;\n\t\tconditionalWeights.magFilter = LinearFilter;\n\t\tconditionalWeights.generateMipmaps = false;\n\t\tconditionalWeights.needsUpdate = true;\n\n\t\tthis.map = whiteTex;\n\t\tthis.marginalWeights = marginalWeights;\n\t\tthis.conditionalWeights = conditionalWeights;\n\n\t\t// the total sum value is separated into two values to work around low precision\n\t\t// storage of floating values in structs\n\t\tthis.totalSumWhole = 1;\n\t\tthis.totalSumDecimal = 0;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.marginalWeights.dispose();\n\t\tthis.conditionalWeights.dispose();\n\t\tthis.map.dispose();\n\n\t}\n\n\tupdateFrom( hdr ) {\n\n\t\t// https://github.com/knightcrawler25/GLSL-PathTracer/blob/3c6fd9b6b3da47cd50c527eeb45845eef06c55c3/src/loaders/hdrloader.cpp\n\t\t// https://pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Sampling_Light_Sources#InfiniteAreaLights\n\t\tconst map = preprocessEnvMap( hdr );\n\t\tmap.wrapS = RepeatWrapping;\n\t\tmap.wrapT = RepeatWrapping;\n\n\t\tconst { width, height, data } = map.image;\n\n\t\t// \"conditional\" = \"pixel relative to row pixels sum\"\n\t\t// \"marginal\" = \"row relative to row sum\"\n\n\t\t// track the importance of any given pixel in the image by tracking its weight relative to other pixels in the image\n\t\tconst pdfConditional = new Float32Array( width * height );\n\t\tconst cdfConditional = new Float32Array( width * height );\n\n\t\tconst pdfMarginal = new Float32Array( height );\n\t\tconst cdfMarginal = new Float32Array( height );\n\n\t\tlet totalSumValue = 0.0;\n\t\tlet cumulativeWeightMarginal = 0.0;\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tlet cumulativeRowWeight = 0.0;\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst i = y * width + x;\n\t\t\t\tconst r = data[ 4 * i + 0 ];\n\t\t\t\tconst g = data[ 4 * i + 1 ];\n\t\t\t\tconst b = data[ 4 * i + 2 ];\n\n\t\t\t\t// the probability of the pixel being selected in this row is the\n\t\t\t\t// scale of the luminance relative to the rest of the pixels.\n\t\t\t\t// TODO: this should also account for the solid angle of the pixel when sampling\n\t\t\t\tconst weight = colorToLuminance( r, g, b );\n\t\t\t\tcumulativeRowWeight += weight;\n\t\t\t\ttotalSumValue += weight;\n\n\t\t\t\tpdfConditional[ i ] = weight;\n\t\t\t\tcdfConditional[ i ] = cumulativeRowWeight;\n\n\t\t\t}\n\n\t\t\t// can happen if the row is all black\n\t\t\tif ( cumulativeRowWeight !== 0 ) {\n\n\t\t\t\t// scale the pdf and cdf to [0.0, 1.0]\n\t\t\t\tfor ( let i = y * width, l = y * width + width; i < l; i ++ ) {\n\n\t\t\t\t\tpdfConditional[ i ] /= cumulativeRowWeight;\n\t\t\t\t\tcdfConditional[ i ] /= cumulativeRowWeight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcumulativeWeightMarginal += cumulativeRowWeight;\n\n\t\t\t// compute the marginal pdf and cdf along the height of the map.\n\t\t\tpdfMarginal[ y ] = cumulativeRowWeight;\n\t\t\tcdfMarginal[ y ] = cumulativeWeightMarginal;\n\n\t\t}\n\n\t\t// can happen if the texture is all black\n\t\tif ( cumulativeWeightMarginal !== 0 ) {\n\n\t\t\t// scale the marginal pdf and cdf to [0.0, 1.0]\n\t\t\tfor ( let i = 0, l = pdfMarginal.length; i < l; i ++ ) {\n\n\t\t\t\tpdfMarginal[ i ] /= cumulativeWeightMarginal;\n\t\t\t\tcdfMarginal[ i ] /= cumulativeWeightMarginal;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute a sorted index of distributions and the probabilities along them for both\n\t\t// the marginal and conditional data. These will be used to sample with a random number\n\t\t// to retrieve a uv value to sample in the environment map.\n\t\t// These values continually increase so it's okay to interpolate between them.\n\t\tconst marginalDataArray = new Float32Array( height );\n\t\tconst conditionalDataArray = new Float32Array( width * height );\n\n\t\t// we add a half texel offset so we're sampling the center of the pixel\n\t\tfor ( let i = 0; i < height; i ++ ) {\n\n\t\t\tconst dist = ( i + 1 ) / height;\n\t\t\tconst row = binarySearchFindClosestIndexOf( cdfMarginal, dist );\n\n\t\t\tmarginalDataArray[ i ] = ( row + 0.5 ) / height;\n\n\t\t}\n\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst i = y * width + x;\n\t\t\t\tconst dist = ( x + 1 ) / width;\n\t\t\t\tconst col = binarySearchFindClosestIndexOf( cdfConditional, dist, y * width, width );\n\n\t\t\t\tconditionalDataArray[ i ] = ( col + 0.5 ) / width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispose();\n\n\t\tconst { marginalWeights, conditionalWeights } = this;\n\t\tmarginalWeights.image = { width: height, height: 1, data: marginalDataArray };\n\t\tmarginalWeights.needsUpdate = true;\n\n\t\tconditionalWeights.image = { width, height, data: conditionalDataArray };\n\t\tconditionalWeights.needsUpdate = true;\n\n\t\tconst totalSumWhole = ~ ~ totalSumValue;\n\t\tconst totalSumDecimal = ( totalSumValue - totalSumWhole );\n\t\tthis.totalSumWhole = totalSumWhole;\n\t\tthis.totalSumDecimal = totalSumDecimal;\n\n\t\tthis.map = map;\n\n\t}\n\n}\n","import { DataTexture, RGBAFormat, ClampToEdgeWrapping, FloatType, Vector3, Quaternion, Matrix4 } from 'three';\n\nconst LIGHT_PIXELS = 6;\nconst RECT_AREA_LIGHT = 0;\nconst CIRC_AREA_LIGHT = 1;\nconst SPOT_LIGHT = 2;\nconst DIR_LIGHT = 3;\nconst POINT_LIGHT = 4;\nexport class LightsInfoUniformStruct {\n\n\tconstructor() {\n\n\t\tconst tex = new DataTexture( new Float32Array( 4 ), 1, 1 );\n\t\ttex.format = RGBAFormat;\n\t\ttex.type = FloatType;\n\t\ttex.wrapS = ClampToEdgeWrapping;\n\t\ttex.wrapT = ClampToEdgeWrapping;\n\t\ttex.generateMipmaps = false;\n\n\t\tthis.tex = tex;\n\t\tthis.count = 0;\n\n\t}\n\n\tupdateFrom( lights, iesTextures = [] ) {\n\n\t\tconst tex = this.tex;\n\t\tconst pixelCount = Math.max( lights.length * LIGHT_PIXELS, 1 );\n\t\tconst dimension = Math.ceil( Math.sqrt( pixelCount ) );\n\n\t\tif ( tex.image.width !== dimension ) {\n\n\t\t\ttex.dispose();\n\n\t\t\ttex.image.data = new Float32Array( dimension * dimension * 4 );\n\t\t\ttex.image.width = dimension;\n\t\t\ttex.image.height = dimension;\n\n\t\t}\n\n\t\tconst floatArray = tex.image.data;\n\n\t\tconst u = new Vector3();\n\t\tconst v = new Vector3();\n\t\tconst m = new Matrix4();\n\t\tconst worldQuaternion = new Quaternion();\n\t\tconst eye = new Vector3();\n\t\tconst target = new Vector3();\n\t\tconst up = new Vector3();\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst l = lights[ i ];\n\n\t\t\tconst baseIndex = i * LIGHT_PIXELS * 4;\n\t\t\tlet index = 0;\n\n\t\t\t// sample 1\n\t\t    // position\n\t\t\tl.getWorldPosition( v );\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\n\n\t\t\t// type\n\t\t\tlet type = RECT_AREA_LIGHT;\n\t\t\tif ( l.isRectAreaLight && l.isCircular ) {\n\n\t\t\t\ttype = CIRC_AREA_LIGHT;\n\n\t\t\t} else if ( l.isSpotLight ) {\n\n\t\t\t\ttype = SPOT_LIGHT;\n\n\t\t\t} else if ( l.isDirectionalLight ) {\n\n\t\t\t\ttype = DIR_LIGHT;\n\n\t\t\t} else if ( l.isPointLight ) {\n\n\t\t\t\ttype = POINT_LIGHT;\n\n\t\t\t}\n\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = type;\n\n\t\t\t// sample 2\n\t\t\t// color\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.r;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.g;\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.b;\n\n\t\t\t// intensity\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.intensity;\n\n\t\t\tl.getWorldQuaternion( worldQuaternion );\n\n\t\t\tif ( l.isRectAreaLight ) {\n\n\t\t\t\t// sample 3\n\t\t\t\t// u vector\n\t\t\t\tu.set( l.width, 0, 0 ).applyQuaternion( worldQuaternion );\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.z;\n\t\t\t\tindex ++;\n\n\t\t\t\t// sample 4\n\t\t\t\t// v vector\n\t\t\t\tv.set( 0, l.height, 0 ).applyQuaternion( worldQuaternion );\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\n\n\t\t\t\t// area\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.cross( v ).length() * ( l.isCircular ? ( Math.PI / 4.0 ) : 1.0 );\n\n\t\t\t} else if ( l.isSpotLight ) {\n\n\t\t\t\tconst radius = l.radius;\n\t\t\t\teye.setFromMatrixPosition( l.matrixWorld );\n\t\t\t\ttarget.setFromMatrixPosition( l.target.matrixWorld );\n\t\t\t\tm.lookAt( eye, target, up );\n\t\t\t\tworldQuaternion.setFromRotationMatrix( m );\n\n\t\t\t\t// sample 3\n\t\t\t\t// u vector\n\t\t\t\tu.set( 1, 0, 0 ).applyQuaternion( worldQuaternion );\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.z;\n\t\t\t\tindex ++;\n\n\t\t\t\t// sample 4\n\t\t\t\t// v vector\n\t\t\t\tv.set( 0, 1, 0 ).applyQuaternion( worldQuaternion );\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\n\n\t\t\t\t// area\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.PI * radius * radius;\n\n\t\t\t\t// sample 5\n\t\t\t\t// radius\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = radius;\n\n\t\t\t\t// near\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.shadow.camera.near;\n\n\t\t\t\t// decay\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.decay;\n\n\t\t\t\t// distance\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.distance;\n\n\t\t\t\t// sample 6\n\t\t\t\t// coneCos\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.cos( l.angle );\n\n\t\t\t\t// penumbraCos\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.cos( l.angle * ( 1 - l.penumbra ) );\n\n\t\t\t\t// iesProfile\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = iesTextures.indexOf( l.iesTexture );\n\n\t\t\t} else if ( l.isPointLight ) {\n\n\t\t\t\tconst worldPosition = u.setFromMatrixPosition( l.matrixWorld );\n\n\t\t\t\t// sample 3\n\t\t\t\t// u vector\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = worldPosition.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = worldPosition.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = worldPosition.z;\n\t\t\t\tindex ++;\n\n\t\t\t\t// sample 4\n\t\t\t\tindex += 4;\n\n\t\t\t\t// sample 5\n\t\t\t\tindex += 2;\n\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.decay;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.distance;\n\n\t\t\t} else if ( l.isDirectionalLight ) {\n\n\t\t\t\tconst worldPosition = u.setFromMatrixPosition( l.matrixWorld );\n\t\t\t\tconst targetPosition = v.setFromMatrixPosition( l.target.matrixWorld );\n\t\t\t\ttarget.subVectors( worldPosition, targetPosition ).normalize();\n\n\t\t\t\t// sample 3\n\t\t\t\t// u vector\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = target.x;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = target.y;\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = target.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\ttex.needsUpdate = true;\n\t\tthis.count = lights.length;\n\n\t}\n\n}\n","import {\n\tClampToEdgeWrapping,\n\tColor,\n\tFloatType,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tNoToneMapping,\n\tRGBAFormat,\n\tWebGLArrayRenderTarget,\n} from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { IESLoader } from '../utils/IESLoader.js';\n\nconst prevColor = new Color();\nexport class IESProfilesTexture extends WebGLArrayRenderTarget {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconst tex = this.texture;\n\t\ttex.format = RGBAFormat;\n\t\ttex.type = FloatType;\n\t\ttex.minFilter = LinearFilter;\n\t\ttex.magFilter = LinearFilter;\n\t\ttex.wrapS = ClampToEdgeWrapping;\n\t\ttex.wrapT = ClampToEdgeWrapping;\n\t\ttex.generateMipmaps = false;\n\n\t\ttex.updateFrom = ( ...args ) => {\n\n\t\t\tthis.updateFrom( ...args );\n\n\t\t};\n\n\t\tconst fsQuad = new FullScreenQuad( new MeshBasicMaterial() );\n\t\tthis.fsQuad = fsQuad;\n\n\t\tthis.iesLoader = new IESLoader();\n\n\t}\n\n\tasync updateFrom( renderer, textures ) {\n\n\t\t// save previous renderer state\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\n\t\tconst prevToneMapping = renderer.toneMapping;\n\t\tconst prevAlpha = renderer.getClearAlpha();\n\t\trenderer.getClearColor( prevColor );\n\n\t\t// resize the render target and ensure we don't have an empty texture\n\t\t// render target depth must be >= 1 to avoid unbound texture error on android devices\n\t\tconst depth = textures.length || 1;\n\t\tthis.setSize( 360, 180, depth );\n\t\trenderer.setClearColor( 0, 0 );\n\t\trenderer.toneMapping = NoToneMapping;\n\n\t\t// render each texture into each layer of the target\n\t\tconst fsQuad = this.fsQuad;\n\t\tfor ( let i = 0, l = depth; i < l; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\t\t\tif ( texture ) {\n\n\t\t\t\t// revert to default texture transform before rendering\n\t\t\t\ttexture.matrixAutoUpdate = false;\n\t\t\t\ttexture.matrix.identity();\n\n\t\t\t\tfsQuad.material.map = texture;\n\t\t\t\tfsQuad.material.transparent = true;\n\n\t\t\t\trenderer.setRenderTarget( this, i );\n\t\t\t\tfsQuad.render( renderer );\n\n\t\t\t\t// restore custom texture transform\n\t\t\t\ttexture.updateMatrix();\n\t\t\t\ttexture.matrixAutoUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// reset the renderer\n\t\tfsQuad.material.map = null;\n\t\trenderer.setClearColor( prevColor, prevAlpha );\n\t\trenderer.setRenderTarget( prevRenderTarget );\n\t\trenderer.toneMapping = prevToneMapping;\n\n\t\tfsQuad.dispose();\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n","import { FloatAttributeTextureArray } from './FloatAttributeTextureArray.js';\n\nexport class AttributesTextureArray extends FloatAttributeTextureArray {\n\n\tupdateNormalAttribute( attr ) {\n\n\t\tthis.updateAttribute( 0, attr );\n\n\t}\n\n\tupdateTangentAttribute( attr ) {\n\n\t\tthis.updateAttribute( 1, attr );\n\n\t}\n\n\tupdateUvAttribute( attr ) {\n\n\t\tthis.updateAttribute( 2, attr );\n\n\t}\n\n\tupdateColorAttribute( attr ) {\n\n\t\tthis.updateAttribute( 3, attr );\n\n\t}\n\n\tupdateFrom( normal, tangent, uv, color ) {\n\n\t\tthis.setAttributes( [ normal, tangent, uv, color ] );\n\n\t}\n\n}\n","import { DataArrayTexture, FloatType, RGBAFormat } from 'three';\nimport { FloatVertexAttributeTexture } from 'three-mesh-bvh';\n\nfunction copyArrayToArray( fromArray, fromStride, toArray, toStride, offset ) {\n\n\tif ( fromStride > toStride ) {\n\n\t\tthrow new Error();\n\n\t}\n\n\t// scale non-float values to their normalized range\n\tconst count = fromArray.length / fromStride;\n\tconst bpe = fromArray.constructor.BYTES_PER_ELEMENT * 8;\n\tlet maxValue = 1.0;\n\tswitch ( fromArray.constructor ) {\n\n\tcase Uint8Array:\n\tcase Uint16Array:\n\tcase Uint32Array:\n\t\tmaxValue = 2 ** bpe - 1;\n\t\tbreak;\n\n\tcase Int8Array:\n\tcase Int16Array:\n\tcase Int32Array:\n\t\tmaxValue = 2 ** ( bpe - 1 ) - 1;\n\t\tbreak;\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tconst i4 = 4 * i;\n\t\tconst is = fromStride * i;\n\t\tfor ( let j = 0; j < toStride; j ++ ) {\n\n\t\t\ttoArray[ offset + i4 + j ] = fromStride >= j + 1 ? fromArray[ is + j ] / maxValue : 0;\n\n\t\t}\n\n\t}\n\n}\n\nexport class FloatAttributeTextureArray extends DataArrayTexture {\n\n\tconstructor() {\n\n\t\tsuper();\n\t\tthis._textures = [];\n\t\tthis.type = FloatType;\n\t\tthis.format = RGBAFormat;\n\t\tthis.internalFormat = 'RGBA32F';\n\n\t}\n\n\tupdateAttribute( index, attr ) {\n\n\t\t// update the texture\n\t\tconst tex = this._textures[ index ];\n\t\ttex.updateFrom( attr );\n\n\t\t// ensure compatibility\n\t\tconst baseImage = tex.image;\n\t\tconst image = this.image;\n\t\tif ( baseImage.width !== image.width || baseImage.height !== image.height ) {\n\n\t\t\tthrow new Error( 'FloatAttributeTextureArray: Attribute must be the same dimensions when updating single layer.' );\n\n\t\t}\n\n\t\t// update the image\n\t\tconst { width, height, data } = image;\n\t\tconst length = width * height * 4;\n\t\tconst offset = length * index;\n\t\tlet itemSize = attr.itemSize;\n\t\tif ( itemSize === 3 ) {\n\n\t\t\titemSize = 4;\n\n\t\t}\n\n\t\t// copy the data\n\t\tcopyArrayToArray( tex.image.data, itemSize, data, 4, offset );\n\n\t\tthis.dispose();\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tsetAttributes( attrs ) {\n\n\t\t// ensure the attribute count\n\t\tconst itemCount = attrs[ 0 ].count;\n\t\tconst attrsLength = attrs.length;\n\t\tfor ( let i = 0, l = attrsLength; i < l; i ++ ) {\n\n\t\t\tif ( attrs[ i ].count !== itemCount ) {\n\n\t\t\t\tthrow new Error( 'FloatAttributeTextureArray: All attributes must have the same item count.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// initialize all textures\n\t\tconst textures = this._textures;\n\t\twhile ( textures.length < attrsLength ) {\n\n\t\t\tconst tex = new FloatVertexAttributeTexture();\n\t\t\ttextures.push( tex );\n\n\t\t}\n\n\t\twhile ( textures.length > attrsLength ) {\n\n\t\t\ttextures.pop();\n\n\t\t}\n\n\t\t// update all textures\n\t\tfor ( let i = 0, l = attrsLength; i < l; i ++ ) {\n\n\t\t\ttextures[ i ].updateFrom( attrs[ i ] );\n\n\t\t}\n\n\t\t// determine if we need to create a new array\n\t\tconst baseTexture = textures[ 0 ];\n\t\tconst baseImage = baseTexture.image;\n\t\tconst image = this.image;\n\n\t\tif ( baseImage.width !== image.width || baseImage.height !== image.height || baseImage.depth !== attrsLength ) {\n\n\t\t\timage.width = baseImage.width;\n\t\t\timage.height = baseImage.height;\n\t\t\timage.depth = attrsLength;\n\t\t\timage.data = new Float32Array( image.width * image.height * image.depth * 4 );\n\n\t\t}\n\n\t\t// copy the other texture data into the data array texture\n\t\tconst { data, width, height } = image;\n\t\tfor ( let i = 0, l = attrsLength; i < l; i ++ ) {\n\n\t\t\tconst tex = textures[ i ];\n\t\t\tconst length = width * height * 4;\n\t\t\tconst offset = length * i;\n\n\t\t\tlet itemSize = attrs[ i ].itemSize;\n\t\t\tif ( itemSize === 3 ) {\n\n\t\t\t\titemSize = 4;\n\n\t\t\t}\n\n\t\t\tcopyArrayToArray( tex.image.data, itemSize, data, 4, offset );\n\n\t\t}\n\n\t\t// reset the texture\n\t\tthis.dispose();\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\n}\n","import { DataTexture, RGBAFormat, ClampToEdgeWrapping, FloatType, FrontSide, BackSide, DoubleSide } from 'three';\nimport { reduceTexturesToUniqueSources, getTextureHash } from './utils.js';\n\nconst MATERIAL_PIXELS = 45;\nconst MATERIAL_STRIDE = MATERIAL_PIXELS * 4;\n\nconst MATTE_OFFSET = 14 * 4 + 0; // s14.r\nconst SHADOW_OFFSET = 14 * 4 + 1; // s14.g\n\nclass MaterialFeatures {\n\n\tconstructor() {\n\n\t\tthis._features = {};\n\n\t}\n\n\tisUsed( feature ) {\n\n\t\treturn feature in this._features;\n\n\t}\n\n\tsetUsed( feature, used = true ) {\n\n\t\tif ( used === false ) {\n\n\t\t\tdelete this._features[ feature ];\n\n\t\t} else {\n\n\t\t\tthis._features[ feature ] = true;\n\n\t\t}\n\n\t}\n\n\treset() {\n\n\t\tthis._features = {};\n\n\t}\n\n}\n\nexport class MaterialsTexture extends DataTexture {\n\n\tconstructor() {\n\n\t\tsuper( new Float32Array( 4 ), 1, 1 );\n\n\t\tthis.format = RGBAFormat;\n\t\tthis.type = FloatType;\n\t\tthis.wrapS = ClampToEdgeWrapping;\n\t\tthis.wrapT = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\t\tthis.threeCompatibilityTransforms = false;\n\t\tthis.features = new MaterialFeatures();\n\n\t}\n\n\tsetCastShadow( materialIndex, cast ) {\n\n\t\t// invert the shadow value so we default to \"true\" when initializing a material\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + SHADOW_OFFSET;\n\t\tarray[ index ] = ! cast ? 1 : 0;\n\n\t}\n\n\tgetCastShadow( materialIndex ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + SHADOW_OFFSET;\n\t\treturn ! Boolean( array[ index ] );\n\n\t}\n\n\tsetMatte( materialIndex, matte ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + MATTE_OFFSET;\n\t\tarray[ index ] = matte ? 1 : 0;\n\n\t}\n\n\tgetMatte( materialIndex ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + MATTE_OFFSET;\n\t\treturn Boolean( array[ index ] );\n\n\t}\n\n\tupdateFrom( materials, textures ) {\n\n\t\tfunction getTexture( material, key, def = - 1 ) {\n\n\t\t\tif ( key in material && material[ key ] ) {\n\n\t\t\t\tconst hash = getTextureHash( material[ key ] );\n\t\t\t\treturn uniqueTextureLookup[ hash ];\n\n\t\t\t} else {\n\n\t\t\t\treturn def;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getField( material, key, def ) {\n\n\t\t\treturn key in material ? material[ key ] : def;\n\n\t\t}\n\n\t\tfunction getUVTransformTexture( material ) {\n\n\t\t\t// https://github.com/mrdoob/three.js/blob/f3a832e637c98a404c64dae8174625958455e038/src/renderers/webgl/WebGLMaterials.js#L204-L306\n\t\t\t// https://threejs.org/docs/#api/en/textures/Texture.offset\n\t\t\t// fallback order of textures to use as a common uv transform\n\t\t\treturn material.map ||\n\t\t\t\tmaterial.specularMap ||\n\t\t\t\tmaterial.displacementMap ||\n\t\t\t\tmaterial.normalMap ||\n\t\t\t\tmaterial.bumpMap ||\n\t\t\t\tmaterial.roughnessMap ||\n\t\t\t\tmaterial.metalnessMap ||\n\t\t\t\tmaterial.alphaMap ||\n\t\t\t\tmaterial.emissiveMap ||\n\t\t\t\tmaterial.clearcoatMap ||\n\t\t\t\tmaterial.clearcoatNormalMap ||\n\t\t\t\tmaterial.clearcoatRoughnessMap ||\n\t\t\t\tmaterial.iridescenceMap ||\n\t\t\t\tmaterial.iridescenceThicknessMap ||\n\t\t\t\tmaterial.specularIntensityMap ||\n\t\t\t\tmaterial.specularColorMap ||\n\t\t\t\tmaterial.transmissionMap ||\n\t\t\t\tmaterial.thicknessMap ||\n\t\t\t\tmaterial.sheenColorMap ||\n\t\t\t\tmaterial.sheenRoughnessMap ||\n\t\t\t\tnull;\n\n\t\t}\n\n\t\tfunction writeTextureMatrixToArray( material, textureKey, array, offset ) {\n\n\t\t\tlet texture;\n\t\t\tif ( threeCompatibilityTransforms ) {\n\n\t\t\t\ttexture = getUVTransformTexture( material );\n\n\t\t\t} else {\n\n\t\t\t\ttexture = material[ textureKey ] && material[ textureKey ].isTexture ? material[ textureKey ] : null;\n\n\t\t\t}\n\n\t\t\t// check if texture exists\n\t\t\tif ( texture ) {\n\n\t\t\t\tconst elements = texture.matrix.elements;\n\n\t\t\t\tlet i = 0;\n\n\t\t\t\t// first row\n\t\t\t\tarray[ offset + i ++ ] = elements[ 0 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 3 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 6 ];\n\t\t\t\ti ++;\n\n\t\t\t\t// second row\n\t\t\t\tarray[ offset + i ++ ] = elements[ 1 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 4 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 7 ];\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn 8;\n\n\t\t}\n\n\t\tlet index = 0;\n\t\tconst pixelCount = materials.length * MATERIAL_PIXELS;\n\t\tconst dimension = Math.ceil( Math.sqrt( pixelCount ) );\n\t\tconst { threeCompatibilityTransforms, image, features } = this;\n\n\t\t// get the list of textures with unique sources\n\t\tconst uniqueTextures = reduceTexturesToUniqueSources( textures );\n\t\tconst uniqueTextureLookup = {};\n\t\tfor ( let i = 0, l = uniqueTextures.length; i < l; i ++ ) {\n\n\t\t\tuniqueTextureLookup[ getTextureHash( uniqueTextures[ i ] ) ] = i;\n\n\t\t}\n\n\t\tif ( image.width !== dimension ) {\n\n\t\t\tthis.dispose();\n\n\t\t\timage.data = new Float32Array( dimension * dimension * 4 );\n\t\t\timage.width = dimension;\n\t\t\timage.height = dimension;\n\n\t\t}\n\n\t\tconst floatArray = image.data;\n\n\t\t// on some devices (Google Pixel 6) the \"floatBitsToInt\" function does not work correctly so we\n\t\t// can't encode texture ids that way.\n\t\t// const intArray = new Int32Array( floatArray.buffer );\n\n\t\tfeatures.reset();\n\t\tfor ( let i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tconst m = materials[ i ];\n\n\t\t\tif ( m.isFogVolumeMaterial ) {\n\n\t\t\t\tfeatures.setUsed( 'FOG' );\n\n\t\t\t\tfor ( let j = 0; j < MATERIAL_STRIDE; j ++ ) {\n\n\t\t\t\t\tfloatArray[ index + j ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\t// sample 0 .rgb\n\t\t\t\tfloatArray[ index + 0 * 4 + 0 ] = m.color.r;\n\t\t\t\tfloatArray[ index + 0 * 4 + 1 ] = m.color.g;\n\t\t\t\tfloatArray[ index + 0 * 4 + 2 ] = m.color.b;\n\n\t\t\t\t// sample 2 .a\n\t\t\t\tfloatArray[ index + 2 * 4 + 3 ] = getField( m, 'emissiveIntensity', 0.0 );\n\n\t\t\t\t// sample 3 .rgb\n\t\t\t\tfloatArray[ index + 3 * 4 + 0 ] = m.emissive.r;\n\t\t\t\tfloatArray[ index + 3 * 4 + 1 ] = m.emissive.g;\n\t\t\t\tfloatArray[ index + 3 * 4 + 2 ] = m.emissive.b;\n\n\t\t\t\t// sample 13 .g\n\t\t\t\t// reusing opacity field\n\t\t\t\tfloatArray[ index + 13 * 4 + 1 ] = m.density;\n\n\t\t\t\t// side\n\t\t\t\tfloatArray[ index + 13 * 4 + 3 ] = 0.0;\n\n\t\t\t\t// sample 14 .b\n\t\t\t\tfloatArray[ index + 14 * 4 + 2 ] = 1 << 2;\n\n\t\t\t\tindex += MATERIAL_STRIDE;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// sample 0\n\t\t\t// color\n\t\t\tfloatArray[ index ++ ] = m.color.r;\n\t\t\tfloatArray[ index ++ ] = m.color.g;\n\t\t\tfloatArray[ index ++ ] = m.color.b;\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'map' );\n\n\t\t\t// sample 1\n\t\t\t// metalness & roughness\n\t\t\tfloatArray[ index ++ ] = getField( m, 'metalness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'metalnessMap' );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'roughness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'roughnessMap' );\n\n\t\t\t// sample 2\n\t\t\t// transmission & emissiveIntensity\n\t\t\t// three.js assumes a default f0 of 0.04 if no ior is provided which equates to an ior of 1.5\n\t\t\tfloatArray[ index ++ ] = getField( m, 'ior', 1.5 );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'transmission', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'transmissionMap' );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'emissiveIntensity', 0.0 );\n\n\t\t\t// sample 3\n\t\t\t// emission\n\t\t\tif ( 'emissive' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.r;\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.g;\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'emissiveMap' );\n\n\t\t\t// sample 4\n\t\t\t// normals\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'normalMap' );\n\t\t\tif ( 'normalScale' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.normalScale.x;\n\t\t\t\tfloatArray[ index ++ ] = m.normalScale.y;\n\n \t\t\t} else {\n\n \t\t\t\tfloatArray[ index ++ ] = 1;\n \t\t\t\tfloatArray[ index ++ ] = 1;\n\n \t\t\t}\n\n\t\t\t// clearcoat\n\t\t\tfloatArray[ index ++ ] = getField( m, 'clearcoat', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatMap' ); // sample 5\n\n\t\t\tfloatArray[ index ++ ] = getField( m, 'clearcoatRoughness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatRoughnessMap' );\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatNormalMap' );\n\n\t\t\t// sample 6\n\t\t\tif ( 'clearcoatNormalScale' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.clearcoatNormalScale.x;\n\t\t\t\tfloatArray[ index ++ ] = m.clearcoatNormalScale.y;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 1;\n\t\t\t\tfloatArray[ index ++ ] = 1;\n\n\t\t\t}\n\n\t\t\tindex ++;\n\t\t\tfloatArray[ index ++ ] = getField( m, 'sheen', 0.0 );\n\n\t\t\t// sample 7\n\t\t\t// sheen\n\t\t\tif ( 'sheenColor' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.r;\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.g;\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'sheenColorMap' );\n\n\t\t\t// sample 8\n\t\t\tfloatArray[ index ++ ] = getField( m, 'sheenRoughness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'sheenRoughnessMap' );\n\n\t\t\t// iridescence\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'iridescenceMap' );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'iridescenceThicknessMap' );\n\n\t\t\t// sample 9\n\t\t\tfloatArray[ index ++ ] = getField( m, 'iridescence', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'iridescenceIOR', 1.3 );\n\n\t\t\tconst iridescenceThicknessRange = getField( m, 'iridescenceThicknessRange', [ 100, 400 ] );\n\t\t\tfloatArray[ index ++ ] = iridescenceThicknessRange[ 0 ];\n\t\t\tfloatArray[ index ++ ] = iridescenceThicknessRange[ 1 ];\n\n\t\t\t// sample 10\n\t\t\t// specular color\n\t\t\tif ( 'specularColor' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.r;\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.g;\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'specularColorMap' );\n\n\t\t\t// sample 11\n\t\t\t// specular intensity\n\t\t\tfloatArray[ index ++ ] = getField( m, 'specularIntensity', 1.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'specularIntensityMap' );\n\n\t\t\t// isThinFilm\n\t\t\tconst isThinFilm = getField( m, 'thickness', 0.0 ) === 0.0 && getField( m, 'attenuationDistance', Infinity ) === Infinity;\n\t\t\tfloatArray[ index ++ ] = Number( isThinFilm );\n\t\t\tindex ++;\n\n\t\t\t// sample 12\n\t\t\tif ( 'attenuationColor' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.r;\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.g;\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getField( m, 'attenuationDistance', Infinity );\n\n\t\t\t// sample 13\n\t\t\t// alphaMap\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'alphaMap' );\n\n\t\t\t// side & matte\n\t\t\tfloatArray[ index ++ ] = m.opacity;\n\t\t\tfloatArray[ index ++ ] = m.alphaTest;\n\t\t\tif ( ! isThinFilm && m.transmission > 0.0 ) {\n\n\t\t\t\tfloatArray[ index ++ ] = 0;\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( m.side ) {\n\n\t\t\t\tcase FrontSide:\n\t\t\t\t\tfloatArray[ index ++ ] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase BackSide:\n\t\t\t\t\tfloatArray[ index ++ ] = - 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase DoubleSide:\n\t\t\t\t\tfloatArray[ index ++ ] = 0;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// sample 14\n\t\t\tindex ++; // matte\n\t\t\tindex ++; // shadow\n\t\t\tfloatArray[ index ++ ] = Number( m.vertexColors ) | ( Number( m.flatShading ) << 1 ); // vertexColors & flatShading\n\t\t\tfloatArray[ index ++ ] = Number( m.transparent ); // transparent\n\n\t\t\t// map transform 15\n\t\t\tindex += writeTextureMatrixToArray( m, 'map', floatArray, index );\n\n\t\t\t// metalnessMap transform 17\n\t\t\tindex += writeTextureMatrixToArray( m, 'metalnessMap', floatArray, index );\n\n\t\t\t// roughnessMap transform 19\n\t\t\tindex += writeTextureMatrixToArray( m, 'roughnessMap', floatArray, index );\n\n\t\t\t// transmissionMap transform 21\n\t\t\tindex += writeTextureMatrixToArray( m, 'transmissionMap', floatArray, index );\n\n\t\t\t// emissiveMap transform 22\n\t\t\tindex += writeTextureMatrixToArray( m, 'emissiveMap', floatArray, index );\n\n\t\t\t// normalMap transform 25\n\t\t\tindex += writeTextureMatrixToArray( m, 'normalMap', floatArray, index );\n\n\t\t\t// clearcoatMap transform 27\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatMap', floatArray, index );\n\n\t\t\t// clearcoatNormalMap transform 29\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatNormalMap', floatArray, index );\n\n\t\t\t// clearcoatRoughnessMap transform 31\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatRoughnessMap', floatArray, index );\n\n\t\t\t// sheenColorMap transform 33\n\t\t\tindex += writeTextureMatrixToArray( m, 'sheenColorMap', floatArray, index );\n\n\t\t\t// sheenRoughnessMap transform 35\n\t\t\tindex += writeTextureMatrixToArray( m, 'sheenRoughnessMap', floatArray, index );\n\n\t\t\t// iridescenceMap transform 37\n\t\t\tindex += writeTextureMatrixToArray( m, 'iridescenceMap', floatArray, index );\n\n\t\t\t// iridescenceThicknessMap transform 39\n\t\t\tindex += writeTextureMatrixToArray( m, 'iridescenceThicknessMap', floatArray, index );\n\n\t\t\t// specularColorMap transform 41\n\t\t\tindex += writeTextureMatrixToArray( m, 'specularColorMap', floatArray, index );\n\n\t\t\t// specularIntensityMap transform 43\n\t\t\tindex += writeTextureMatrixToArray( m, 'specularIntensityMap', floatArray, index );\n\n\t\t}\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n","// we must hash the texture to determine uniqueness using the encoding, as well, because the\n// when rendering each texture to the texture array they must have a consistent color space.\nexport function getTextureHash( t ) {\n\n\treturn `${ t.source.uuid }:${ t.encoding }`;\n\n}\n\n// reduce the set of textures to just those with a unique source while retaining\n// the order of the textures.\nexport function reduceTexturesToUniqueSources( textures ) {\n\n\tconst sourceSet = new Set();\n\tconst result = [];\n\tfor ( let i = 0, l = textures.length; i < l; i ++ ) {\n\n\t\tconst tex = textures[ i ];\n\t\tconst hash = getTextureHash( tex );\n\t\tif ( ! sourceSet.has( hash ) ) {\n\n\t\t\tsourceSet.add( hash );\n\t\t\tresult.push( tex );\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n","import {\n\tWebGLArrayRenderTarget,\n\tRGBAFormat,\n\tUnsignedByteType,\n\tMeshBasicMaterial,\n\tColor,\n\tRepeatWrapping,\n\tLinearFilter,\n\tNoToneMapping,\n} from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { reduceTexturesToUniqueSources } from './utils.js';\n\nconst prevColor = new Color();\nexport class RenderTarget2DArray extends WebGLArrayRenderTarget {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconst tex = this.texture;\n\t\ttex.format = RGBAFormat;\n\t\ttex.type = UnsignedByteType;\n\t\ttex.minFilter = LinearFilter;\n\t\ttex.magFilter = LinearFilter;\n\t\ttex.wrapS = RepeatWrapping;\n\t\ttex.wrapT = RepeatWrapping;\n\t\ttex.setTextures = ( ...args ) => {\n\n\t\t\tthis.setTextures( ...args );\n\n\t\t};\n\n\t\tconst fsQuad = new FullScreenQuad( new MeshBasicMaterial() );\n\t\tthis.fsQuad = fsQuad;\n\n\t}\n\n\tsetTextures( renderer, width, height, textures ) {\n\n\t\t// get the list of textures with unique sources\n\t\tconst uniqueTextures = reduceTexturesToUniqueSources( textures );\n\n\t\t// save previous renderer state\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\n\t\tconst prevToneMapping = renderer.toneMapping;\n\t\tconst prevAlpha = renderer.getClearAlpha();\n\t\trenderer.getClearColor( prevColor );\n\n\t\t// resize the render target and ensure we don't have an empty texture\n\t\t// render target depth must be >= 1 to avoid unbound texture error on android devices\n\t\tconst depth = uniqueTextures.length || 1;\n\t\tthis.setSize( width, height, depth );\n\t\trenderer.setClearColor( 0, 0 );\n\t\trenderer.toneMapping = NoToneMapping;\n\n\t\t// render each texture into each layer of the target\n\t\tconst fsQuad = this.fsQuad;\n\t\tfor ( let i = 0, l = depth; i < l; i ++ ) {\n\n\t\t\tconst texture = uniqueTextures[ i ];\n\t\t\tif ( texture ) {\n\n\t\t\t\t// revert to default texture transform before rendering\n\t\t\t\ttexture.matrixAutoUpdate = false;\n\t\t\t\ttexture.matrix.identity();\n\n\t\t\t\tfsQuad.material.map = texture;\n\t\t\t\tfsQuad.material.transparent = true;\n\n\t\t\t\trenderer.setRenderTarget( this, i );\n\t\t\t\tfsQuad.render( renderer );\n\n\t\t\t\t// restore custom texture transform\n\t\t\t\ttexture.updateMatrix();\n\t\t\t\ttexture.matrixAutoUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// reset the renderer\n\t\tfsQuad.material.map = null;\n\t\trenderer.setClearColor( prevColor, prevAlpha );\n\t\trenderer.setRenderTarget( prevRenderTarget );\n\t\trenderer.toneMapping = prevToneMapping;\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n","export const cameraStructGLSL = /* glsl */`\n\n\tstruct PhysicalCamera {\n\n\t\tfloat focusDistance;\n\t\tfloat anamorphicRatio;\n\t\tfloat bokehSize;\n\t\tint apertureBlades;\n\t\tfloat apertureRotation;\n\n\t};\n\n`;\n","export const equirectStructGLSL = /* glsl */`\n\n\tstruct EquirectHdrInfo {\n\n\t\tsampler2D marginalWeights;\n\t\tsampler2D conditionalWeights;\n\t\tsampler2D map;\n\n\t\tfloat totalSumWhole;\n\t\tfloat totalSumDecimal;\n\n\t};\n\n`;\n","export const lightsStructGLSL = /* glsl */`\n\n\t#define RECT_AREA_LIGHT_TYPE 0\n\t#define CIRC_AREA_LIGHT_TYPE 1\n\t#define SPOT_LIGHT_TYPE 2\n\t#define DIR_LIGHT_TYPE 3\n\t#define POINT_LIGHT_TYPE 4\n\n\tstruct LightsInfo {\n\n\t\tsampler2D tex;\n\t\tuint count;\n\n\t};\n\n\tstruct Light {\n\n\t\tvec3 position;\n\t\tint type;\n\n\t\tvec3 color;\n\t\tfloat intensity;\n\n\t\tvec3 u;\n\t\tvec3 v;\n\t\tfloat area;\n\n\t\t// spot light fields\n\t\tfloat radius;\n\t\tfloat near;\n\t\tfloat decay;\n\t\tfloat distance;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint iesProfile;\n\n\t};\n\n\tLight readLightInfo( sampler2D tex, uint index ) {\n\n\t\tuint i = index * 6u;\n\n\t\tvec4 s0 = texelFetch1D( tex, i + 0u );\n\t\tvec4 s1 = texelFetch1D( tex, i + 1u );\n\t\tvec4 s2 = texelFetch1D( tex, i + 2u );\n\t\tvec4 s3 = texelFetch1D( tex, i + 3u );\n\n\t\tLight l;\n\t\tl.position = s0.rgb;\n\t\tl.type = int( round( s0.a ) );\n\n\t\tl.color = s1.rgb;\n\t\tl.intensity = s1.a;\n\n\t\tl.u = s2.rgb;\n\t\tl.v = s3.rgb;\n\t\tl.area = s3.a;\n\n\t\tif ( l.type == SPOT_LIGHT_TYPE || l.type == POINT_LIGHT_TYPE ) {\n\n\t\t\tvec4 s4 = texelFetch1D( tex, i + 4u );\n\t\t\tvec4 s5 = texelFetch1D( tex, i + 5u );\n\t\t\tl.radius = s4.r;\n\t\t\tl.near = s4.g;\n\t\t\tl.decay = s4.b;\n\t\t\tl.distance = s4.a;\n\n\t\t\tl.coneCos = s5.r;\n\t\t\tl.penumbraCos = s5.g;\n\t\t\tl.iesProfile = int( round ( s5.b ) );\n\n\t\t}\n\n\t\treturn l;\n\n\t}\n\n`;\n","export const fogMaterialBvhGLSL = /* glsl */`\n\n#ifndef FOG_CHECK_ITERATIONS\n#define FOG_CHECK_ITERATIONS 30\n#endif\n\n// returns whether the given material is a fog material or not\nbool isMaterialFogVolume( sampler2D materials, uint materialIndex ) {\n\n\tuint i = materialIndex * 45u;\n\tvec4 s14 = texelFetch1D( materials, i + 14u );\n\treturn bool( int( s14.b ) & 4 );\n\n}\n\n// returns true if we're within the first fog volume we hit\nbool bvhIntersectFogVolumeHit(\n\tBVH bvh, vec3 rayOrigin, vec3 rayDirection,\n\tusampler2D materialIndexAttribute, sampler2D materials,\n\tout Material material\n) {\n\n\tmaterial.fogVolume = false;\n\n\tfor ( int i = 0; i < FOG_CHECK_ITERATIONS; i ++ ) {\n\n\t\t// find nearest hit\n\t\tuvec4 faceIndices = uvec4( 0u );\n\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\tvec3 barycoord = vec3( 0.0 );\n\t\tfloat side = 1.0;\n\t\tfloat dist = 0.0;\n\t\tbool hit = bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\n\t\tif ( hit ) {\n\n\t\t\t// if it's a fog volume return whether we hit the front or back face\n\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\tif ( isMaterialFogVolume( materials, materialIndex ) ) {\n\n\t\t\t\tmaterial = readMaterialInfo( materials, materialIndex );\n\t\t\t\treturn side == - 1.0;\n\n\t\t\t} else {\n\n\t\t\t\t// move the ray forward\n\t\t\t\trayOrigin = stepRayOrigin( rayOrigin, rayDirection, - faceNormal, dist );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\n`;\n","import { ggxGLSL } from './ggx.glsl.js';\nimport { sheenGLSL } from './sheen.glsl.js';\nimport { iridescenceGLSL } from './iridescence.glsl.js';\n\n/*\nwi     : incident vector or light vector (pointing toward the light)\nwo     : outgoing vector or view vector (pointing towards the camera)\nwh     : computed half vector from wo and wi\nEval   : Get the color and pdf for a direction\nSample : Get the direction, color, and pdf for a sample\neta    : Greek character used to denote the \"ratio of ior\"\nf0     : Amount of light reflected when looking at a surface head on - \"fresnel 0\"\nf90    : Amount of light reflected at grazing angles\n*/\n\nexport const bsdfSamplingGLSL = /* glsl */`\n\n\tstruct SurfaceRecord {\n\n\t\t// surface type\n\t\tbool volumeParticle;\n\n\t\t// geometry\n\t\tvec3 faceNormal;\n\t\tbool frontFace;\n\t\tvec3 normal;\n\n\t\t// cached properties\n\t\tfloat eta;\n\t\tfloat f0;\n\n\t\t// material\n\t\tfloat roughness;\n\t\tfloat filteredRoughness;\n\t\tfloat metalness;\n\t\tvec3 color;\n\t\tvec3 emission;\n\n\t\t// transmission\n\t\tfloat ior;\n\t\tfloat transmission;\n\t\tbool thinFilm;\n\t\tvec3 attenuationColor;\n\t\tfloat attenuationDistance;\n\n\t\t// clearcoat\n\t\tvec3 clearcoatNormal;\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tfloat filteredClearcoatRoughness;\n\n\t\t// sheen\n\t\tfloat sheen;\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\n\t\t// iridescence\n\t\tfloat iridescence;\n\t\tfloat iridescenceIor;\n\t\tfloat iridescenceThickness;\n\n\t\t// specular\n\t\tvec3 specularColor;\n\t\tfloat specularIntensity;\n\t};\n\n\tstruct ScatterRecord {\n\t\tfloat specularPdf;\n\t\tfloat pdf;\n\n\t\tvec3 direction;\n\t\tvec3 clearcoatDirection;\n\n\t\tvec3 color;\n\t};\n\n\t${ ggxGLSL }\n\t${ sheenGLSL }\n\t${ iridescenceGLSL }\n\n\t// diffuse\n\tfloat diffuseEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, out vec3 color ) {\n\n\t\t// https://schuttejoe.github.io/post/disneybsdf/\n\t\tfloat fl = schlickFresnel( wi.z, 0.0 );\n\t\tfloat fv = schlickFresnel( wo.z, 0.0 );\n\n\t\tfloat metalFactor = ( 1.0 - surf.metalness );\n\t\tfloat transFactor = ( 1.0 - surf.transmission );\n\t\tfloat rr = 0.5 + 2.0 * surf.roughness * fl * fl;\n\t\tfloat retro = rr * ( fl + fv + fl * fv * ( rr - 1.0f ) );\n\t\tfloat lambert = ( 1.0f - 0.5f * fl ) * ( 1.0f - 0.5f * fv );\n\n\t\t// TODO: subsurface approx?\n\n\t\tfloat F = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );\n\t\tcolor = ( 1.0 - F ) * transFactor * metalFactor * wi.z * surf.color * ( retro + lambert ) / PI;\n\t\treturn wi.z / PI;\n\n\t}\n\n\tvec3 diffuseDirection( vec3 wo, SurfaceRecord surf ) {\n\n\t\tvec3 lightDirection = sampleSphere( sobol2( 11 ) );\n\t\tlightDirection.z += 1.0;\n\t\tlightDirection = normalize( lightDirection );\n\n\t\treturn lightDirection;\n\n\t}\n\n\t// specular\n\tfloat specularEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, out vec3 color ) {\n\n\t\t// if roughness is set to 0 then D === NaN which results in black pixels\n\t\tfloat metalness = surf.metalness;\n\t\tfloat roughness = surf.filteredRoughness;\n\n\t\tfloat eta = surf.eta;\n\t\tfloat f0 = surf.f0;\n\n\t\tvec3 f0Color = mix( f0 * surf.specularColor * surf.specularIntensity, surf.color, surf.metalness );\n\t\tvec3 f90Color = vec3( mix( surf.specularIntensity, 1.0, surf.metalness ) );\n\t\tvec3 F = evaluateFresnel( dot( wo, wh ), eta, f0Color, f90Color );\n\n\t\tvec3 iridescenceF = evalIridescence( 1.0, surf.iridescenceIor, dot( wi, wh ), surf.iridescenceThickness, f0Color );\n\t\tF = mix( F, iridescenceF,  surf.iridescence );\n\n\t\t// PDF\n\t\t// See 14.1.1 Microfacet BxDFs in https://www.pbr-book.org/\n\t\tfloat incidentTheta = acos( wo.z );\n\t\tfloat G = ggxShadowMaskG2( wi, wo, roughness );\n\t\tfloat D = ggxDistribution( wh, roughness );\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\t\tfloat ggxPdf = D * G1 * max( 0.0, abs( dot( wo, wh ) ) ) / abs ( wo.z );\n\n\t\tcolor = wi.z * F * G * D / ( 4.0 * abs( wi.z * wo.z ) );\n\t\treturn ggxPdf / ( 4.0 * dot( wo, wh ) );\n\n\t}\n\n\tvec3 specularDirection( vec3 wo, SurfaceRecord surf ) {\n\n\t\t// sample ggx vndf distribution which gives a new normal\n\t\tfloat roughness = surf.filteredRoughness;\n\t\tvec3 halfVector = ggxDirection(\n\t\t\two,\n\t\t\tvec2( roughness ),\n\t\t\tsobol2( 12 )\n\t\t);\n\n\t\t// apply to new ray by reflecting off the new normal\n\t\treturn - reflect( wo, halfVector );\n\n\t}\n\n\n\t// transmission\n\t/*\n\tfloat transmissionEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, out vec3 color ) {\n\n\t\t// See section 4.2 in https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\n\t\tfloat filteredRoughness = surf.filteredRoughness;\n\t\tfloat eta = surf.eta;\n\t\tbool frontFace = surf.frontFace;\n\t\tbool thinFilm = surf.thinFilm;\n\n\t\tcolor = surf.transmission * surf.color;\n\n\t\tfloat denom = pow( eta * dot( wi, wh ) + dot( wo, wh ), 2.0 );\n\t\treturn ggxPDF( wo, wh, filteredRoughness ) / denom;\n\n\t}\n\n\tvec3 transmissionDirection( vec3 wo, SurfaceRecord surf ) {\n\n\t\tfloat filteredRoughness = surf.filteredRoughness;\n\t\tfloat eta = surf.eta;\n\t\tbool frontFace = surf.frontFace;\n\n\t\t// sample ggx vndf distribution which gives a new normal\n\t\tvec3 halfVector = ggxDirection(\n\t\t\two,\n\t\t\tvec2( filteredRoughness ),\n\t\t\tsobol2( 13 )\n\t\t);\n\n\t\tvec3 lightDirection = refract( normalize( - wo ), halfVector, eta );\n\t\tif ( surf.thinFilm ) {\n\n\t\t\tlightDirection = - refract( normalize( - lightDirection ), - vec3( 0.0, 0.0, 1.0 ), 1.0 / eta );\n\n\t\t}\n\n\t\treturn normalize( lightDirection );\n\n\t}\n\t*/\n\n\t// TODO: This is just using a basic cosine-weighted specular distribution with an\n\t// incorrect PDF value at the moment. Update it to correctly use a GGX distribution\n\tfloat transmissionEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, out vec3 color ) {\n\n\t\tcolor = surf.transmission * surf.color;\n\n\t\t// PDF\n\t\tfloat F = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );\n\t\tif ( F >= 1.0 ) {\n\n\t\t\treturn 0.0;\n\n\t\t}\n\n\t\treturn 1.0 / ( 1.0 - F );\n\n\t}\n\n\tvec3 transmissionDirection( vec3 wo, SurfaceRecord surf ) {\n\n\t\tfloat roughness = surf.filteredRoughness;\n\t\tfloat eta = surf.eta;\n\t\tvec3 halfVector = normalize( vec3( 0.0, 0.0, 1.0 ) + sampleSphere( sobol2( 13 ) ) * roughness );\n\t\tvec3 lightDirection = refract( normalize( - wo ), halfVector, eta );\n\n\t\tif ( surf.thinFilm ) {\n\n\t\t\tlightDirection = - refract( normalize( - lightDirection ), - vec3( 0.0, 0.0, 1.0 ), 1.0 / eta );\n\n\t\t}\n\t\treturn normalize( lightDirection );\n\n\t}\n\n\t// clearcoat\n\tfloat clearcoatEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {\n\n\t\tfloat ior = 1.5;\n\t\tfloat f0 = iorRatioToF0( ior );\n\t\tbool frontFace = surf.frontFace;\n\t\tfloat roughness = surf.filteredClearcoatRoughness;\n\n\t\tfloat eta = frontFace ? 1.0 / ior : ior;\n\t\tfloat G = ggxShadowMaskG2( wi, wo, roughness );\n\t\tfloat D = ggxDistribution( wh, roughness );\n\t\tfloat F = schlickFresnel( dot( wi, wh ), f0 );\n\n\t\tfloat fClearcoat = F * D * G / ( 4.0 * abs( wi.z * wo.z ) );\n\t\tcolor = color * ( 1.0 - surf.clearcoat * F ) + fClearcoat * surf.clearcoat * wi.z;\n\n\t\t// PDF\n\t\t// See equation (27) in http://jcgt.org/published/0003/02/03/\n\t\treturn ggxPDF( wo, wh, roughness ) / ( 4.0 * dot( wi, wh ) );\n\n\t}\n\n\tvec3 clearcoatDirection( vec3 wo, SurfaceRecord surf ) {\n\n\t\t// sample ggx vndf distribution which gives a new normal\n\t\tfloat roughness = surf.filteredClearcoatRoughness;\n\t\tvec3 halfVector = ggxDirection(\n\t\t\two,\n\t\t\tvec2( roughness ),\n\t\t\tsobol2( 14 )\n\t\t);\n\n\t\t// apply to new ray by reflecting off the new normal\n\t\treturn - reflect( wo, halfVector );\n\n\t}\n\n\t// sheen\n\tvec3 sheenColor( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf ) {\n\n\t\tfloat cosThetaO = saturateCos( wo.z );\n\t\tfloat cosThetaI = saturateCos( wi.z );\n\t\tfloat cosThetaH = wh.z;\n\n\t\tfloat D = velvetD( cosThetaH, surf.sheenRoughness );\n\t\tfloat G = velvetG( cosThetaO, cosThetaI, surf.sheenRoughness );\n\n\t\t// See equation (1) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\n\t\tvec3 color = surf.sheenColor;\n\t\tcolor *= D * G / ( 4.0 * abs( cosThetaO * cosThetaI ) );\n\t\tcolor *= wi.z;\n\n\t\treturn color;\n\n\t}\n\n\t// bsdf\n\tvoid getLobeWeights(\n\t\tvec3 wo, vec3 wi, vec3 wh, vec3 clearcoatWo, SurfaceRecord surf,\n\t\tout float diffuseWeight, out float specularWeight, out float transmissionWeight, out float clearcoatWeight\n\t) {\n\n\t\tfloat metalness = surf.metalness;\n\t\tfloat transmission = surf.transmission;\n\t\tfloat fEstimate = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );\n\n\t\tfloat transSpecularProb = mix( max( 0.25, fEstimate ), 1.0, metalness );\n\t\tfloat diffSpecularProb = 0.5 + 0.5 * metalness;\n\n\t\tdiffuseWeight = ( 1.0 - transmission ) * ( 1.0 - diffSpecularProb );\n\t\tspecularWeight = transmission * transSpecularProb + ( 1.0 - transmission ) * diffSpecularProb;\n\t\ttransmissionWeight = transmission * ( 1.0 - transSpecularProb );\n\t\tclearcoatWeight = surf.clearcoat * schlickFresnel( clearcoatWo.z, 0.04 );\n\n\t\tfloat totalWeight = diffuseWeight + specularWeight + transmissionWeight + clearcoatWeight;\n\t\tdiffuseWeight /= totalWeight;\n\t\tspecularWeight /= totalWeight;\n\t\ttransmissionWeight /= totalWeight;\n\t\tclearcoatWeight /= totalWeight;\n\t}\n\n\tfloat bsdfEval(\n\t\tvec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRecord surf,\n\t\tfloat diffuseWeight, float specularWeight, float transmissionWeight, float clearcoatWeight, out float specularPdf, out vec3 color\n\t) {\n\n\t\tfloat metalness = surf.metalness;\n\t\tfloat transmission = surf.transmission;\n\n\t\tfloat spdf = 0.0;\n\t\tfloat dpdf = 0.0;\n\t\tfloat tpdf = 0.0;\n\t\tfloat cpdf = 0.0;\n\t\tcolor = vec3( 0.0 );\n\n\t\tvec3 halfVector = getHalfVector( wi, wo, surf.eta );\n\n\t\t// diffuse\n\t\tif ( diffuseWeight > 0.0 && wi.z > 0.0 ) {\n\n\t\t\tdpdf = diffuseEval( wo, wi, halfVector, surf, color );\n\t\t\tcolor *= 1.0 - surf.transmission;\n\n\t\t}\n\n\t\t// ggx specular\n\t\tif ( specularWeight > 0.0 && wi.z > 0.0 ) {\n\n\t\t\tvec3 outColor;\n\t\t\tspdf = specularEval( wo, wi, getHalfVector( wi, wo ), surf, outColor );\n\t\t\tcolor += outColor;\n\n\t\t}\n\n\t\t// transmission\n\t\tif ( transmissionWeight > 0.0 && wi.z < 0.0 ) {\n\n\t\t\ttpdf = transmissionEval( wo, wi, halfVector, surf, color );\n\n\t\t}\n\n\t\t// sheen\n\t\tcolor *= mix( 1.0, sheenAlbedoScaling( wo, wi, surf ), surf.sheen );\n\t\tcolor += sheenColor( wo, wi, halfVector, surf ) * surf.sheen;\n\n\t\t// clearcoat\n\t\tif ( clearcoatWi.z >= 0.0 && clearcoatWeight > 0.0 ) {\n\n\t\t\tvec3 clearcoatHalfVector = getHalfVector( clearcoatWo, clearcoatWi );\n\t\t\tcpdf = clearcoatEval( clearcoatWo, clearcoatWi, clearcoatHalfVector, surf, color );\n\n\t\t}\n\n\t\tfloat pdf =\n\t\t\tdpdf * diffuseWeight\n\t\t\t+ spdf * specularWeight\n\t\t\t+ tpdf * transmissionWeight\n\t\t\t+ cpdf * clearcoatWeight;\n\n\t\t// retrieve specular rays for the shadows flag\n\t\tspecularPdf = spdf * specularWeight + cpdf * clearcoatWeight;\n\n\t\treturn pdf;\n\n\t}\n\n\tfloat bsdfResult( vec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRecord surf, out vec3 color ) {\n\n\t\tif ( surf.volumeParticle ) {\n\n\t\t\tcolor = surf.color / ( 4.0 * PI );\n\t\t\treturn 1.0 / ( 4.0 * PI );\n\n\t\t}\n\n\t\tvec3 wh = getHalfVector( wo, wi, surf.eta );\n\t\tfloat diffuseWeight;\n\t\tfloat specularWeight;\n\t\tfloat transmissionWeight;\n\t\tfloat clearcoatWeight;\n\t\tgetLobeWeights( wo, wi, wh, clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\n\t\tfloat specularPdf;\n\t\treturn bsdfEval( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight, specularPdf, color );\n\n\t}\n\n\tScatterRecord bsdfSample( vec3 wo, vec3 clearcoatWo, mat3 normalBasis, mat3 invBasis, mat3 clearcoatNormalBasis, mat3 clearcoatInvBasis, SurfaceRecord surf ) {\n\n\t\tif ( surf.volumeParticle ) {\n\n\t\t\tvec3 wi = sampleSphere( sobol2( 16 ) );\n\t\t\tvec3 wh = normalize( wo + wi );\n\n\t\t\tScatterRecord sampleRec;\n\t\t\tsampleRec.specularPdf = 0.0;\n\t\t\tsampleRec.pdf = 1.0 / ( 4.0 * PI );\n\t\t\tsampleRec.direction = wi;\n\t\t\tsampleRec.clearcoatDirection = wi;\n\t\t\tsampleRec.color = surf.color / ( 4.0 * PI );\n\t\t\treturn sampleRec;\n\n\t\t}\n\n\t\tfloat diffuseWeight;\n\t\tfloat specularWeight;\n\t\tfloat transmissionWeight;\n\t\tfloat clearcoatWeight;\n\t\t// using normal and basically-reflected ray since we don't have proper half vector here\n\t\tgetLobeWeights( wo, wo, vec3( 0, 0, 1 ), clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\n\t\tfloat pdf[4];\n\t\tpdf[0] = diffuseWeight;\n\t\tpdf[1] = specularWeight;\n\t\tpdf[2] = transmissionWeight;\n\t\tpdf[3] = clearcoatWeight;\n\n\t\tfloat cdf[4];\n\t\tcdf[0] = pdf[0];\n\t\tcdf[1] = pdf[1] + cdf[0];\n\t\tcdf[2] = pdf[2] + cdf[1];\n\t\tcdf[3] = pdf[3] + cdf[2];\n\n\t\tif( cdf[3] != 0.0 ) {\n\n\t\t\tfloat invMaxCdf = 1.0 / cdf[3];\n\t\t\tcdf[0] *= invMaxCdf;\n\t\t\tcdf[1] *= invMaxCdf;\n\t\t\tcdf[2] *= invMaxCdf;\n\t\t\tcdf[3] *= invMaxCdf;\n\n\t\t} else {\n\n\t\t\tcdf[0] = 1.0;\n\t\t\tcdf[1] = 0.0;\n\t\t\tcdf[2] = 0.0;\n\t\t\tcdf[3] = 0.0;\n\n\t\t}\n\n\t\tvec3 wi;\n\t\tvec3 clearcoatWi;\n\n\t\tfloat r = sobol( 15 );\n\t\tif ( r <= cdf[0] ) { // diffuse\n\n\t\t\twi = diffuseDirection( wo, surf );\n\t\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t\t} else if ( r <= cdf[1] ) { // specular\n\n\t\t\twi = specularDirection( wo, surf );\n\t\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t\t} else if ( r <= cdf[2] ) { // transmission / refraction\n\n\t\t\twi = transmissionDirection( wo, surf );\n\t\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t\t} else if ( r <= cdf[3] ) { // clearcoat\n\n\t\t\tclearcoatWi = clearcoatDirection( clearcoatWo, surf );\n\t\t\twi = normalize( invBasis * normalize( clearcoatNormalBasis * clearcoatWi ) );\n\n\t\t}\n\n\t\tScatterRecord result;\n\t\tresult.pdf = bsdfEval( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight, result.specularPdf, result.color );\n\t\tresult.direction = wi;\n\t\tresult.clearcoatDirection = clearcoatWi;\n\n\t\treturn result;\n\n\t}\n\n`;\n","export const ggxGLSL = /* glsl */`\n\n\t// The GGX functions provide sampling and distribution information for normals as output so\n\t// in order to get probability of scatter direction the half vector must be computed and provided.\n\t// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\t// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n\t// [2] http://jcgt.org/published/0007/04/01/\n\t// [4] http://jcgt.org/published/0003/02/03/\n\n\t// trowbridge-reitz === GGX === GTR\n\n\tvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\n\n\t\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t\t// function below, as well\n\n\t\t// Implementation from reference [1]\n\t\t// stretch view\n\t\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\n\n\t\t// orthonormal basis\n\t\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\t\tvec3 T2 = cross( T1, V );\n\n\t\t// sample point with polar coordinates (r, phi)\n\t\tfloat a = 1.0 / ( 1.0 + V.z );\n\t\tfloat r = sqrt( uv.x );\n\t\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\n\t\tfloat P1 = r * cos( phi );\n\t\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\n\n\t\t// compute normal\n\t\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t\t// unstretch\n\t\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\n\n\t\treturn N;\n\n\t}\n\n\t// Below are PDF and related functions for use in a Monte Carlo path tracer\n\t// as specified in Appendix B of the following paper\n\t// See equation (34) from reference [0]\n\tfloat ggxLamda( float theta, float roughness ) {\n\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = tanTheta * tanTheta;\n\t\tfloat alpha2 = roughness * roughness;\n\n\t\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\t\treturn numerator / 2.0;\n\n\t}\n\n\t// See equation (34) from reference [0]\n\tfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\t\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n\t}\n\n\t// See equation (125) from reference [4]\n\tfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat scatterTheta = acos( wo.z );\n\t\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n\t}\n\n\t// See equation (33) from reference [0]\n\tfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\t\tfloat a2 = roughness * roughness;\n\t\ta2 = max( EPSILON, a2 );\n\t\tfloat cosTheta = halfVector.z;\n\t\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\t\tif ( cosTheta == 0.0 ) return 0.0;\n\n\t\tfloat theta = acosSafe( halfVector.z );\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\t\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\t\treturn ( a2 / denom );\n\n\t}\n\n\t// See equation (3) from reference [2]\n\tfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat D = ggxDistribution( halfVector, roughness );\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\t\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n\t}\n\n`;\n","export const sheenGLSL = /* glsl */`\n\n\t// See equation (2) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\n\tfloat velvetD( float cosThetaH, float roughness ) {\n\n\t\tfloat alpha = max( roughness, 0.07 );\n\t\talpha = alpha * alpha;\n\n\t\tfloat invAlpha = 1.0 / alpha;\n\n\t\tfloat sqrCosThetaH = cosThetaH * cosThetaH;\n\t\tfloat sinThetaH = max( 1.0 - sqrCosThetaH, 0.001 );\n\n\t\treturn ( 2.0 + invAlpha ) * pow( sinThetaH, 0.5 * invAlpha ) / ( 2.0 * PI );\n\n\t}\n\n\tfloat velvetParamsInterpolate( int i, float oneMinusAlphaSquared ) {\n\n\t\tconst float p0[5] = float[5]( 25.3245, 3.32435, 0.16801, -1.27393, -4.85967 );\n\t\tconst float p1[5] = float[5]( 21.5473, 3.82987, 0.19823, -1.97760, -4.32054 );\n\n\t\treturn mix( p1[i], p0[i], oneMinusAlphaSquared );\n\n\t}\n\n\tfloat velvetL( float x, float alpha ) {\n\n\t\tfloat oneMinusAlpha = 1.0 - alpha;\n\t\tfloat oneMinusAlphaSquared = oneMinusAlpha * oneMinusAlpha;\n\n\t\tfloat a = velvetParamsInterpolate( 0, oneMinusAlphaSquared );\n\t\tfloat b = velvetParamsInterpolate( 1, oneMinusAlphaSquared );\n\t\tfloat c = velvetParamsInterpolate( 2, oneMinusAlphaSquared );\n\t\tfloat d = velvetParamsInterpolate( 3, oneMinusAlphaSquared );\n\t\tfloat e = velvetParamsInterpolate( 4, oneMinusAlphaSquared );\n\n\t\treturn a / ( 1.0 + b * pow( abs( x ), c ) ) + d * x + e;\n\n\t}\n\n\t// See equation (3) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\n\tfloat velvetLambda( float cosTheta, float alpha ) {\n\n\t\treturn abs( cosTheta ) < 0.5 ? exp( velvetL( cosTheta, alpha ) ) : exp( 2.0 * velvetL( 0.5, alpha ) - velvetL( 1.0 - cosTheta, alpha ) );\n\n\t}\n\n\t// See Section 3, Shadowing Term, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\n\tfloat velvetG( float cosThetaO, float cosThetaI, float roughness ) {\n\n\t\tfloat alpha = max( roughness, 0.07 );\n\t\talpha = alpha * alpha;\n\n\t\treturn 1.0 / ( 1.0 + velvetLambda( cosThetaO, alpha ) + velvetLambda( cosThetaI, alpha ) );\n\n\t}\n\n\tfloat directionalAlbedoSheen( float cosTheta, float alpha ) {\n\n\t\tcosTheta = saturate( cosTheta );\n\n\t\tfloat c = 1.0 - cosTheta;\n\t\tfloat c3 = c * c * c;\n\n\t\treturn 0.65584461 * c3 + 1.0 / ( 4.16526551 + exp( -7.97291361 * sqrt( alpha ) + 6.33516894 ) );\n\n\t}\n\n\tfloat sheenAlbedoScaling( vec3 wo, vec3 wi, SurfaceRecord surf ) {\n\n\t\tfloat alpha = max( surf.sheenRoughness, 0.07 );\n\t\talpha = alpha * alpha;\n\n\t\tfloat maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );\n\n\t\tfloat eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );\n\t\tfloat eWi = directionalAlbedoSheen( saturateCos( wi.z ), alpha );\n\n\t\treturn min( 1.0 - maxSheenColor * eWo, 1.0 - maxSheenColor * eWi );\n\n\t}\n\n\t// See Section 5, Layering, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\n\tfloat sheenAlbedoScaling( vec3 wo, SurfaceRecord surf ) {\n\n\t\tfloat alpha = max( surf.sheenRoughness, 0.07 );\n\t\talpha = alpha * alpha;\n\n\t\tfloat maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );\n\n\t\tfloat eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );\n\n\t\treturn 1.0 - maxSheenColor * eWo;\n\n\t}\n\n`;\n","export const iridescenceGLSL = /* glsl */`\n\n\t// XYZ to sRGB color space\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\n\tvec3 fresnel0ToIor( vec3 fresnel0 ) {\n\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\n\t}\n\n\t// Conversion FO/IOR\n\tvec3 iorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\n\t\treturn square( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\n\t}\n\n\t// ior is a value between 1.0 and 3.0. 1.0 is air interface\n\tfloat iorToFresnel0( float transmittedIor, float incidentIor ) {\n\n\t\treturn square( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ) );\n\n\t}\n\n\t// Fresnel equations for dielectric/dielectric interfaces. See https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - square( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * square( phase ) );\n\t\txyz /= 1.0685e-7;\n\n\t\tvec3 srgb = XYZ_TO_REC709 * xyz;\n\t\treturn srgb;\n\n\t}\n\n\t// See Section 4. Analytic Spectral Integration, A Practical Extension to Microfacet Theory for the Modeling of Varying Iridescence, https://hal.archives-ouvertes.fr/hal-01518344/document\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\n\t\tvec3 I;\n\n\t\t// Force iridescenceIor -> outsideIOR when thinFilmThickness -> 0.0\n\t\tfloat iridescenceIor = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\n\t\t// Evaluate the cosTheta on the base layer (Snell law)\n\t\tfloat sinTheta2Sq = square( outsideIOR / iridescenceIor ) * ( 1.0 - square( cosTheta1 ) );\n\n\t\t// Handle TIR:\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\n\t\t\treturn vec3( 1.0 );\n\n\t\t}\n\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\n\t\t// First interface\n\t\tfloat R0 = iorToFresnel0( iridescenceIor, outsideIOR );\n\t\tfloat R12 = schlickFresnel( cosTheta1, R0 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIor < outsideIOR ) {\n\n\t\t\tphi12 = PI;\n\n\t\t}\n\n\t\tfloat phi21 = PI - phi12;\n\n\t\t// Second interface\n\t\tvec3 baseIOR = fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0\n\t\tvec3 R1 = iorToFresnel0( baseIOR, iridescenceIor );\n\t\tvec3 R23 = schlickFresnel( cosTheta2, R1 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[0] < iridescenceIor ) {\n\n\t\t\tphi23[ 0 ] = PI;\n\n\t\t}\n\n\t\tif ( baseIOR[1] < iridescenceIor ) {\n\n\t\t\tphi23[ 1 ] = PI;\n\n\t\t}\n\n\t\tif ( baseIOR[2] < iridescenceIor ) {\n\n\t\t\tphi23[ 2 ] = PI;\n\n\t\t}\n\n\t\t// Phase shift\n\t\tfloat OPD = 2.0 * iridescenceIor * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\n\t\t// Compound terms\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = square( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\n\t\t// Reflectance term for m = 0 (DC term amplitude)\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\n\t\t// Reflectance term for m > 0 (pairs of diracs)\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\n\t\t}\n\n\t\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\n\t\treturn max( I, vec3( 0.0 ) );\n\n\t}\n\n`;\n","export const fogGLSL = /* glsl */`\n\n\t// returns the hit distance given the material density\n\tfloat intersectFogVolume( Material material, float u ) {\n\n\t\t// https://raytracing.github.io/books/RayTracingTheNextWeek.html#volumes/constantdensitymediums\n\t\treturn material.opacity == 0.0 ? INFINITY : ( - 1.0 / material.opacity ) * log( u );\n\n\t}\n\n\tScatterRecord sampleFogVolume( SurfaceRecord surf, vec2 uv ) {\n\n\t\tScatterRecord sampleRec;\n\t\tsampleRec.specularPdf = 0.0;\n\t\tsampleRec.pdf = 1.0 / ( 2.0 * PI );\n\t\tsampleRec.direction = sampleSphere( uv );\n\t\tsampleRec.clearcoatDirection = sampleRec.direction;\n\t\tsampleRec.color = surf.color;\n\t\treturn sampleRec;\n\n\t}\n\n`;\n","export const equirectSamplingGLSL = /* glsl */`\n\n\t// samples the the given environment map in the given direction\n\tvec3 sampleEquirectColor( sampler2D envMap, vec3 direction ) {\n\n\t\treturn texture2D( envMap, equirectDirectionToUv( direction ) ).rgb;\n\n\t}\n\n\t// gets the pdf of the given direction to sample\n\tfloat equirectDirectionPdf( vec3 direction ) {\n\n\t\tvec2 uv = equirectDirectionToUv( direction );\n\t\tfloat theta = uv.y * PI;\n\t\tfloat sinTheta = sin( theta );\n\t\tif ( sinTheta == 0.0 ) {\n\n\t\t\treturn 0.0;\n\n\t\t}\n\n\t\treturn 1.0 / ( 2.0 * PI * PI * sinTheta );\n\n\t}\n\n\t// samples the color given env map with CDF and returns the pdf of the direction\n\tfloat sampleEquirect( EquirectHdrInfo info, vec3 direction, out vec3 color ) {\n\n\t\tvec2 uv = equirectDirectionToUv( direction );\n\t\tcolor = texture2D( info.map, uv ).rgb;\n\n\t\tfloat totalSum = info.totalSumWhole + info.totalSumDecimal;\n\t\tfloat lum = luminance( color );\n\t\tivec2 resolution = textureSize( info.map, 0 );\n\t\tfloat pdf = lum / totalSum;\n\n\t\treturn float( resolution.x * resolution.y ) * pdf * equirectDirectionPdf( direction );\n\n\t}\n\n\t// samples a direction of the envmap with color and retrieves pdf\n\tfloat sampleEquirectProbability( EquirectHdrInfo info, vec2 r, out vec3 color, out vec3 direction ) {\n\n\t\t// sample env map cdf\n\t\tfloat v = texture2D( info.marginalWeights, vec2( r.x, 0.0 ) ).x;\n\t\tfloat u = texture2D( info.conditionalWeights, vec2( r.y, v ) ).x;\n\t\tvec2 uv = vec2( u, v );\n\n\t\tvec3 derivedDirection = equirectUvToDirection( uv );\n\t\tdirection = derivedDirection;\n\t\tcolor = texture2D( info.map, uv ).rgb;\n\n\t\tfloat totalSum = info.totalSumWhole + info.totalSumDecimal;\n\t\tfloat lum = luminance( color );\n\t\tivec2 resolution = textureSize( info.map, 0 );\n\t\tfloat pdf = lum / totalSum;\n\n\t\treturn float( resolution.x * resolution.y ) * pdf * equirectDirectionPdf( direction );\n\n\t}\n\n`;\n","export const lightSamplingGLSL = /* glsl */`\n\n\tfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\n\t\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n\n\t}\n\n\tfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n\t\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t\t// page 32, equation 26: E[window1]\n\t\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), EPSILON );\n\n\t\tif ( cutoffDistance > 0.0 ) {\n\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t\t}\n\n\t\treturn distanceFalloff;\n\n\t}\n\n\tfloat getPhotometricAttenuation( sampler2DArray iesProfiles, int iesProfile, vec3 posToLight, vec3 lightDir, vec3 u, vec3 v ) {\n\n\t\tfloat cosTheta = dot( posToLight, lightDir );\n\t\tfloat angle = acos( cosTheta ) * ( 1.0 / PI );\n\n\t\treturn texture2D( iesProfiles, vec3( 0.0, angle, iesProfile ) ).r;\n\n\t}\n\n\tstruct LightSampleRecord {\n\n\t\tfloat dist;\n\t\tvec3 direction;\n\t\tfloat pdf;\n\t\tvec3 emission;\n\t\tint type;\n\n\t};\n\n\tbool lightsClosestHit( sampler2D lights, uint lightCount, vec3 rayOrigin, vec3 rayDirection, out LightSampleRecord lightSampleRec ) {\n\n\t\tbool didHit = false;\n\t\tuint l;\n\t\tfor ( l = 0u; l < lightCount; l ++ ) {\n\n\t\t\tLight light = readLightInfo( lights, l );\n\n\t\t\tvec3 u = light.u;\n\t\t\tvec3 v = light.v;\n\n\t\t\t// check for backface\n\t\t\tvec3 normal = normalize( cross( u, v ) );\n\t\t\tif ( dot( normal, rayDirection ) < 0.0 ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tu *= 1.0 / dot( u, u );\n\t\t\tv *= 1.0 / dot( v, v );\n\n\t\t\tfloat dist;\n\n\t\t\t// MIS / light intersection is not supported for punctual lights.\n\t\t\tif(\n\t\t\t\t( light.type == RECT_AREA_LIGHT_TYPE && intersectsRectangle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) ) ||\n\t\t\t\t( light.type == CIRC_AREA_LIGHT_TYPE && intersectsCircle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) )\n\t\t\t) {\n\n\t\t\t\tif ( ! didHit || dist < lightSampleRec.dist ) {\n\n\t\t\t\t\tfloat cosTheta = dot( rayDirection, normal );\n\t\t\t\t\tdidHit = true;\n\t\t\t\t\tlightSampleRec.dist = dist;\n\t\t\t\t\tlightSampleRec.pdf = ( dist * dist ) / ( light.area * cosTheta );\n\t\t\t\t\tlightSampleRec.emission = light.color * light.intensity;\n\t\t\t\t\tlightSampleRec.direction = rayDirection;\n\t\t\t\t\tlightSampleRec.type = light.type;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn didHit;\n\n\t}\n\n\tLightSampleRecord randomAreaLightSample( Light light, vec3 rayOrigin, vec2 ruv ) {\n\n\t\tLightSampleRecord lightSampleRec;\n\t\tlightSampleRec.type = light.type;\n\n\t\tlightSampleRec.emission = light.color * light.intensity;\n\n\t\tvec3 randomPos;\n\t\tif( light.type == RECT_AREA_LIGHT_TYPE ) {\n\n\t\t\t// rectangular area light\n\t\t\trandomPos = light.position + light.u * ( ruv.x - 0.5 ) + light.v * ( ruv.y - 0.5 );\n\n\t\t} else if( light.type == CIRC_AREA_LIGHT_TYPE ) {\n\n\t\t\t// circular area light\n\t\t\tfloat r = 0.5 * sqrt( ruv.x );\n\t\t\tfloat theta = ruv.y * 2.0 * PI;\n\t\t\tfloat x = r * cos( theta );\n\t\t\tfloat y = r * sin( theta );\n\n\t\t\trandomPos = light.position + light.u * x + light.v * y;\n\n\t\t}\n\n\t\tvec3 toLight = randomPos - rayOrigin;\n\t\tfloat lightDistSq = dot( toLight, toLight );\n\t\tlightSampleRec.dist = sqrt( lightDistSq );\n\n\t\tvec3 direction = toLight / lightSampleRec.dist;\n\t\tlightSampleRec.direction = direction;\n\n\t\tvec3 lightNormal = normalize( cross( light.u, light.v ) );\n\t\tlightSampleRec.pdf = lightDistSq / ( light.area * dot( direction, lightNormal ) );\n\n\t\treturn lightSampleRec;\n\n\t}\n\n\tLightSampleRecord randomSpotLightSample( Light light, sampler2DArray iesProfiles, vec3 rayOrigin, vec2 ruv ) {\n\n\t\tfloat radius = light.radius * sqrt( ruv.x );\n\t\tfloat theta = ruv.y * 2.0 * PI;\n\t\tfloat x = radius * cos( theta );\n\t\tfloat y = radius * sin( theta );\n\n\t\tvec3 u = light.u;\n\t\tvec3 v = light.v;\n\t\tvec3 normal = normalize( cross( u, v ) );\n\n\t\tfloat angle = acos( light.coneCos );\n\t\tfloat angleTan = tan( angle );\n\t\tfloat startDistance = light.radius / max( angleTan, EPSILON );\n\n\t\tvec3 randomPos = light.position - normal * startDistance + u * x + v * y;\n\t\tvec3 toLight = randomPos - rayOrigin;\n\t\tfloat lightDistSq = dot( toLight, toLight );\n\t\tfloat dist = sqrt( lightDistSq );\n\n\t\tvec3 direction = toLight / max( dist, EPSILON );\n\t\tfloat cosTheta = dot( direction, normal );\n\n\t\tfloat spotAttenuation = light.iesProfile != - 1 ?\n\t\t\tgetPhotometricAttenuation( iesProfiles, light.iesProfile, direction, normal, u, v ) :\n\t\t\tgetSpotAttenuation( light.coneCos, light.penumbraCos, cosTheta );\n\n\t\tfloat distanceAttenuation = getDistanceAttenuation( dist, light.distance, light.decay );\n\t\tLightSampleRecord lightSampleRec;\n\t\tlightSampleRec.type = light.type;\n\t\tlightSampleRec.dist = dist;\n\t\tlightSampleRec.direction = direction;\n\t\tlightSampleRec.emission = light.color * light.intensity * distanceAttenuation * spotAttenuation;\n\t\tlightSampleRec.pdf = 1.0;\n\n\t\treturn lightSampleRec;\n\n\t}\n\n\tLightSampleRecord randomLightSample( sampler2D lights, sampler2DArray iesProfiles, uint lightCount, vec3 rayOrigin, vec3 ruv ) {\n\n\t\t// pick a random light\n\t\tuint l = uint( ruv.x * float( lightCount ) );\n\t\tLight light = readLightInfo( lights, l );\n\n\t\tif ( light.type == SPOT_LIGHT_TYPE ) {\n\n\t\t\treturn randomSpotLightSample( light, iesProfiles, rayOrigin, ruv.yz );\n\n\t\t} else if ( light.type == POINT_LIGHT_TYPE ) {\n\n\t\t\tvec3 lightRay = light.u - rayOrigin;\n\t\t\tfloat lightDist = length( lightRay );\n\t\t\tfloat cutoffDistance = light.distance;\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDist, light.decay ), 0.01 );\n\t\t\tif ( cutoffDistance > 0.0 ) {\n\n\t\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDist / cutoffDistance ) ) );\n\n\t\t\t}\n\n\t\t\tLightSampleRecord rec;\n\t\t\trec.direction = normalize( lightRay );\n\t\t\trec.dist = length( lightRay );\n\t\t\trec.pdf = 1.0;\n\t\t\trec.emission = light.color * light.intensity * distanceFalloff;\n\t\t\trec.type = light.type;\n\t\t\treturn rec;\n\n\t\t} else if ( light.type == DIR_LIGHT_TYPE ) {\n\n\t\t\tLightSampleRecord rec;\n\t\t\trec.dist = 1e10;\n\t\t\trec.direction = light.u;\n\t\t\trec.pdf = 1.0;\n\t\t\trec.emission = light.color * light.intensity;\n\t\t\trec.type = light.type;\n\n\t\t\treturn rec;\n\n\t\t} else {\n\n\t\t\t// sample the light\n\t\t\treturn randomAreaLightSample( light, rayOrigin, ruv.yz );\n\n\t\t}\n\n\t}\n\n`;\n","export const intersectShapesGLSL = /* glsl */`\n\n\t// Finds the point where the ray intersects the plane defined by u and v and checks if this point\n\t// falls in the bounds of the rectangle on that same plane.\n\t// Plane intersection: https://lousodrome.net/blog/light/2020/07/03/intersection-of-a-ray-and-a-plane/\n\tbool intersectsRectangle( vec3 center, vec3 normal, vec3 u, vec3 v, vec3 rayOrigin, vec3 rayDirection, out float dist ) {\n\n\t\tfloat t = dot( center - rayOrigin, normal ) / dot( rayDirection, normal );\n\n\t\tif ( t > EPSILON ) {\n\n\t\t\tvec3 p = rayOrigin + rayDirection * t;\n\t\t\tvec3 vi = p - center;\n\n\t\t\t// check if p falls inside the rectangle\n\t\t\tfloat a1 = dot( u, vi );\n\t\t\tif ( abs( a1 ) <= 0.5 ) {\n\n\t\t\t\tfloat a2 = dot( v, vi );\n\t\t\t\tif ( abs( a2 ) <= 0.5 ) {\n\n\t\t\t\t\tdist = t;\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t// Finds the point where the ray intersects the plane defined by u and v and checks if this point\n\t// falls in the bounds of the circle on that same plane. See above URL for a description of the plane intersection algorithm.\n\tbool intersectsCircle( vec3 position, vec3 normal, vec3 u, vec3 v, vec3 rayOrigin, vec3 rayDirection, out float dist ) {\n\n\t\tfloat t = dot( position - rayOrigin, normal ) / dot( rayDirection, normal );\n\n\t\tif ( t > EPSILON ) {\n\n\t\t\tvec3 hit = rayOrigin + rayDirection * t;\n\t\t\tvec3 vi = hit - position;\n\n\t\t\tfloat a1 = dot( u, vi );\n\t\t\tfloat a2 = dot( v, vi );\n\n\t\t\tif( length( vec2( a1, a2 ) ) <= 0.5 ) {\n\n\t\t\t\tdist = t;\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n`;\n","export const mathGLSL = /* glsl */`\n\n\t// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.\n\t// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].\n\t// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248\n\tfloat acosApprox( float x ) {\n\n\t\tx = clamp( x, -1.0, 1.0 );\n\t\treturn ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;\n\n\t}\n\n\t// An acos with input values bound to the range [-1, 1].\n\tfloat acosSafe( float x ) {\n\n\t\treturn acos( clamp( x, -1.0, 1.0 ) );\n\n\t}\n\n\tfloat saturateCos( float val ) {\n\n\t\treturn clamp( val, 0.001, 1.0 );\n\n\t}\n\n\tfloat square( float t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 square( vec2 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec3 square( vec3 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec4 square( vec4 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 rotateVector( vec2 v, float t ) {\n\n\t\tfloat ac = cos( t );\n\t\tfloat as = sin( t );\n\t\treturn vec2(\n\t\t\tv.x * ac - v.y * as,\n\t\t\tv.x * as + v.y * ac\n\t\t);\n\n\t}\n\n\t// forms a basis with the normal vector as Z\n\tmat3 getBasisFromNormal( vec3 normal ) {\n\n\t\tvec3 other;\n\t\tif ( abs( normal.x ) > 0.5 ) {\n\n\t\t\tother = vec3( 0.0, 1.0, 0.0 );\n\n\t\t} else {\n\n\t\t\tother = vec3( 1.0, 0.0, 0.0 );\n\n\t\t}\n\n\t\tvec3 ortho = normalize( cross( normal, other ) );\n\t\tvec3 ortho2 = normalize( cross( normal, ortho ) );\n\t\treturn mat3( ortho2, ortho, normal );\n\n\t}\n\n`;\n","export const fresnelGLSL = /* glsl */`\n\n\tbool totalInternalReflection( float cosTheta, float eta ) {\n\n\t\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\t\treturn eta * sinTheta > 1.0;\n\n\t}\n\n\t// https://google.github.io/filament/Filament.md.html#materialsystem/diffusebrdf\n\tfloat schlickFresnel( float cosine, float f0 ) {\n\n\t\treturn f0 + ( 1.0 - f0 ) * pow( 1.0 - cosine, 5.0 );\n\n\t}\n\n\tvec3 schlickFresnel( float cosine, vec3 f0 ) {\n\n\t\treturn f0 + ( 1.0 - f0 ) * pow( 1.0 - cosine, 5.0 );\n\n\t}\n\n\tvec3 schlickFresnel( float cosine, vec3 f0, vec3 f90 ) {\n\n\t\treturn f0 + ( f90 - f0 ) * pow( 1.0 - cosine, 5.0 );\n\n\t}\n\n\tfloat dielectricFresnel( float cosThetaI, float eta ) {\n\n\t\t// https://schuttejoe.github.io/post/disneybsdf/\n\t\tfloat ni = eta;\n\t\tfloat nt = 1.0;\n\n\t\t// Check for total internal reflection\n\t\tfloat sinThetaISq = 1.0f - cosThetaI * cosThetaI;\n\t\tfloat sinThetaTSq = eta * eta * sinThetaISq;\n\t\tif( sinThetaTSq >= 1.0 ) {\n\n\t\t\treturn 1.0;\n\n\t\t}\n\n\t\tfloat sinThetaT = sqrt( sinThetaTSq );\n\n\t\tfloat cosThetaT = sqrt( max( 0.0, 1.0f - sinThetaT * sinThetaT ) );\n\t\tfloat rParallel = ( ( nt * cosThetaI ) - ( ni * cosThetaT ) ) / ( ( nt * cosThetaI ) + ( ni * cosThetaT ) );\n\t\tfloat rPerpendicular = ( ( ni * cosThetaI ) - ( nt * cosThetaT ) ) / ( ( ni * cosThetaI ) + ( nt * cosThetaT ) );\n\t\treturn ( rParallel * rParallel + rPerpendicular * rPerpendicular ) / 2.0;\n\n\t}\n\n\t// https://raytracing.github.io/books/RayTracingInOneWeekend.html#dielectrics/schlickapproximation\n\tfloat iorRatioToF0( float eta ) {\n\n\t\treturn pow( ( 1.0 - eta ) / ( 1.0 + eta ), 2.0 );\n\n\t}\n\n\tvec3 evaluateFresnel( float cosTheta, float eta, vec3 f0, vec3 f90 ) {\n\n\t\tif ( totalInternalReflection( cosTheta, eta ) ) {\n\n\t\t\treturn f90;\n\n\t\t}\n\n\t\treturn schlickFresnel( cosTheta, f0, f90 );\n\n\t}\n\n\tfloat evaluateFresnelWeight( float cosTheta, float eta, float f0 ) {\n\n\t\tif ( totalInternalReflection( cosTheta, eta ) ) {\n\n\t\t\treturn 1.0;\n\n\t\t}\n\n\t\treturn schlickFresnel( cosTheta, f0 );\n\n\t}\n\n\t/*\n\t// https://schuttejoe.github.io/post/disneybsdf/\n\tfloat disneyFresnel( vec3 wo, vec3 wi, vec3 wh, float f0, float eta, float metalness ) {\n\n\t\tfloat dotHV = dot( wo, wh );\n\t\tfloat dotHL = dot( wi, wh );\n\n\t\tfloat dielectricFresnel = dielectricFresnel( abs( dotHV ), eta );\n\t\tfloat metallicFresnel = schlickFresnel( dotHL, f0 );\n\n\t\treturn mix( dielectricFresnel, metallicFresnel, metalness );\n\n\t}\n\t*/\n`;\n","\nexport const arraySamplerTexelFetchGLSL = /*glsl */`\n\n\t// add texel fetch functions for texture arrays\n\tvec4 texelFetch1D( sampler2DArray tex, int layer, uint index ) {\n\n\t\tuint width = uint( textureSize( tex, 0 ).x );\n\t\tuvec2 uv;\n\t\tuv.x = index % width;\n\t\tuv.y = index / width;\n\n\t\treturn texelFetch( tex, ivec3( uv, layer ), 0 );\n\n\t}\n\n\tvec4 textureSampleBarycoord( sampler2DArray tex, int layer, vec3 barycoord, uvec3 faceIndices ) {\n\n\t\treturn\n\t\t\tbarycoord.x * texelFetch1D( tex, layer, faceIndices.x ) +\n\t\t\tbarycoord.y * texelFetch1D( tex, layer, faceIndices.y ) +\n\t\t\tbarycoord.z * texelFetch1D( tex, layer, faceIndices.z );\n\n\t}\n\n`;\n","export const cameraUtilsGLSL = /* glsl */`\n\n\tvec3 ndcToRayOrigin( vec2 coord ) {\n\n\t\tvec4 rayOrigin4 = cameraWorldMatrix * invProjectionMatrix * vec4( coord, - 1.0, 1.0 );\n\t\treturn rayOrigin4.xyz / rayOrigin4.w;\n\t}\n\n\tvoid getCameraRay( out vec3 rayDirection, out vec3 rayOrigin ) {\n\n\t\tvec2 ssd = vec2( 1.0 ) / resolution;\n\n\t\t// Jitter the camera ray by finding a uv coordinate at a random sample\n\t\t// around this pixel's UV coordinate for AA\n\t\tvec2 ruv = sobol2( 0 );\n\t\tvec2 jitteredUv = vUv + vec2( tentFilter( ruv.x ) * ssd.x, tentFilter( ruv.y ) * ssd.y );\n\n\t\t#if CAMERA_TYPE == 2\n\n\t\t\t// Equirectangular projection\n\t\t\tvec4 rayDirection4 = vec4( equirectUvToDirection( jitteredUv ), 0.0 );\n\t\t\tvec4 rayOrigin4 = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\trayDirection4 = cameraWorldMatrix * rayDirection4;\n\t\t\trayOrigin4 = cameraWorldMatrix * rayOrigin4;\n\n\t\t\trayDirection = normalize( rayDirection4.xyz );\n\t\t\trayOrigin = rayOrigin4.xyz / rayOrigin4.w;\n\n\t\t#else\n\n\t\t\t// get [- 1, 1] normalized device coordinates\n\t\t\tvec2 ndc = 2.0 * jitteredUv - vec2( 1.0 );\n\t\t\trayOrigin = ndcToRayOrigin( ndc );\n\n\t\t\t#if CAMERA_TYPE == 1\n\n\t\t\t\t// Orthographic projection\n\t\t\t\trayDirection = ( cameraWorldMatrix * vec4( 0.0, 0.0, - 1.0, 0.0 ) ).xyz;\n\t\t\t\trayDirection = normalize( rayDirection );\n\n\t\t\t#else\n\n\t\t\t\t// Perspective projection\n\t\t\t\trayDirection = normalize( mat3(cameraWorldMatrix) * ( invProjectionMatrix * vec4( ndc, 0.0, 1.0 ) ).xyz );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\t#if FEATURE_DOF\n\t\t{\n\n\t\t\t// depth of field\n\t\t\tvec3 focalPoint = rayOrigin + normalize( rayDirection ) * physicalCamera.focusDistance;\n\n\t\t\t// get the aperture sample\n\t\t\t// if blades === 0 then we assume a circle\n\t\t\tvec3 shapeUVW= sobol3( 1 );\n\t\t\tint blades = physicalCamera.apertureBlades;\n\t\t\tfloat anamorphicRatio = physicalCamera.anamorphicRatio;\n\t\t\tvec2 apertureSample = blades == 0 ? sampleCircle( shapeUVW.xy ) : sampleRegularPolygon( blades, shapeUVW );\n\t\t\tapertureSample *= physicalCamera.bokehSize * 0.5 * 1e-3;\n\n\t\t\t// rotate the aperture shape\n\t\t\tapertureSample =\n\t\t\t\trotateVector( apertureSample, physicalCamera.apertureRotation ) *\n\t\t\t\tsaturate( vec2( anamorphicRatio, 1.0 / anamorphicRatio ) );\n\n\t\t\t// create the new ray\n\t\t\trayOrigin += ( cameraWorldMatrix * vec4( apertureSample, 0.0, 0.0 ) ).xyz;\n\t\t\trayDirection = focalPoint - rayOrigin;\n\n\t\t}\n\t\t#endif\n\n\t\trayDirection = normalize( rayDirection );\n\n\t}\n\n`;\n","export const attenuateHitGLSL = /* glsl */`\n\n\t// step through multiple surface hits and accumulate color attenuation based on transmissive surfaces\n\t// returns true if a solid surface was hit\n\tbool attenuateHit(\n\t\tBVH bvh, vec3 rayOrigin, vec3 rayDirection, float rayDist,\n\t\tint traversals, int transmissiveTraversals, bool isShadowRay,\n\t\tMaterial fogMaterial,\n\t\tout vec3 color\n\t) {\n\n\t\tvec3 ogRayOrigin = rayOrigin;\n\n\t\t// hit results\n\t\tuvec4 faceIndices = uvec4( 0u );\n\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\tvec3 barycoord = vec3( 0.0 );\n\t\tfloat side = 1.0;\n\t\tfloat dist = 0.0;\n\t\tLightSampleRecord lightSampleRec;\n\n\t\tcolor = vec3( 1.0 );\n\n\t\t// TODO: we should be using sobol sampling here instead of rand but the sobol bounce and path indices need to be incremented\n\t\t// and then reset.\n\t\tfor ( int i = 0; i < traversals; i ++ ) {\n\n\t\t\tint hitType = traceScene(\n\t\t\t\trayOrigin, rayDirection,\n\t\t\t\tbvh, lights, fogMaterial,\n\t\t\t\tfaceIndices, faceNormal, barycoord, side, dist,\n\t\t\t\tlightSampleRec\n\t\t\t);\n\n\t\t\tif ( hitType == FOG_HIT ) {\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( hitType == LIGHT_HIT ) {\n\n\t\t\t\tfloat totalDist = distance( ogRayOrigin, rayOrigin + rayDirection * lightSampleRec.dist );\n\t\t\t\treturn totalDist < rayDist - max( totalDist, rayDist ) * 1e-4;\n\n\t\t\t} else if ( hitType == SURFACE_HIT ) {\n\n\t\t\t\tfloat totalDist = distance( ogRayOrigin, rayOrigin + rayDirection * dist );\n\t\t\t\tif ( totalDist > rayDist ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// TODO: attenuate the contribution based on the PDF of the resulting ray including refraction values\n\t\t\t\t// Should be able to work using the material BSDF functions which will take into account specularity, etc.\n\t\t\t\t// TODO: should we account for emissive surfaces here?\n\n\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\n\n\t\t\t\t// adjust the ray to the new surface\n\t\t\t\tbool isEntering = side == 1.0;\n\t\t\t\trayOrigin = stepRayOrigin( rayOrigin, rayDirection, - faceNormal, dist );\n\n\t\t\t\t#if FEATURE_FOG\n\n\t\t\t\tif ( material.fogVolume ) {\n\n\t\t\t\t\tfogMaterial = material;\n\t\t\t\t\tfogMaterial.fogVolume = side == 1.0;\n\t\t\t\t\ti -= sign( transmissiveTraversals );\n\t\t\t\t\ttransmissiveTraversals --;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvec2 uv = textureSampleBarycoord( attributesArray, ATTR_UV, barycoord, faceIndices.xyz ).xy;\n\t\t\t\tvec4 vertexColor = textureSampleBarycoord( attributesArray, ATTR_COLOR, barycoord, faceIndices.xyz );\n\n\t\t\t\t// albedo\n\t\t\t\tvec4 albedo = vec4( material.color, material.opacity );\n\t\t\t\tif ( material.map != - 1 ) {\n\n\t\t\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\n\t\t\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\talbedo *= vertexColor;\n\n\t\t\t\t}\n\n\t\t\t\t// alphaMap\n\t\t\t\tif ( material.alphaMap != - 1 ) {\n\n\t\t\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\n\n\t\t\t\t}\n\n\t\t\t\t// transmission\n\t\t\t\tfloat transmission = material.transmission;\n\t\t\t\tif ( material.transmissionMap != - 1 ) {\n\n\t\t\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\n\t\t\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\n\n\t\t\t\t}\n\n\t\t\t\t// metalness\n\t\t\t\tfloat metalness = material.metalness;\n\t\t\t\tif ( material.metalnessMap != - 1 ) {\n\n\t\t\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\n\n\t\t\t\t}\n\n\t\t\t\tfloat alphaTest = material.alphaTest;\n\t\t\t\tbool useAlphaTest = alphaTest != 0.0;\n\t\t\t\tfloat transmissionFactor = ( 1.0 - metalness ) * transmission;\n\t\t\t\tif (\n\t\t\t\t\ttransmissionFactor < rand() && ! (\n\t\t\t\t\t\t// material sidedness\n\t\t\t\t\t\tmaterial.side != 0.0 && side == material.side\n\n\t\t\t\t\t\t// alpha test\n\t\t\t\t\t\t|| useAlphaTest && albedo.a < alphaTest\n\n\t\t\t\t\t\t// opacity\n\t\t\t\t\t\t|| material.transparent && ! useAlphaTest && albedo.a < rand()\n\t\t\t\t\t)\n\t\t\t\t) {\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( side == 1.0 && isEntering ) {\n\n\t\t\t\t\t// only attenuate by surface color on the way in\n\t\t\t\t\tcolor *= mix( vec3( 1.0 ), albedo.rgb, transmissionFactor );\n\n\t\t\t\t} else if ( side == - 1.0 ) {\n\n\t\t\t\t\t// attenuate by medium once we hit the opposite side of the model\n\t\t\t\t\tcolor *= transmissionAttenuation( dist, material.attenuationColor, material.attenuationDistance );\n\n\t\t\t\t}\n\n\t\t\t\tbool isTransmissiveRay = dot( rayDirection, faceNormal * side ) < 0.0;\n\t\t\t\tif ( ( isTransmissiveRay || isEntering ) && transmissiveTraversals > 0 ) {\n\n\t\t\t\t\ti -= sign( transmissiveTraversals );\n\t\t\t\t\ttransmissiveTraversals --;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n`;\n","export const traceSceneGLSL = /* glsl */`\n\n\t#define NO_HIT 0\n\t#define SURFACE_HIT 1\n\t#define LIGHT_HIT 2\n\t#define FOG_HIT 3\n\n\tint traceScene(\n\n\t\tvec3 rayOrigin, vec3 rayDirection,\n\t\tBVH bvh, LightsInfo lights, Material fogMaterial,\n\t\tout uvec4 faceIndices, out vec3 faceNormal, out vec3 barycoord, out float side, out float dist,\n\t\tout LightSampleRecord lightSampleRec\n\n\t) {\n\n\t\tbool hit = bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\n\t\tbool lightHit = lightsClosestHit( lights.tex, lights.count, rayOrigin, rayDirection, lightSampleRec );\n\n\t\t#if FEATURE_FOG\n\n\t\tif ( fogMaterial.fogVolume ) {\n\n\t\t\tfloat particleDist = intersectFogVolume( fogMaterial, sobol( 1 ) );\n\t\t\tif ( particleDist + 1e-4 < dist && ( particleDist + 1e-4 < lightSampleRec.dist || ! lightHit ) ) {\n\n\t\t\t\tside = 1.0;\n\t\t\t\tfaceNormal = normalize( - rayDirection );\n\t\t\t\tdist = particleDist;\n\t\t\t\treturn FOG_HIT;\n\n\t\t\t}\n\n\t\t}\n\n\t\t#endif\n\n\t\tif ( lightHit && ( lightSampleRec.dist < dist || ! hit ) ) {\n\n\t\t\treturn LIGHT_HIT;\n\n\t\t}\n\n\t\tif ( hit ) {\n\n\t\t\treturn SURFACE_HIT;\n\n\t\t}\n\n\t\treturn NO_HIT;\n\n\t}\n\n`;\n","\nexport const getSurfaceRecordGLSL = /* glsl */`\n\n\t#define SKIP_SURFACE 0\n\t#define HIT_SURFACE 1\n\tint getSurfaceRecord(\n\t\tMaterial material, sampler2DArray attributesArray,\n\t\tfloat side, vec3 barycoord, uvec4 faceIndices, vec3 faceNormal, float accumulatedRoughness,\n\n\t\tout SurfaceRecord surf\n\t) {\n\n\t\tif ( material.fogVolume ) {\n\n\t\t\tvec3 normal = vec3( 0, 0, 1 );\n\n\t\t\tSurfaceRecord fogSurface;\n\t\t\tfogSurface.volumeParticle = true;\n\t\t\tfogSurface.color = material.color;\n\t\t\tfogSurface.emission = material.emissiveIntensity * material.emissive;\n\t\t\tfogSurface.normal = normal;\n\t\t\tfogSurface.faceNormal = normal;\n\t\t\tfogSurface.clearcoatNormal = normal;\n\n\t\t\tsurf = fogSurface;\n\t\t\treturn HIT_SURFACE;\n\n\t\t}\n\n\t\t// uv coord for textures\n\t\tvec2 uv = textureSampleBarycoord( attributesArray, ATTR_UV, barycoord, faceIndices.xyz ).xy;\n\t\tvec4 vertexColor = textureSampleBarycoord( attributesArray, ATTR_COLOR, barycoord, faceIndices.xyz );\n\n\t\t// albedo\n\t\tvec4 albedo = vec4( material.color, material.opacity );\n\t\tif ( material.map != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\n\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\n\t\t}\n\n\t\tif ( material.vertexColors ) {\n\n\t\t\talbedo *= vertexColor;\n\n\t\t}\n\n\t\t// alphaMap\n\t\tif ( material.alphaMap != - 1 ) {\n\n\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\n\n\t\t}\n\n\t\t// possibly skip this sample if it's transparent, alpha test is enabled, or we hit the wrong material side\n\t\t// and it's single sided.\n\t\t// - alpha test is disabled when it === 0\n\t\t// - the material sidedness test is complicated because we want light to pass through the back side but still\n\t\t// be able to see the front side. This boolean checks if the side we hit is the front side on the first ray\n\t\t// and we're rendering the other then we skip it. Do the opposite on subsequent bounces to get incoming light.\n\t\tfloat alphaTest = material.alphaTest;\n\t\tbool useAlphaTest = alphaTest != 0.0;\n\t\tif (\n\t\t\t// material sidedness\n\t\t\tmaterial.side != 0.0 && side != material.side\n\n\t\t\t// alpha test\n\t\t\t|| useAlphaTest && albedo.a < alphaTest\n\n\t\t\t// opacity\n\t\t\t|| material.transparent && ! useAlphaTest && albedo.a < sobol( 3 )\n\t\t) {\n\n\t\t\treturn SKIP_SURFACE;\n\n\t\t}\n\n\t\t// fetch the interpolated smooth normal\n\t\tvec3 normal = normalize( textureSampleBarycoord(\n\t\t\tattributesArray,\n\t\t\tATTR_NORMAL,\n\t\t\tbarycoord,\n\t\t\tfaceIndices.xyz\n\t\t).xyz );\n\n\t\t// roughness\n\t\tfloat roughness = material.roughness;\n\t\tif ( material.roughnessMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.roughnessMapTransform * vec3( uv, 1 );\n\t\t\troughness *= texture2D( textures, vec3( uvPrime.xy, material.roughnessMap ) ).g;\n\n\t\t}\n\n\t\t// metalness\n\t\tfloat metalness = material.metalness;\n\t\tif ( material.metalnessMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\n\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\n\n\t\t}\n\n\t\t// emission\n\t\tvec3 emission = material.emissiveIntensity * material.emissive;\n\t\tif ( material.emissiveMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.emissiveMapTransform * vec3( uv, 1 );\n\t\t\temission *= texture2D( textures, vec3( uvPrime.xy, material.emissiveMap ) ).xyz;\n\n\t\t}\n\n\t\t// transmission\n\t\tfloat transmission = material.transmission;\n\t\tif ( material.transmissionMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\n\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\n\n\t\t}\n\n\t\t// normal\n\t\tif ( material.flatShading ) {\n\n\t\t\t// if we're rendering a flat shaded object then use the face normals - the face normal\n\t\t\t// is provided based on the side the ray hits the mesh so flip it to align with the\n\t\t\t// interpolated vertex normals.\n\t\t\tnormal = faceNormal * side;\n\n\t\t}\n\n\t\tvec3 baseNormal = normal;\n\t\tif ( material.normalMap != - 1 ) {\n\n\t\t\tvec4 tangentSample = textureSampleBarycoord(\n\t\t\t\tattributesArray,\n\t\t\t\tATTR_TANGENT,\n\t\t\t\tbarycoord,\n\t\t\t\tfaceIndices.xyz\n\t\t\t);\n\n\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\n\t\t\t// resulting in NaNs and slow path tracing.\n\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\n\n\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\n\t\t\t\tvec3 bitangent = normalize( cross( normal, tangent ) * tangentSample.w );\n\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t\t\tvec3 uvPrime = material.normalMapTransform * vec3( uv, 1 );\n\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.normalMap ) ).xyz * 2.0 - 1.0;\n\t\t\t\ttexNormal.xy *= material.normalScale;\n\t\t\t\tnormal = vTBN * texNormal;\n\n\t\t\t}\n\n\t\t}\n\n\t\tnormal *= side;\n\n\t\t// clearcoat\n\t\tfloat clearcoat = material.clearcoat;\n\t\tif ( material.clearcoatMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.clearcoatMapTransform * vec3( uv, 1 );\n\t\t\tclearcoat *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatMap ) ).r;\n\n\t\t}\n\n\t\t// clearcoatRoughness\n\t\tfloat clearcoatRoughness = material.clearcoatRoughness;\n\t\tif ( material.clearcoatRoughnessMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.clearcoatRoughnessMapTransform * vec3( uv, 1 );\n\t\t\tclearcoatRoughness *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatRoughnessMap ) ).g;\n\n\t\t}\n\n\t\t// clearcoatNormal\n\t\tvec3 clearcoatNormal = baseNormal;\n\t\tif ( material.clearcoatNormalMap != - 1 ) {\n\n\t\t\tvec4 tangentSample = textureSampleBarycoord(\n\t\t\t\tattributesArray,\n\t\t\t\tATTR_TANGENT,\n\t\t\t\tbarycoord,\n\t\t\t\tfaceIndices.xyz\n\t\t\t);\n\n\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\n\t\t\t// resulting in NaNs and slow path tracing.\n\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\n\n\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\n\t\t\t\tvec3 bitangent = normalize( cross( clearcoatNormal, tangent ) * tangentSample.w );\n\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\n\n\t\t\t\tvec3 uvPrime = material.clearcoatNormalMapTransform * vec3( uv, 1 );\n\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.clearcoatNormalMap ) ).xyz * 2.0 - 1.0;\n\t\t\t\ttexNormal.xy *= material.clearcoatNormalScale;\n\t\t\t\tclearcoatNormal = vTBN * texNormal;\n\n\t\t\t}\n\n\t\t}\n\n\t\tclearcoatNormal *= side;\n\n\t\t// sheenColor\n\t\tvec3 sheenColor = material.sheenColor;\n\t\tif ( material.sheenColorMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.sheenColorMapTransform * vec3( uv, 1 );\n\t\t\tsheenColor *= texture2D( textures, vec3( uvPrime.xy, material.sheenColorMap ) ).rgb;\n\n\t\t}\n\n\t\t// sheenRoughness\n\t\tfloat sheenRoughness = material.sheenRoughness;\n\t\tif ( material.sheenRoughnessMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.sheenRoughnessMapTransform * vec3( uv, 1 );\n\t\t\tsheenRoughness *= texture2D( textures, vec3( uvPrime.xy, material.sheenRoughnessMap ) ).a;\n\n\t\t}\n\n\t\t// iridescence\n\t\tfloat iridescence = material.iridescence;\n\t\tif ( material.iridescenceMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.iridescenceMapTransform * vec3( uv, 1 );\n\t\t\tiridescence *= texture2D( textures, vec3( uvPrime.xy, material.iridescenceMap ) ).r;\n\n\t\t}\n\n\t\t// iridescence thickness\n\t\tfloat iridescenceThickness = material.iridescenceThicknessMaximum;\n\t\tif ( material.iridescenceThicknessMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.iridescenceThicknessMapTransform * vec3( uv, 1 );\n\t\t\tfloat iridescenceThicknessSampled = texture2D( textures, vec3( uvPrime.xy, material.iridescenceThicknessMap ) ).g;\n\t\t\tiridescenceThickness = mix( material.iridescenceThicknessMinimum, material.iridescenceThicknessMaximum, iridescenceThicknessSampled );\n\n\t\t}\n\n\t\tiridescence = iridescenceThickness == 0.0 ? 0.0 : iridescence;\n\n\t\t// specular color\n\t\tvec3 specularColor = material.specularColor;\n\t\tif ( material.specularColorMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.specularColorMapTransform * vec3( uv, 1 );\n\t\t\tspecularColor *= texture2D( textures, vec3( uvPrime.xy, material.specularColorMap ) ).rgb;\n\n\t\t}\n\n\t\t// specular intensity\n\t\tfloat specularIntensity = material.specularIntensity;\n\t\tif ( material.specularIntensityMap != - 1 ) {\n\n\t\t\tvec3 uvPrime = material.specularIntensityMapTransform * vec3( uv, 1 );\n\t\t\tspecularIntensity *= texture2D( textures, vec3( uvPrime.xy, material.specularIntensityMap ) ).a;\n\n\t\t}\n\n\t\tsurf.volumeParticle = false;\n\n\t\tsurf.faceNormal = faceNormal;\n\t\tsurf.normal = normal;\n\n\t\tsurf.metalness = metalness;\n\t\tsurf.color = albedo.rgb;\n\t\tsurf.emission = emission;\n\n\t\tsurf.ior = material.ior;\n\t\tsurf.transmission = transmission;\n\t\tsurf.thinFilm = material.thinFilm;\n\t\tsurf.attenuationColor = material.attenuationColor;\n\t\tsurf.attenuationDistance = material.attenuationDistance;\n\n\t\tsurf.clearcoatNormal = clearcoatNormal;\n\t\tsurf.clearcoat = clearcoat;\n\n\t\tsurf.sheen = material.sheen;\n\t\tsurf.sheenColor = sheenColor;\n\n\t\tsurf.iridescence = iridescence;\n\t\tsurf.iridescenceIor = material.iridescenceIor;\n\t\tsurf.iridescenceThickness = iridescenceThickness;\n\n\t\tsurf.specularColor = specularColor;\n\t\tsurf.specularIntensity = specularIntensity;\n\n\t\t// apply perceptual roughness factor from gltf. sheen perceptual roughness is\n\t\t// applied by its brdf function\n\t\t// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#microfacet-surfaces\n\t\tsurf.roughness = roughness * roughness;\n\t\tsurf.clearcoatRoughness = clearcoatRoughness * clearcoatRoughness;\n\t\tsurf.sheenRoughness = sheenRoughness;\n\n\t\t// frontFace is used to determine transmissive properties and PDF. If no transmission is used\n\t\t// then we can just always assume this is a front face.\n\t\tsurf.frontFace = side == 1.0 || transmission == 0.0;\n\t\tsurf.eta = material.thinFilm || surf.frontFace ? 1.0 / material.ior : material.ior;\n\t\tsurf.f0 = iorRatioToF0( surf.eta );\n\n\t\t// Compute the filtered roughness value to use during specular reflection computations.\n\t\t// The accumulated roughness value is scaled by a user setting and a \"magic value\" of 5.0.\n\t\t// If we're exiting something transmissive then scale the factor down significantly so we can retain\n\t\t// sharp internal reflections\n\t\tsurf.filteredRoughness = applyFilteredGlossy( surf.roughness, accumulatedRoughness );\n\t\tsurf.filteredClearcoatRoughness = applyFilteredGlossy( surf.clearcoatRoughness, accumulatedRoughness );\n\n\t\treturn HIT_SURFACE;\n\n\t}\n`;\n","import { Color, MeshStandardMaterial } from 'three';\n\nexport class FogVolumeMaterial extends MeshStandardMaterial {\n\n\tconstructor( params ) {\n\n\t\tsuper( params );\n\n\t\tthis.isFogVolumeMaterial = true;\n\n\t\tthis.density = 0.015;\n\t\tthis.emissive = new Color();\n\t\tthis.emissiveIntensity = 0.0;\n\t\tthis.opacity = 0.15;\n\t\tthis.transparent = true;\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.setValues( params );\n\n\t}\n\n}\n"],"names":["parcelRequire","$ilwiq","$d0f249dd9f03ac59$var$_scissor","Vector4","$d0f249dd9f03ac59$var$_viewport","$d0f249dd9f03ac59$var$renderTask","_renderer","_fsQuad","_blendQuad","_primaryTarget","_blendTargets","_sobolTarget","_subframe","alpha","camera","material","this","_ogScissor","_ogViewport","blendMaterial","blendTarget1","blendTarget2","opacity","_opacityFactor","_samples","blending","NoBlending","NormalBlending","subX","subY","subW","subH","w","width","h","height","resolution","set","sobolTexture","texture","seed","tilesX","tiles","x","tilesY","y","totalTiles","dprInv","getPixelRatio","cameraWorldMatrix","copy","matrixWorld","invProjectionMatrix","projectionMatrixInverse","cameraType","projectionMatrix","elements","isEquirectCamera","setDefine","ogRenderTarget","getRenderTarget","ogAutoClear","autoClear","ogScissorTest","getScissorTest","getScissor","getViewport","tx","ty","stableTiles","tileIndex","_currentTile","setRenderTarget","setScissorTest","z","multiplyScalar","ceil","setScissor","setViewport","render","target1","target2","Math","round","$d0f249dd9f03ac59$var$ogClearColor","Color","$d0f249dd9f03ac59$export$196da6cc71a4331","v","target","_alpha","dispose","reset","samples","constructor","renderer","Vector2","stableNoise","$RPVlj","FullScreenQuad","$4dqlL","BlendMaterial","_task","$9kitj","SobolNumberMapGenerator","generate","WebGLRenderTarget","format","RGBAFormat","type","FloatType","setSize","ogClearAlpha","getClearAlpha","getClearColor","setClearColor","clearColor","update","call","next","$311cd0e92e040f64$export$70ee8b3cbd6f21d8","$9fZ6X","MaterialBase","parameters","super","uniforms","value","vertexShader","fragmentShader","setValues","$6ca44f672d576995$var$SobolNumbersMaterial","$ffLvN","sobolCommonGLSL","sobolGenerationGLSL","$6ca44f672d576995$export$4e8e5459f15b1dca","dimensions","minFilter","NearestFilter","magFilter","generateMipmaps","ogTarget","quad","$b1ad1c9578ecec04$var$generateSobolFunctionVariants","dim","$b1ad1c9578ecec04$var$generateSobolSampleFunctions","utype","vtype","num","components","combineValues","$b1ad1c9578ecec04$export$f98593ef9bf32cb0","$b1ad1c9578ecec04$export$628390bcafb31fdb","$b1ad1c9578ecec04$export$97631f35540d89f","$7e0dd71cc59529b1$var$_task","cb","viewCount","_camera","_quiltUtility","quiltViewInfo","subframe","offsetDirection","Vector3","i","near","far","getCameraViewInfo","transformDirection","decompose","position","quaternion","scale","addScaledVector","offset","updateMatrixWorld","invert","floor","_quiltSamples","ogCamera","$7e0dd71cc59529b1$var$QuiltViewUtility","quiltDimensions","viewCone","MathUtils","DEG2RAD","viewFoV","displayDistance","displayAspect","Matrix4","halfWidth","tan","displayHalfHeight","displayHalfWidth","nearScale","makePerspective","qw","qh","setFromDisplayView","viewerDistance","displayWidth","displayHeight","atan","$7e0dd71cc59529b1$export$d4ccedbe42c466a4","$hWds8","PathTracingRenderer","args","forEach","member","Object","defineProperty","enumerable","get","PerspectiveCamera","_quiltTask","$fc1143d2ee906d9d$export$b42762e2bf679e84","initialized","Boolean","bvh","scene","objects","Array","isArray","geometry","BufferGeometry","materials","textures","lights","staticGeometryGenerator","$8Zfx2","StaticGeometryGenerator","attributes","l","length","traverse","c","isMesh","normalMapRequired","normalMap","$jM3IF","setCommonAttributes","isRectAreaLight","isSpotLight","push","textureSet","Set","getMaterials","key","isTexture","add","materialIndexAttribute","getGroupMaterialIndicesAttribute","setAttribute","clearGroups","MeshBVH","from","refit","$465cbee6efe1dae1$var$isTypedArray","arr","buffer","ArrayBuffer","$465cbee6efe1dae1$export$c80603c061964928","ignoreKeys","shareTextures","areEqual","objectA","objectB","keySet","traverseSet","a","b","has","Error","aIsElement","Element","bIsElement","Image","src","aIsImageBitmap","ImageBitmap","bIsImageBitmap","equals","aIsTypedArray","bIsTypedArray","clear","hasOwnProperty","Function","key1","keys","values","result","delete","process","object","replaced","processMaterial","foundMaterial","otherMaterial","image","foundTexture","retained","$f1d46319b05d893e$export$baf85f88dacad6d5","bokehSize","size","fStop","getFocalLength","apertureBlades","apertureRotation","focusDistance","anamorphicRatio","$2c39bed40281e07d$export$6503f7c8e24ae98b","Camera","$983bac6297e5cd71$export$920191b129a29c0","SpotLight","iesTexture","radius","$da3d2bb2945c982a$export$9641f8e91392f35d","RectAreaLight","isCircular","$88425f7125b6e46c$var$_direction","$88425f7125b6e46c$export$38d6a241e670a287","$dbdMq","ProceduralEquirectTexture","topColor","bottomColor","exponent","generationCallback","polar","uv","coord","color","setFromSpherical","t","lerpColors","other","$9986fde00d79bc96$var$_uv","$9986fde00d79bc96$var$_coord","$9986fde00d79bc96$var$_polar","Spherical","$9986fde00d79bc96$var$_color","$9986fde00d79bc96$export$ab88b3c5fea10066","DataTexture","Float32Array","EquirectangularReflectionMapping","RepeatWrapping","ClampToEdgeWrapping","LinearFilter","needsUpdate","data","theta","PI","phi","i4","r","g","$ac13547279de9cd0$var$PMREMCopyMaterial","envMap","blur","$6T5Sj","utilsGLSL","$ac13547279de9cd0$export$13ef63fd7e562136","pmremGenerator","PMREMGenerator","copyQuad","renderTarget","pmremTarget","fromEquirectangular","prevRenderTarget","prevClear","readRenderTargetPixels","wrapS","wrapT","mapping","$503c6fc997388214$export$d3399e85bcd66864","$52f95bc4e24e9612$var$IESLamp","text1","_self","textArray","split","line1","lineNumber","textToArray","text","trim","replace","readArray","count","array","lineData","Number","verAngles","horAngles","candelaValues","tiltData","angles","mulFactors","includes","line","lampToLumGeometry","numAngles","readTilt","lumens","multiplier","numVerAngles","numHorAngles","gonioType","units","readLampValues","ballFactor","blpFactor","inputWatts","readLampFactors","i1","i2","j","maxVal","i3","j1","$52f95bc4e24e9612$export$f1ffec369846389b","Loader","_getIESValues","iesLamp","interpolateCandelaValues","phiIndex","thetaIndex","startTheta","endTheta","startPhi","endPhi","i5","deltaTheta","deltaPhi","t1","t2","nextThetaIndex","v1","lerp","v2","startTheta1","endTheta1","i6","load","url","onLoad","onProgress","onError","loader","FileLoader","manager","setResponseType","setCrossOrigin","crossOrigin","setWithCredentials","withCredentials","setPath","path","setRequestHeader","requestHeader","RedFormat","undefined","parse","$681d3146eaaf1aa4$export$e6c92f54dc85f279","transparent","depthWrite","depthTest","defines","USE_SLIDER","sigma","threshold","kSigma","map","$162adcf1224d60ef$export$8af0c82d10044f6a","graphFunctionSnippet","_graphFunctionSnippet","thickness","graphCount","graphDisplay","overlay","xRange","yRange","colors","convertSRGBToLinear","onBeforeCompile","shader","customProgramCacheKey","$d471e9adcf389a5c$export$746cbc9e65f5bcb8","onBeforeRender","physicalCamera","backgroundMap","features","isUsed","FEATURE_MIS","FEATURE_RUSSIAN_ROULETTE","FEATURE_DOF","FEATURE_BACKGROUND_MAP","FEATURE_FOG","CAMERA_TYPE","ATTR_NORMAL","ATTR_TANGENT","ATTR_UV","ATTR_COLOR","bounces","transmissiveBounces","$iyhQ7","PhysicalCameraUniform","MeshBVHUniformStruct","attributesArray","$6Q19u","AttributesTextureArray","UIntVertexAttributeTexture","$laA5G","MaterialsTexture","$12pjC","RenderTarget2DArray","$TWVPU","LightsInfoUniformStruct","iesProfiles","$8nCwU","IESProfilesTexture","backgroundBlur","environmentIntensity","environmentRotation","envMapInfo","$kAJM1","EquirectHdrInfoUniform","filterGlossyFactor","backgroundAlpha","shaderStructs","shaderIntersectFunction","$kmALz","pcgGLSL","sobolSamplingGLSL","$hDPBH","arraySamplerTexelFetchGLSL","$ibAuh","fresnelGLSL","$Cp64s","mathGLSL","$59dZo","intersectShapesGLSL","$ejeD6","cameraStructGLSL","$euxcz","lightsStructGLSL","$7Ee23","equirectStructGLSL","$kiOyI","materialStructGLSL","$azDH8","fogMaterialBvhGLSL","$jJR4H","shapeSamplingGLSL","$614HA","bsdfSamplingGLSL","$a0p7X","equirectSamplingGLSL","$6WG26","lightSamplingGLSL","$k3NkH","fogGLSL","$kB2W0","cameraUtilsGLSL","$lrWoU","traceSceneGLSL","$9h5et","attenuateHitGLSL","$auGOd","getSurfaceRecordGLSL","$kLfIo","$d8193d8a8d6141d1$export$2e27c77dea3c9d73","updateFrom","PhysicalCamera","$efdaad16b8cd905b$var$binarySearchFindClosestIndexOf","targetValue","lower","upper","mid","$efdaad16b8cd905b$var$colorToLuminance","$efdaad16b8cd905b$export$e5a77e5d6a85a862","whiteTex","marginalWeights","conditionalWeights","totalSumWhole","totalSumDecimal","hdr","clone","source","Source","newData","HalfFloatType","DataUtils","fromHalfFloat","flipY","ogData","slice","ogIndex","newIndex","$efdaad16b8cd905b$var$preprocessEnvMap","pdfConditional","cdfConditional","pdfMarginal","cdfMarginal","totalSumValue","cumulativeWeightMarginal","cumulativeRowWeight","weight","marginalDataArray","conditionalDataArray","row","y1","col","$0a82d9ce12cf98b8$export$bb02c0eb15767758","tex","iesTextures","pixelCount","max","dimension","sqrt","floatArray","u","m","worldQuaternion","Quaternion","eye","up","baseIndex","index","getWorldPosition","isDirectionalLight","isPointLight","intensity","getWorldQuaternion","applyQuaternion","cross","setFromMatrixPosition","lookAt","setFromRotationMatrix","shadow","decay","distance","cos","angle","penumbra","indexOf","worldPosition","targetPosition","subVectors","normalize","$619e5bed458602b0$var$prevColor","$619e5bed458602b0$export$cc46c2e928f0cae0","WebGLArrayRenderTarget","args1","fsQuad","MeshBasicMaterial","iesLoader","$77Fts","IESLoader","async","prevToneMapping","toneMapping","prevAlpha","depth","NoToneMapping","matrixAutoUpdate","matrix","identity","updateMatrix","$7Ie7O","$4fa87e2831d7f36b$export$2e089d4ee1364df8","FloatAttributeTextureArray","updateNormalAttribute","attr","updateAttribute","updateTangentAttribute","updateUvAttribute","updateColorAttribute","normal","tangent","setAttributes","$59d79964e8fc761c$var$copyArrayToArray","fromArray","fromStride","toArray","toStride","bpe","BYTES_PER_ELEMENT","maxValue","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","is","$59d79964e8fc761c$export$74918e5550c6edfc","DataArrayTexture","_textures","internalFormat","baseImage","itemSize","attrs","itemCount","attrsLength","FloatVertexAttributeTexture","pop","l1","l2","$f69686fae5159582$var$MATERIAL_STRIDE","$f69686fae5159582$var$MATERIAL_PIXELS","$f69686fae5159582$var$MaterialFeatures","_features","feature","setUsed","used","$f69686fae5159582$export$ae96f3619813ce17","threeCompatibilityTransforms","setCastShadow","materialIndex","cast","getCastShadow","setMatte","matte","getMatte","getTexture","def","hash","$kOapr","getTextureHash","uniqueTextureLookup","getField","writeTextureMatrixToArray","textureKey","specularMap","displacementMap","bumpMap","roughnessMap","metalnessMap","alphaMap","emissiveMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","iridescenceMap","iridescenceThicknessMap","specularIntensityMap","specularColorMap","transmissionMap","thicknessMap","sheenColorMap","sheenRoughnessMap","getUVTransformTexture","uniqueTextures","reduceTexturesToUniqueSources","isFogVolumeMaterial","emissive","density","normalScale","clearcoatNormalScale","sheenColor","iridescenceThicknessRange","specularColor","isThinFilm","Infinity","attenuationColor","alphaTest","transmission","side","FrontSide","BackSide","DoubleSide","vertexColors","flatShading","$f2608d3a8976ec83$export$62c3d260e4e2abca","uuid","encoding","$f2608d3a8976ec83$export$3ea341cb9862695a","sourceSet","$0c199d70d276a61d$var$prevColor","$0c199d70d276a61d$export$dbbaa51cb2d0b2f7","UnsignedByteType","setTextures","$a6ae3035f085750e$export$646d4bb3641b1edf","$5917274bf6f27c24$export$96b465952faa1564","$a8cd9f3569b5221a$export$86dc1a966a65297f","$7b2bf6cd9a7d8619$export$fe4c2684b8845960","$bkGXj","$46167bccc69b6a66$export$96799bd5d12378c4","ggxGLSL","$eqUxc","sheenGLSL","$afkdx","iridescenceGLSL","$8402e20cf3d5278b$export$43255dadd2f1892d","$02b62eda9f6f2ef3$export$1839d55d51661e93","$775afcdcff7ccb94$export$24e5557b0254df4c","$e9aa5af26dac0435$export$f165b0309b963eb","$748d653da9eeaeda$export$72d7e50ad31c0946","$50e8c3b206c66d66$export$4915393ac552c701","$3bf8a50082b76a4b$export$bc9cb047adb9d779","$0737047325ce5232$export$22337ac7d3169bab","$d3d58eb797058c23$export$6247170c7544966","$cd7e1c42ae02fc89$export$8082612e1b7206b6","$efe98a1a72e86c04$export$16594abf9903a648","$6c09c2a5fb417456$export$9bc4dde180c842c6","$f9d96bc3a284b8a7$export$381bf77f587ddffa","$7a3de9b625679bd5$export$18f877844377288f","$0c05d7af92b89513$export$cb2b7ad109612144","MeshStandardMaterial","params","emissiveIntensity","roughness","metalness"],"version":3,"file":"areaLight.696bb446.js.map"}